
1. Product Introduction
	The Artificial Intelligence (AI) Kit is an extension of the Mirobot arm accessories. It can realize the control of multiple robotic arms, intelligent interaction, industrial scenario layout, and other complex tasks. It is the ¡°brain" in the intelligent production line.

Figure 1-1 Upper Product Layer

Figure 1-2 Lower Product Layer
1.MEGA 2560  2.Two-axis Joystick 3. Six-axis Gyroscope  4. Color Sensor  5.Relay
6.Push Button (Green)7.LED Module (Green)  8.Rotating Potentiometer  9.Push Button (Red)
10.LED Module ( red)11. Wire 12.Accessories

2.Product Function
	The Artificial Intelligence (AI) Kit includes the MEGA 2560 and a variety of sensors. The performance and parameter information of each module are introduced.
2.1 MEGA 2560
	MEGA 2560 is an expansion board specially designed by WLKATA for smart factory. It supports communication between UART and RS485. It can easily and efficiently implement the task allocation and control of multiple Mirobot robotic arms. The extension board is equipped with RGB lights, buzzers, buttons, and OLED screens. It also expands with 3-pin digital signal, 3-pin analog signal, PS2, Bluetooth, Wi-Fi, and other interfaces. It provides great convenience for development and use.

Figure. 2-1 Schematic diagram of MEGA 2560
Parameters: 

2.2 Two-Axis Joystick

Figure 2-2 Two-Axis Joystick
Introduction: 
	Two-axis joystick has two analog output and one digital output interface. The output values correspond to the offset of the x and y axis respectively, which represent the analog values. The button indicates whether the Z-axis is pressed, which represents digital switch quantity. Integrated power indicator shows working status. Coordinate identifier is clear, concise, and accurate positioning. A two-axis joystick can be used to easily control the movement of objects in two dimensions.
Parameter: 
1. Operating voltage: 5V
2. Outputs: 
Analogs Output: correspond to the offset of the x and y axis respectively
Digital Output: indicates whether the Z-axis is pressed
4. The cross joystick is a bidirectional 10K resistor. The resistance value changes with direction. The module uses 5 V for the power supply. The original voltage of X and Y is about 25 V. When the joystick is pressed down, the voltage increases with the peak value reaching 5 V,  when the arrow is pressed down in the opposite direction, the readout voltage value decreases, and the minimum value is 0 V.

2.3 Six-axis Gyroscope

Figure 2-3 Six-axis gyroscope
Introduction:
	This six-axis module adopts advanced digital filtering technology (Kalman filter), which can effectively reduce measurement noise and increase accuracy. The motion engine DMP is integrated inside the module to obtain the quaternion to get the current posture with an accuracy of 0.01 degrees. Its stability is high, and its performance is better than some professional inclination meters. 
Parameter:
Voltage: 5V
Current: <10mA
Volume : 22.5mmX40mm  Weight:1.1g
Interface: 4-pin XH2.0
Measure Dimensionality: Acceleration:3D, Angular velocity:3D, Attitude Angle: 3D
Range: acceleration ¡À16g, Angular Velocity: ¡À2000¡ã/s.
Range: acceleration ¡À16g, Angular Velocity: ¡À2000¡ã/s.
Stability: Acceleration:0.001g, Angular velocit0.02¡ã/s.
Stability of attitude measurement: 0.01¡ã.
Communication: I2C.
Baud Rate: 115200 kps / 9600 kps

2.4 Color Sensor 

Figure 2-4 Color sensor
Introduction:
The module is based on the AMS TCS3472XFN color optical digital converter as the core. It provides red, green, blue (RGB), and clear light output. The integrated IR blocking filter minimizes the infrared spectral composition of incident light and enables precise color measurement. With high sensitivity and a wide dynamic range, it is able to minimize IR and UV spectral effects to produce accurate color measurements. In addition, it can detect ambient light intensity and mask interrupts. The communication is through the 12C interface. 
Parameter:
Working voltage: 5V
Control Chip: TCS3472XFN
Logic Voltage: 5V
Communication Interface: I2C
Detection Distance: 3-10mm
Clock Frequency: 0-400KHZ
Temperature Range: -30¡æ ~ +70¡æ


2.5  Relay


Figure. 2-5 Relay
Introduction
	The relay has isolation slots for the control area and the load area. It is designed with a double-sided FR-4 circuit board and produced by a high-end chip process. It equips the power supply and relays action indication. When the relay is active, the indicator lights, and when the relay is disconnected, the indicator dims. The relay has NO (Normally Open) and NC (Normally Closed) terminals. 
	When the input is a low-level signal, the COM (Common) and NO (Normally Open) will be connected. The relay can directly control all kinds of equipment, and loads. It can also control DC and AC signals. 
Parameter:
Working Voltage: 5V
Quiescent Current: 5mA
Working Current: 65mA 
Trigger Voltage: 0-3.5V
Trigger Current: 2mA
2.6 Push Button

Figure 2-6 Push Button
Introduction:
	The push buttons are paired with a colored keycap. The button can bounce back when pressed, and the digital output reflects the button status. When pressed, the output is at low level. The output is at high level when bounced back.
Parameter:
Working Voltage: 5V
Data Type: Digital
Color: Green, Red 
2.7 LED Module

Figure:2-7 LED Module
Introduction:
	LED module turns electrical energy convert into light energy. The module lights up on high-level and off on low-level. The brightness of the light can be controlled by changing the analog value.
Parameter:
Working Voltage:5V
Working Temperature: -45¡æ~85¡æ
Working Principle: Light emitting diode driven 
Color: Green, Red
2.8 Rotary Potentiometer

Figure 2-8 Rotary Potentiometer
Introduction:
	The rotary potentiometer uses the potentiometer principle. When the knob is turned, it outputs different voltage values. The rotation angle is 270¡ã, and the output value is 0~1023.
Parameter:
Working Voltage: 5V
Operating Temperature: -45¡æ~85¡æ
Output Signal: Analog Signal
Rotation angle: 270¡ã
Resistance Range: 0~10K¦¸
2.9  Bluetooth Module

Figure 2-9 Bluetooth Module
	The Bluetooth of the MEGA 2560 shares the same communication interface as the Serial 2. Please pay careful attention when using.

Figure 2-10 Bluetooth Module Installation Location
	When installing the Bluetooth module, please ensure to face the side with the chip towards the MEGA 2560, as shown in Figure 2-10.
The Bluetooth module has been pre-configured. The default parameters are as follows:
Module Name: HC-05
Module Role: Slave Mode (passive connection)
Pairing Code: 7676
Baud rate: 4800
If secondary configuration is required during the development, please configure the Bluetooth Module according to the Bluetooth Module Instruction Table. For configuration, upload ¡°BT2.0.¡±  into the MEGA 2560.

Figure 2-11 Bluetooth Configuration Program
After the program is uploaded, insert the Bluetooth module 3 seconds later, as shown in Figure 2-10. The light indicator on Bluetooth will be on for 1 second every two seconds. Then, open the serial monitor, Change the baud rate to 9600 and no terminator is required.












AI Vision Set
User Manual
(Technical Development Document)





Document Version£ºV1.002
Release Date£º2021/03/01

Copyright  Beijing Tsinew Technologies Co., Ltd. 2021. All rights reserved.
Without the written permission of the company, any unit or individual shall not excerpt, copy part or all of the content of this document without authorization, and shall not disseminate it in any form.

Disclaimer
 To the maximum extent permitted by law, the products described in this manual (including its hardware, software, firmware, etc.) are provided "As-is" and may have defects, errors or malfunctions. Beijing Tsinew does not provide any form of express or implied warranty, nor does it compensate for any special, incidental or indirect damages caused by the use of this manual or the use of the company's products. Before using this product, please read this manual and related technical documents published on the Internet and learn more relevant information. Make sure to use this product under the premise of fully understanding the product-related knowledge.
The user of this product is responsible for following the laws and regulations of relevant countries and ensuring that there are no major dangers in the use of Beijing Tsinew robotic arms. 
Revision Notes
Beijing Tsinew Technologies Co., Ltd.
Address: Room 1603, Zhongguancun Energy & Security Science Park, Building 3, Qinghua East Road 16 , Haidian District, Beijing 
Official Website£ºwww.wlkata.com

1. Product introduction
AI vision set (hereinafter referred to as "vision set") is an important accessory of Mirobot robotic arm. It can work well with the robotic arm to complete color recognition and sorting, image recognition processing and other tasks. With its help, the robotic arm can become more "smart" and easier to handle complex tasks.

Figure 1: AI Vision Set
1.Light  2.Monitor screen  3.Support beam  4.Light bracket  5.Support rod  6.Support rod connector
7.Calibration board  8.Base plate  9.Extender box bracket  10.Foot pad
2. Introduction to AI Vision Set Components
AI Vision Module

Function: Obtain image information, realize the functions of color patches searching, face detection, eye tracking, edge detection, sign tracking, etc., which can be used to realize detecting illegal intrusion, screening of defective products, tracking fixed markers, etc. Users only need to write some simple Python codes to easily complete various machine vision-related tasks.
Interface: serial port (XH2.54-4), LCD interface, MicroUSB interface

Accessories: TF card; No distortion lens
Monitor screen

Screen type: 1.8¡±TFT  LCD
Horizontal resolution: 128 pixels£¨28.03mm£©0.18mm pixel pitch
Vertical resolution: 160 pixels£¨35.04mm£©0.18mm pixel pitch
Display color: 64K 16-bit RGB565

3. Quick Start of AI vision Set
3.1 Structure assembly
Install support rod
£¨1£©Install the food pad
Take out the bottom plate, remove the protecting film on the bottom plate surface, and use M4-18 round head inner hexagon bolts and nuts to fix the foot pads on the four corners of the bottom plate;

£¨2£©Install support pod connector (flange)
Use M4-18 round head inner hexagon bolts and nuts to fix the support rod connector (flange) at the position shown in the figure (note: the threaded hole of the fastening screw on the side of the flange faces the side of the bottom plate).

£¨2£©Install support pod
Insert the support rod vertically into the connector and use M5-12 nylon buffer screws to tighten it. (note: the side with the hole on should face down, the support rod is a hollow round tube, this hole is used for the serial port line to pass through)

Install AI vision module, screen and light
£¨1£©Fixed the AI vision module
Place the bracket in the direction shown in the figure. Insert the AI vision module into the notch of the bracket. Pay attention to the direction. The side of the cable socket faces the round hole of the bracket. After confirming the position, fix it with M5-10 hand screws.

£¨2£©Fix monitor screen
The screen is installed to the position shown in the figure, and fixed with M5-10 hand screws.

£¨3£©Install brackets
The round hole of the bracket should be matched with the support rod and fixed with M5-12 nylon buffer screws.

£¨4£©Assemble the light bracket
Connect the light to the bracket.

£¨3£©Fixed light (optional)
Install the light close to the beam of the bracket and fix it with quick-release screws.



The basic structure of the vision set has been assembled, and the rest of the accessories can be selected and installed according to needs.
3.2Install OpenMV IDE
Software download
https://singtown.com/openmv-download/
Software installation
Follow the prompts to install;
Device connection
£¨1£©Connect the AI vision module to the computer via the Micro-USB data cable;
£¨2£©Open the device manager to check whether the vision module is recognized;

£¨3£©Double-click the OpenMV IDE icon to open the software;

£¨4£©Click the "Connect" button to connect the device;

£¨5£©Select "Cancel" in the pop-up firmware upgrade request dialog box£¨the device is unavailable after the firmware upgrade£©£»

£¨6£©Click the "Start" button in the lower right corner to run the current "helloworld_1.py"£»

£¨7£©After it starting to run, you can see the image in the frame buffer at the top right of the interface.

£¨8£©If you need it to run offline, you can save the program to the vision module;

£¨9£©OpenMV IDE information can refer to related documents.


3.3 Example (1)
This example explains the use of the buttons of the vision module, the on-board light and the monitoring screen;
Structural assembly
The vision module and the on-board light need to be powered through the serial port. So in this case, the extender box will be used for power supply.
£¨1£©Fix robotic arm
Use M4-18 round head inner hexagon bolts and nuts at the position shown in the figure to fix the robot arm to the bottom plate;

£¨2£©Place the robotic arm extender box
Fix the extender box bracket to the base plate with M4-18 round head inner hexagon bolts and nuts, and place the extender box on it;

Hardware connection

Note: The robotic arm expansion board is different from the extender box's serial port interface. The expansion board is PH2.0-4P, and the multifunctional extender box is XH2.54-4P. Please choose the device according to the connector shape of the serial cable.



Code analysis (file: Example_1.py)
The LCD screen displays the image of the vision module. Press the button on the module to control the on-board light to turn on or off.
importsensor,image,time,pyb,lcd# Introduce the modules that this routine depends on¡£ Sensor is a module related to camera parameter settings, image is a module related to image processing
frompybimportPin,Timer

sensor.reset()#Initialize the camera, reset() is a function in the sensor module
sensor.set_pixformat(sensor.RGB565)#Set the image color format. There are two types: RGB565 color image and GRAYSCALE gray scale image
sensor.set_framesize(sensor.QVGA)#Set the image size to QVGA(320x240)
sensor.skip_frames(time=2000)#Wait for the settings to take effect

lcd.init()#Initialize the LCD screen

Button=Pin('P6',Pin.IN,Pin.PULL_UP)#Connect the switch button of the vision module to Pin6, set the switch to close, and set the pin low. 

tim=Timer(4,freq=1000)#Use Timer 4 to create a timer object-trigger by 1000 Hz
Led=tim.channel(3,Timer.PWM,pin=Pin("P9"),pulse_width_percent=0)#Configure the percentage of the initial pulse width value of Pin9 to 0

clock=time.clock()#Create a clock object

i=1#Assign values to variables

while(True):#pythonwhile loop, do not forget to add a colon ":"
img=sensor.snapshot()#Take a picture and return the image.
lcd.display(img)#Display image, image size£¨128¡Á160£©
clock.tick()#Update FPS frame rate clock
print(clock.fps())#Print the current frame rate
ifButton.value()==0:#Determine if button is pressed
whileButton.value()==0:#Wait for the button to release
pass
ifi:
Led.pulse_width_percent(50)#Set the LED pin PWM duty cycle to 50%, turn on the onboard light, range (0-100)
i=0
else:
Led.pulse_width_percent(0)#Set the PWM duty cycle of the LED pin to 0, turn off the onboard light
i=1
When the onboard light is turned on for a long time, it will generate heat. When used for a long time, the duty cycle is recommended not to be greater than 60.



3.4 Color sorting
This example will use the AI vision module to identify colored blocks, extract their color and location information, and convert the information into G codes. Control the robotic arm to realize the color sorting of the wooden blocks.
Structural assembly
The vision module and the on-board light need to be powered through the serial port. So in this case, the extender box will be used for power supply.
£¨1£©Fix robotic arm
Use M4-18 round head inner hexagon bolts and nuts at the position shown in the figure to fix the robot arm to the bottom plate;

£¨2£©Place the robotic arm extender box
Fix the extender box bracket to the base plate with M4-18 round head inner hexagon bolts and nuts, and place the extender box on it;

£¨3£©Install pneumatic tools
Place the pneumatic box on the side of the robotic arm, and replace the end tool of the arm with a suction cup;

£¨4£©Fix calibration plate
The calibration plate need to be fixed to the bottom plate with M4-18 round head inner hexagon bolts and nuts;


Hardware connection

For the connection method of the pneumatic box and the extender box, please refer to the "Multifunctional Extender Box User Manual".

Code analysis£¨File£ºColor_sorting_mirobot.py£©
This example will use the AI vision module to identify colored blocks, extract their color and location information, and convert the information into G codes. Control the robotic arm to realize the color sorting of the wooden blocks.
£¨1£©Hardware preparation
£¨1£©The objects used for sorting are the colored round pieces provided in the set.
£¨2£©Replace the default standard lens of the vision module with a distortionless lens.
Note: Please refer to "WLKATA Pneumatic Kit Installation and Use Guide" for the installation and use of pneumatic tools
https://lin-nice.github.io/mirobot_gitbook/5-wlkata.html
Position calibration
When you run it for the first time after assembly, you need to calibrate it. Before operation, the AI vision module should remove the micro USB cable, and the controller removes the Type-B USB cable. The calibration includes the following three aspects:
£¨1£©The relative position between the robotic arm and the AI vision module;
£¨2£©The distance between the suction cup and the block;
£¨3£©The shooting angle and scope of the AI vision module.
£¨1£©Enter calibration mode
Press and hold the small black button on the side of the AI vision module while turning on the power of the robotic arm. When the light below the AI vision module lights up, it enters the calibration mode. Release the black button to reset the robotic arm.
£¨2£©AI vision module calibration
After reset, the robotic arm moves to the side and leaves the sight of the AI vision module. The module automatically performs light intensity calibration. After calibration, the LCD display will show the captured image in real time. According to the position of the image, please manually adjust the height of the bracket and the position of the AI vision module. After the pattern in the center of the screen coincides with the calibration board, short press the side button of the module to complete the calibration of the camera angle and range.
£¨3£©Calibration of the height of the block
Place the block (red) in the center of the cross of the calibration board, and short press the button on the side of the camera to control the robotic arm to lower the height of the end suction cup. Each short press reduces the height of the suction cup by 1mm, Adjusts until the suction cup completely touches the block. At this time, the coordinate of the block relative to the robot arm is x210 y0. When the height of the suction cup is reduced to the block, press and hold the side button of the camera for 3s and release it to save the position and complete the calibration of the distance between the suction cup and the block.
£¨4£©Relative position calibration
The calibration is completed automatically. After the robot arm moves to the side and leaves the camera's line of sight, the camera starts to find the position of the red block, and completes the calibration of the relative position of the camera to the robot arm according to the recognized position information. After the calibration is completed, the identification and sorting work can be started.
Code analysis
importsensor,image,time,math,lcd,os,pyb
frompybimportUART,Pin,Timer


value='./dfg.txt'#Calibration information storage location

high_z=50#he default height of the end of the robotic arm when picking up blocks
bx=140#Default coordinates for block calibration
by=120#Default coordinates for block calibration
cy=0#Coordinate offset
cx=0#Coordinate offset

#Set color threshold
thresholds=[(0,100,25,127,-128,127),#Red
(0,100,-128,-18,11,127),#Green
(1,100,-128,127,-128,-20)]#Blue

#Set up the sorting area
color_roi=(bx-75,by-75,150,150)

#Wait for the robot arm movement to complete
defmirobot_wait_finish():
inByte=''
print('wait')
whileinByte.find('>'):
whileuart.any()>0:
inByte=uart.readline().decode()
#lcd.display(sensor.snapshot())
#print(inByte)#Print the return data of the robotic arm for debugging and development
print('finish')

#Screen initialization
lcd.init()
print('LCDINIT')

pyb.delay(1000)#Delay 1s

#Set the serial port
uart=UART(3,115200)

#Set button pin
Key=Pin('P6',Pin.IN,Pin.PULL_UP)


#Set the brightness of the onboard light
tim=Timer(4,freq=1000)#Create a timer object using timer 4-trigger at 1000Hz
Led=tim.channel(3,Timer.PWM,pin=Pin("P9"),pulse_width_percent=50)#Configure the initial pulse width percentage of Pin9 to 50 (turn on the onboard fill light)

#Onboard signal light
Led_R=pyb.LED(1)#RedLED=1
Led_G=pyb.LED(2)#GreenLED=2
Led_B=pyb.LED(3)#BlueLED=3


Led_R.on()#Red light on
keyvalue=Key.value()#Read button state
pyb.delay(1000)

#Robotic arm initialization
uart.write("$40=1\n")#Let the arm open the return message
uart.write("$H\n")#reset the arm
mirobot_wait_finish()#Wait for completion
pyb.delay(2000)
uart.write("M20G90G00F2000\n")#Set the coord mode of the robotic arm
uart.write("M3S0\n")#Turn off the air pump
uart.write("X150Y-150\n")#Remove the robotic arm to prevent it blocking the camera
mirobot_wait_finish()#Wait for the action to complete

#Camera initialization
sensor.reset()#Initialize the camera
sensor.set_pixformat(sensor.RGB565)#Set the image color format to RGB565 color graph
sensor.set_framesize(sensor.QVGA)#Set the image size to QVGA(320x240)
sensor.skip_frames(time=2000)#Wait for the setting to take effect
sensor.set_auto_gain(False)#If color recognition is used, it must be turned off
sensor.set_auto_whitebal(False)#If color recognition is used, it must be turned off

Led_R.off()#Red light off

#If the button is pressed when power on, the coord mode
ifkeyvalue==0:
Led_B.on()#Blue light on
#Calibrate the image position and wait until the button is pressed
whileKey.value():
img=sensor.snapshot()
img.draw_cross(bx,by,color=(0,0,0),size=10,thickness=1)#Draw a cross
img.draw_rectangle(bx-50,by-50,100,100,color=(0,0,0),thickness=1,fill=False)#Draw a box with a side length of 100
lcd.display(img)
uart.write('X210Y0'+'z'+str(high_z)+'\n')#The end of the robotic arm moves to X210Y0Z50, where it is directly above the center of the calibration board

keytime=0#Place the red disc in the center of the calibration plate
#Calibrate the height of the suction cup, and wait for the button to be long pressed
while(True):
img=sensor.snapshot()
lcd.display(img)
whileKey.value()==0:
keytime+=1
pyb.delay(1)
ifkeytimeinrange(20,500):#Short press the button, the end of the robot arm will move down 1mm
high_z-=1
uart.write('z'+str(high_z)+'\n')#Print height
ifhigh_z<-10:
print('error\n')
break
elifkeytime>2000:#Long press to confirm the height and exit calibration
uart.write("X150Y-150Z120\n")#Remove the robotic arm to prevent blocking the camera
print("X150Y-150Z120")
mirobot_wait_finish()#Wait for the action to complete
#Automatic calibration
while(True):
find=0
img=sensor.snapshot()
forblobinimg.find_blobs(thresholds,x_stride=5,y_stride=5,pixels_threshold=50):#Identify the red block
ifblob.code()==1:#After the red block is recognized, set the center coordinates of the recognized block as the default coordinates for calibration
img.draw_string(blob.x(),blob.y()+10,'R')
img.draw_cross(blob.cx(),blob.cy())
img.draw_rectangle(blob.rect())
bx=blob.cx()
by=blob.cy()
print('colour£º',blob.cx(),blob.cy())
find=1
break
iffind==1:
break
lcd.display(img)#lcd
pyb.delay(1000)
#Record calibration information
f=open(value,'w')
f.write(str(high_z)+'\n')
f.write(str(bx)+'\n')
f.write(str(by)+'\n')
print('Variablewriting...')
print('Initialheight£º',high_z)
print('xRelativecoordinates£º',bx)
print('yRelativecoordinates£º',by)
f.close()
break
keytime=0
Led_B.off()#Blue light off

#Read calibration information
try:
f=open(value,'r')
high_z=int(f.readline())
bx=int(f.readline())
by=int(f.readline())
print('Variablewriting...')
print('Initialheight£º',high_z)
print('xRelativecoordinates£º',bx)
print('yRelativecoordinates£º',by)
#Otherwise write default parameters
except:
f=open(value,'w')
f.write(str(high_z)+'\n')
f.write(str(bx)+'\n')
f.write(str(by)+'\n')
print('Variablewriting...')
print('Initialheight£º',high_z)
print('xRelativecoordinates£º',bx)
print('yRelativecoordinates£º',by)
f.close()
else:
f.close()

Led_G.on()#Green light on
#Sorting blocks
while(True):
img=sensor.snapshot()#Get image
img.draw_cross(bx,by,color=(0,0,0),size=10,thickness=1)
img.draw_rectangle(bx-50,by-50,100,100,color=(0,0,0),thickness=1,fill=False)
#Find the color block in the color_roi range
forblobinimg.find_blobs(thresholds,roi=color_roi,x_stride=15,y_stride=15,pixels_threshold=150):
color=''
print(str(blob.code()))#Print threshold code
ifblob.code()==1:
color='R'
img.draw_string(blob.x(),blob.y()+10,'R')
elifblob.code()==2:
color='G'
img.draw_string(blob.x(),blob.y()+10,'G')
elifblob.code()==4:
color='B'
img.draw_string(blob.x(),blob.y()+10,'B')

img.draw_cross(blob.cx(),blob.cy())#Draw cross
img.draw_rectangle(blob.rect())#Draw a box
lcd.display(img)#lcd display
print('Centercoordinates£º',bx,by)
print('Colorcoordinates£º',blob.cx(),blob.cy())

#Color coordinate conversion (the upper left corner of the image is the origin of the coordinate)
y=0+(blob.cy()-by+cy)
x=210+(bx-blob.cx()+cx)
print('Relativecoordinates£º',x,y)

#Send instructions to the robotic arm
output_str="x%dy%d\n"%(x,y)
print('Outputcoordinates£º'+output_str)
uart.write(output_str)#Move the suction cup directly above the color blocks
mirobot_wait_finish()#Wait for the movement to complete
uart.write('Z'+str(high_z)+'\n')#Decrease the height of the suction cup
uart.write("M3S1000"+'\n')#Turn on the air pump
mirobot_wait_finish()#Wait for the movement to complete
uart.write("Z120\n")#Increase the height of the suction cup
mirobot_wait_finish()#Wait for the movement to complete
ifcolor=='R':#Move the suction cup to the storage area
uart.write("X70Y-150\n")
elifcolor=='B':
uart.write("X210Y-150\n")
elifcolor=='G':
uart.write("X140Y-150\n")
mirobot_wait_finish()#Wait for the movement to complete
uart.write("M3S0\n")#Turn off the air pump
break
The color threshold modification method can refer to the following materials:
https://book.openmv.cc/image/blob.html
https://singtown.com/learn/49993/


                                                                 Official Wechat Account











Arduino-Mirobot Library
User Manual
(Technical Development Document)




Document Version: V1.102
Release Date: 2021/11/18

All rights reserved  Beijing Tsinew Technologies Co., Ltd 2021.
Without the written permission of the Company, no unit or individual is allowed to extract or reproduce the contents of this document in part or in whole and shall not be transmitted in any form.
Disclaimer
Within the scope of the law allow maximum, this manual describes products (including its hardware, software, firmware, etc.) are provided "according to the status quo", a possible flaw, error or malfunction, frequently bull shark tank does not provide any express or implied warranty, also does not use this manual or use the company's products lead to any special, incidental or indirect damages to compensate. Before using the product, read the user manual and relevant technical documents published online and understand the relevant information. Ensure that you fully understand the knowledge of the product under the premise of using the product.
It is the responsibility of the user of this product to ensure compliance with the applicable laws and regulations of the relevant country and to ensure that there is no significant danger in the use of Beijing Tsinew Technologies robotic arm. 
Revision Notes

Beijing Tsinew Technologies Co., Ltd
Address: Room 1603, Zhongguancun Energy and Safety Science park, Building 3, No. 16, East Qinghua Road, Haidian District, Beijing

Website: www.wlkata.com 

MUST-READ
To implement the functions described in this manual, upgrade the extender box firmware to 20210908 or later, and upgrade the robotic arm firmware to 20210825 or later. The required firmware can be downloaded from the Wlkata website at http://cn.wlkata.com/cn_downloads_wlkata.php 
Put the downloaded extender box firmware C-20210908.bin into the folder as shown in the following figure.

For details about the extender box firmware upgrade, please refer to Appendix 1: Multifunctional Extender Box
For details about the robotic arm firmware upgrade, please refer to Appendix 2£ºMirobot Firmware Update Tutorial


1. Mirobot Library Overview
Through the Mirobot library, you can use Arduino to communicate with the Mirobot robotic arm and control the arm and related accessories. The Arduino communicates with the multifunctional extender box of the robotic arm through serial port, and sends the control instructions to the robotic arm extender box in the form of G codes, which then forwards the instructions to the Mirobot arm.
Arduino's serial port is used to communicate with a computer or other device, and all Arduino boards have at least one serial port (also called UART or USART), and some have several.

When using this library, note that on Uno, Nano, Mini, and Mega, pins 0 and 1 are used to communicate with computers. Connecting anything to these pins can interfere with that communication, such as failure to upload to the board.
For information about Arduino serial communication, please refer to:
https://www.arduino.cc/reference/en/language/functions/communication/serial/
For information about serial communication settings and related materials of Mirobot multifunctional extender box, please refer to:
¡°Multifunctional Extender Box User Manual¡±

2. Mirobot Library
2.1 Call Library
#include <Mirobot.h>		//Include hearder file
2.2 Creating a Serial Port Object
UART_Mirobot myrobot;
2.3 UART_Mirobot Class Function
2.3.1 Initialization - serialInit()
2.3.2 Set to enable serial port monitoring - setSerialMonitoring()
2.3.3 Set the timeout waiting time - setCmdTimeout ()
2.3.4 Robotic Arm Home - homing()
2.3.5 Initial Position- zero()
2.3.6 Set Robotic Arm Max Movement Speed- setMoveSpeed()
2.3.7 Set Height for JUMP Motion- setJumpPara()
2.3.8 Pause Wait- timedPause()
2.3.9 Joint Mode- moveJoints()
2.3.10 COORD Mode - movePose()
2.3.11Circular Interpolation Operation- moveArc()
2.3.12 Gripper Status - gripper()
2.3.13 Three-Finger Soft Gripper- softGripper()
2.3.14 Pump Status- pump()
2.3.15 pwm Output- pwmWrite()
2.3.16 Conveyor Belt Motion Control - moveConveyor()
2.3.17 Sliding Rail Motion Control - moveRail()
2.3.18 Obtain Robotic Arm State - getStatus()
2.3.19 Executing Offline Files - runFile()
2.3.20´®¿Ú·¢ËÍÊý¾Ý- sendMsg()

2.4 Creating an RS485 Object
RS485_Mirobot myrobot;
2.5 RS485_Mirobot Class Function
2.5.1 UART_Mirobot Class Function Inheritance

2.5.2 Initialization- rs485Init()


2.6 Mirobot Library Constant


3. Wlkata_Shield Library
3.1 Call Library
#include " Wlkata_Mega_Sensor_Shield.h"		//include header file
3.2 Library Function
3.2.1 Initialization - shieldInit()
3.2.2 Set Onboard RGB- shieldRgb()
3.2.3 Set Onboard Buzzer - shieldBuzzer()
3.2.4 Buzzer Alarm - buzzerAlarm()
3.2.5 Obtain Key Value - shiledKeyValue ()
2.6Wlkata_Shield Library Constant


Appendix 1: Multifunctional Extender Box Firmware Update
Extender Box Firmware Update Instruction:
¢ÙConnect the multifunctional extender box and start it;
¢ÚOpen the host computer and connect the serial port;
¢ÛClick Settings, select Controller, and click the Start button;



Appendix 2£ºMirobot Firmware Update
WlkataStudio Firmware Update Instruction
Using the host computer to update the firmware can retain the customized Settings of the robotic arm parameters
Step 1: Put the robotic arm firmware files into the "hexfile" folder in the software root directory, and delete the firmware files of other versions;

Step 2: Turn on the power supply of the robotic arm and connect the computer with USB cable;
Step 3: Open WlkataStudio to check the connection status and the current firmware version of the robotic arm (if this information does not appear, please press the reset button of the robotic arm base again);


Step 4: Click "Settings" in the lower left corner and select "Update firmware" in the pop-up window.

Step 5: In the pop-up XLoader window, click the "Upload" button;

Step 6: When the information in the red box appears, the firmware upload is complete, close this window;


Step 7: Click the "OK" button in the Settings window to finish


XLoader¸üÐÂ¹Ì¼þ½Ì³Ì
»úÐµ±Û¹Ì¼þËð»Ù»òÈí¼þÎÞ·¨Ê¶±ð»úÐµ±ÛÊ±£¬ÇëÊ¹ÓÃXLoaderÖ±½Ó¸üÐÂ¹Ì¼þ£»
µÚ1²½£º´ò¿ª»úÐµ±ÛµçÔ´£¬Ê¹ÓÃUSBÏßÁ¬½ÓµçÄÔ£¨ÌáÇ°¹Ø±ÕWlkataStudio£¬·ñÔò»áÊ§°Ü£©
µÚ2²½£º´ò¿ªÏÂÔØ³ÌÐòXLoader£¬ÈçÍ¼1
µÚ3²½£ºÔÚHex fileÖÐÑ¡ÔñÒªÏÂÔØµÄhexÎÄ¼þ
µÚ4²½£ºÔÚDeviceÖÐÑ¡ÔñMega(ATMEGA2560)
µÚ5²½£ºÔÚCOM portÖÐÑ¡ÔñÏàÓ¦¶Ë¿ÚºÅ£¨Ò»°ãÖ»ÓÐÒ»¸öÑ¡Ïî£©
µÚ6²½£ºµã»÷Upload£¬¿ªÊ¼¸üÐÂ¹Ì¼þ£¬ÏÂÔØ³É¹¦ºó×óÏÂ½ÇÓÐÌáÊ¾£¬ÈçÍ¼2




                                                                 Official WeChat Account

Fault phenomenon: What about the tutorial on this part of ros ?
Cause analysis: No ROS information found
Solution: Send the ros tutorial link https://github.com/wlkata/RosForMirobot-master

Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: Because it is a crowdfunded robotic arm, there are a lot of problems.
Solution: Problem 1: The gear of one axis of the robot arm is loose; Problem 2: The 5th axis of the robot arm may be used improperly, causing the reset signal not to be detected; Problem 3: The reset signal cannot be detected to the 4th axis

Fault phenomenon: Is there a list or instructions in the AI visual packaging? Are they paper?
Cause analysis: Missing list
Solution: Send a simple instruction manual to the customer

Fault phenomenon: The document content is different from the current one https://lin-nice.github.io/mirobot_gitbook/14-wlkata.html
Cause analysis: Documentation missing updates
Solution: Send the latest documents to the customer. Controller, slide rail, conveyor belt documentation

Fault phenomenon: The customer's robotic arm gripper cannot work properly
Cause analysis: The old version of the servo clamp is not easy to use
Solution: After inspection, the clamp was burned. Replace new clamps for customers

Fault phenomenon: urdf model with integrated arm
Solution: We currently do not have this

Fault phenomenon: When the USB port of the other robot arm is unplugged , the USB port is damaged.
Cause analysis: Robot arm malfunctions
Solution: Let the customer return it and repair it before issuing a new one.

Fault phenomenon : The screws provided in the slide rail kit are not used in calligraphy.
Cause analysis: Customer documents were not read carefully.
Solution: Inform the matching screws in the calligraphy accessories box

Fault phenomenon: An error occurs when downloading arduino
Solution: There is a problem with the installation, reinstall it.

Fault phenomenon: Error in downloading using the host computer
Cause analysis: Not familiar with the operation
Solution: Check the cause of the problem step by step, and then inform you that the wrong COM port was selected.

Fault phenomenon: The customer points out that there is a problem with the document during use.       
Solution: Thank you customer for pointing out the problem, we will improve it immediately

Fault phenomenon: How to use slide rails and transmission belts at the same time in a project?
Cause analysis: We have not implemented this function yet
Solution: This function is not available yet

Fault phenomenon: The AGV car cannot use the robotic arm on the car normally
Cause analysis: According to the video provided, the robot arm program is incorrect.
Solution: Re-burn the program, you need to use external software to burn it

Fault phenomenon: Conveyor belt cannot be used normally
Cause analysis: Customers are not familiar with using
Solution: With videos provided by customers, we can infer customer usage errors and issue user manuals to customers.

Fault phenomenon: Q: What does the palindrome "Info, E107, Not idle" mean when the robot arm is reset?
Solution: Send common fault codes and analysis to customers

Fault phenomenon: The openmv operation is incorrect, so that it shows that openmv is always unable to connect.
Cause analysis: Did not read the documentation carefully
Solution: Looking at the videos and pictures sent by the customer, it may be that the customer turned on the host computer and the serial port was robbed.

Fault phenomenon: Customer conveyor belt will not operate
Solution: Record operation videos for customers. Waiting for follow-up feedback

Fault phenomenon: Is there any way to replace the conveyor belt motor with a 57-step one?
Solution: It is recommended that the customer use a 42 stepper motor with a smaller reduction ratio.
                                

Fault phenomenon: The sub-control board is stuck when upgrading the firmware.
Solution: After the recurrence, I first used external software to clean the sub-control board program, and then re-brushed the sub-control board program through the host computer.

Fault phenomenon: How to modify the baud rate of the robot controller (rs485)
Solution: Send the multi-function controller manual and take screenshots to inform you of the required content.             

Fault phenomenon: Are the (AGV) vehicles and arms equipped with sensors to obtain current angle or end position information?
Solution: Through the Arduino serial port, send the character question mark to obtain the current location information of the car.

Fault phenomenon: The packaging of the box is defective, which makes people think that the shipment is less.
Solution: Explain the reason to the customer

Fault phenomenon: The robotic arm is stuck in one position
Solution: In the first case, the robotic arm crashes and you need to restart the robotic arm. In the second case, the robotic arm body may be stuck for some reason, resulting in failure to reset normally.

Fault phenomenon: An error code appears on the sub-control board and the customer does not know what it means.
Solution: Send common fault codes and analysis to customers

Fault phenomenon: The robot arm does not return to its original position after reset.       
Cause analysis: It may be that it is not calibrated properly.
Solution: After investigation, it was found that the robot arm calibration failed. Send robotic arm calibration video to customer

Fault phenomenon: The two-axis reset switch of the robot arm is damaged
Cause analysis: It may be the reset switch
Solution: Return or exchange
                                

Fault phenomenon: The teach pendant and Bluetooth cannot connect properly.          
Cause analysis: It may be due to improper operation
Solution: Take a video of the teach pendant and Bluetooth connection for the customer. After troubleshooting the customer¡¯s operating errors
                                
Fault phenomenon: python sdk cannot obtain the multi-angle value of the robotic arm
Cause analysis: python sdk may have bugs
Solution: Try and reproduce, find the cause, and leave it to Ah Kai to solve it

Fault phenomenon: The python installation environment and the robot arm connection method are wrong.
Cause analysis : It may be that the environment is not set up correctly.
Solution: pip install wlkata - mirobot -python==0.1.6 tells the path, and then tells the connection method to the robot arm

Fault phenomenon: Artificial intelligence production line, incorrect installation and operation methods
Cause analysis: There may be no detailed viewing instructions¡¤
Solution: Tell us the steps and point out the problem

Fault phenomenon: The gripper of the robot arm is damaged
Cause analysis: The previous version of the servo clamp was easily damaged
Solution: Replace with a new generation of steering gear gripper

Fault phenomenon: Robot arm calibration is not in place
Cause analysis: May not be familiar with robotic arms
Solution: Send the robot arm calibration video to the customer and control the operation of Sunflower

Fault phenomenon: The four-axis gear of the robot arm falls off
Cause analysis: The top screw is loose
Solution: Teach the customer how to repair the robotic arm gear, and calibrate the robotic arm after repair.

Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: After investigation, it may be a motherboard problem
Solution: Return, repair

Fault phenomenon: Robotic arm and conveyor belt are controlled separately
Cause analysis: Give the customer a suggestion based on the questions raised by the customer (but this is not recommended)

Solution: Provide a solution: Using a stepper motor driver, the conveyor belt speed is slow. Provide a solution to replace the motor.

Fault phenomenon: One axis of the robotic arm is stuck
Cause analysis: It may be that the limit is exceeded.
Solution: Solution: Send $20=0/$21=0 to the host computer, then send m50 to unlock each axis, and turn in the opposite direction where the robot arm line is stuck.     

Fault phenomenon: The control direction of the Mai Lun trolley mobile app is wrong, resulting in the wrong running position of the trolley when controlled.
Cause analysis: Looking at the video sent by the customer, the app version is an old version.
Solution: Send new version of app video to customers

Fault phenomenon: The customer needs the arduino code of the wheat wheel car
Cause analysis: It may be secondary development
Solution: Send the Mai Lun Car Love information package to the customer

Fault phenomenon: Want to change the robot arm parameters           
Cause analysis: Don¡¯t know the parameter list
Solution: Send G code manual to customer
                                

Fault phenomenon: Can I use Matlab to communicate with an actual WLKATA mirobot .        
Cause analysis: Not familiar with ros
Solution: Dongxu helps to solve the problem
                                

Fault phenomenon: Can I use Matlab to communicate with the actual WLKATA mirobot .
Solution : Not currently possible
                                

Fault phenomenon: The robot arm port cannot be recognized
Cause analysis: 1; it may be that the driver is not installed
2; The serial port is occupied
3; The robot arm firmware is relatively early, and the new version of the host computer cannot recognize it.
Solution: The firmware of the robot arm is relatively early, causing the new version of the host computer to not be recognized.

Fault phenomenon: The gcode file is imported into the multi-function controller and the customer will not use it, causing the operation to fail.
Cause analysis: 1; Maybe the USB cable is plugged into the robotic arm
2; It may be a gcode writing error
Solution: 1: If you suspect that the customer¡¯s gcode is written incorrectly, ask the customer to send it over for checking. Two: Record a short video for the customer, how to import gcode , and how to use the multi-function controller

Fault phenomenon: The customer received something last year and was preparing to install it this year, but found that something was missing.
Solution: It took so long that I can¡¯t tell whether it was missing when we shipped it or the customer lost it after receiving it.

Fault phenomenon: pythonsSDK cannot obtain the multi-angle values of the robotic arm.
Cause analysis: more customer feedback, reproduce the problem, and find the cause of the problem
Solution: Find the cause of the problem, hand it over to Akai, solve the bug, and hand it over to the customer after testing without any problems.

Fault phenomenon: Build your own environment and fail
Cause analysis: The customer encountered difficulties in the installation by himself. It is recommended to record a video tutorial.
Solution: Send the environment where Dongxu built it, and then give guidance.

Fault phenomenon: IOA is not a full English version, making it difficult for customers to use it.
Cause analysis : The left subscript is imperfect
Solution: Communicate with customers to solve problems

Fault phenomenon: To interrogate the Mirobot's CAD data, the customer needs to add requirements for the robot in their simulation software CoppeliaSim (formerly V-REP).
Cause analysis: We have so many versions, and they haven¡¯t been updated for a long time, so customers can¡¯t guess which one it is.
Solution: Send the (V-REP) path to the customer from Glthub .

Fault phenomenon: The usb is directly connected to the host computer and information can be displayed. The usb is connected to the host computer through the sub-control board and the information cannot be displayed.
Cause analysis: It may be that the host computer version is too old or the firmware is too low.
Solution: Send the latest host computer to the customer

Fault phenomenon: ROS problem: " demo of py controlling moveit movement"
Cause analysis: No detailed case found
Solution: Send the py- controlled program to the customer

Fault phenomenon: Want the underlying code of the robot arm
Cause analysis: Maybe I want to do secondary development
Solution: Inform the robot that the underlying source code is not open source

Fault phenomenon: Question: When the robotic arm controls the physical robotic arm on the ros side, does it perform motion planning through the serial port communication through moveit , and then goes to the control end of the physical robotic arm to control the movement of the physical robotic arm?
Cause analysis: Students don¡¯t know much about ROS, and the information here is not complete.
Solution: Answer: Mainly there is data forwarded by a node. You can look at the mirobot_writ_node node.
                                

Fault phenomenon: There is a phenomenon in both teaching and gcode . It is OK to press step step by step in teaching, but the whole run is not normal. Gcode is not working at all, but it is OK to enter the command line line by line.
Cause analysis : There is a bug in the firmware that causes this problem.
Solution: Send the latest robot arm firmware to the customer. (There was a bug in the previous firmware, and the new version of the firmware has solved this problem)

Fault phenomenon: I have WLKATA's Mirobot robot arm. I wish to connect it to an Allen-Bradley PLC company. I'm using the Connectivity Components Workbench and trying to communicate with Modbus RS485. According to your multifunction expander box user manual, I think I should send @01o11test from my master (PLC) to the slave (Mirobot). The part I'm struggling with is trying to figure out how to send the string 01o11 test to the robotic arm. If you have any resources providing further information or anything similar that can help we would be very grateful
Cause analysis: Currently we have not implemented this
Solution: Inform customers that we are developing

Fault phenomenon: Using python SDK keeps reporting errors and the serial port cannot be found.
                                
Cause analysis: After investigation, it was determined that it was a problem with the robotic arm firmware. The python SDK only supports versions before 20110929 and does not support this year¡¯s new ones.
Solution: Send the customer the robot arm firmware version before 20110929, and it can be used normally.

Fault phenomenon: An error occurs in the code when testing the AI vision suite
                                
Cause analysis: It may be caused by improper operation
Solution: Check the serial port and code to see if the code has been changed

Fault phenomenon: The sub-control board and robotic arm cannot be used normally.
                                
Cause analysis: It may be that the firmware is relatively old and cannot be detected by a new host computer.
Solution: Update the sub-control board program and robot arm program, and send the latest host computer
                                

Fault phenomenon: The robot arm servo clamp is damaged
Cause analysis : I got the steering gear from the old batch before
Solution: Reissue a new servo gripper

Fault phenomenon: The slide rail cannot move normally
                                
Cause analysis: After step-by-step investigation, it was found that the parameters were wrong.
Solution: Re-update the firmware and check whether the parameters are correct

Fault phenomenon: If multiple open-tower robots are linked together, what method of control should be used? In addition, if other development boards are used to control production line operations, can multiple robots be linked together through serial communication?
Cause analysis: Want to control multiple robotic arms
Solution: Inform that the linkage of multiple robot arms can be achieved through mega2560 and expansion boards, and serial communication can only be achieved one-to-one. Multiple linkages of robotic arms cannot be achieved

Fault phenomenon: Teach pendant cannot be turned off
Cause analysis: It may be malfunctioning
Solution: Tell the customer to operate step by step, and the teach pendant responds slowly.

Fault phenomenon: During the upgrade process of the robotic arm, the wrong port was selected. After re-upgrading the firmware, only one axis of the robotic arm can move, and the other axes cannot move.
Cause analysis: It may be that the robotic arm got stuck after the upgrade.
Solution: Restart the robotic arm and the host computer and you can start moving.

Fault phenomenon: How to connect IOA with the robotic arm to initially realize virtual and real collection.
Cause analysis: No detailed information or cases
Solution: Give a simple explanation and send IOA information

Fault phenomenon: Click reset on the host computer, and the robot arm does not respond. It will be fine if you use the older version of the host computer.
Cause analysis : It may be that the new version of the host computer has a bug
Solution: First suggest him to use the old version of the host computer i and send the robot arm calibration manual

Fault phenomenon: When using arduino software to control two robotic arms in RS485 mode, an error occurs. What is the reason?
Cause analysis: Not familiar with the operation of arduino
Solution: The model of the development board was selected incorrectly. The uno board was selected. The 2560 should be selected.

Fault phenomenon: After the program is downloaded, how to make the two robotic arms move?
Cause analysis: The controller has not been changed to rs485 mode, the baud rate setting is different from the program, and the address has not been changed.
Solution: Change the controller to rs485 mode, set the baud rate the same as the program, and change the address to 01, 02

Fault phenomenon: The robot arm cannot be reset normally, and the firmware update fails even if it is re-updated.
Solution: Return, return for repair and check the reason

Fault phenomenon: The 1st generation robot arm cannot move after updating the 2nd generation firmware
Cause analysis: There is no distinction between firmware on foreign official websites, first generation and second generation, causing customers to upgrade the second generation firmware as the first generation firmware.
Solution: Send the first generation robot arm firmware to the customer

Fault phenomenon: After downloading the rs485 program to Arduino and connecting the two robotic arms, the robotic arm does not move.
Cause analysis: It may be that the controller configuration is incorrectly written. causing communication interruption
Solution: Check the cause. It is found that there is a problem with the baud rate. Just change the baud rate.

Fault phenomenon: The teach pendant cannot be turned off.
Cause analysis: The teach pendant is faulty
Solution: Forced shutdown doesn't work either. I can only explain to the customer first that the problem is with his operation and ask him to operate more slowly.

Fault phenomenon: I want ROS data package and example program
Cause analysis : May be considered open source
Solution: Inform customers that this aspect is not open source and requires additional purchase of information.

Fault phenomenon: Training installation
Solution: Video training, explanations, Q&A

Fault phenomenon: 1. The host computer cannot control the robotic arm and cannot move (Ubuntu)
2. python sdkl cannot recognize the latest firmware
Cause analysis: It may be due to improper user operation
Solution: It was detected that the communication data content of the robot arm was changed, resulting in the latest firmware SDK not being detected.

Fault phenomenon: nan

Fault phenomenon: The noise generated by the robot arm current is very loud
Cause analysis: It may be that the current is adjusted too high
Solution: Communicate with the customer and adjust the robot arm current

Fault phenomenon: The firmware of the new version of the host computer used by the host computer is an old version of the firmware, resulting in the host computer not being able to recognize it.
Cause analysis: The firmware is too old and the host computer version is too new.
Solution: Let customers update firmware

Fault phenomenon: I am planning to design and build a robotic arm production line. The plan is to control two to three robotic arms and simply use wooden blocks to act as the assembly and sorting process of the production line.
Solution: Send our production line information package to the customer for his reference.

Fault phenomenon: The host computer cannot control the robotic arm
Solution: I had a video with the customer and found that the customer had inserted the air pump in the wrong position.
Fault phenomenon: Product missing¡¤Experimental instructions
Cause analysis : Because it is a customized product, the information is incomplete.
Solution: Compile a copy of the previous information

Fault phenomenon: IOA Py -Tech information on this. The examples given in the videos about Py -teach are very simple and don't use too many things. The following examples are quite complicated. Other variables and functions used are not mentioned, so users can only watch Understand a little
Cause analysis: Too little information and examples
Solution: Suggest adding some examples

Fault phenomenon: The software suddenly cannot be logged in.
Cause analysis: caused by ioa software upgrade
Solution: It will be fine after a while

Fault phenomenon: The production line was put away for too long, so it took a long time to find the data equipment.
Cause analysis: Leaving it for too long
Solution: Remote installation and debugging

Fault phenomenon: The sixth axis of the robot arm does not have a reset function, causing the customer's data to be inaccurate every time.
Cause analysis: No reset added for six axes

Fault phenomenon: The robot arm exceeds the limit, causing an error to be reported.
Cause analysis: Found after investigation; soft limit error reported
Solution: Send the fault code manual to the customer and inform the customer of the reason

Fault phenomenon: The light on the sheet metal base suddenly stopped working, and the car assembly line couldn't move either.
Cause analysis: After investigation, it was found that the customer accidentally pressed the emergency stop button while using it, and the equipment was in a stopped state.
Solution: Ask the customer to reset the emergency stop button

Fault phenomenon: Shaanxi University of Science and Technology¡¯s artificial intelligence dynamic garbage sorting technology supports the problem. We are not equipped with a network card, which leads to changes in the environment.
Cause analysis: causes the environment to change
Solution: It is recommended to add a network card

Fault phenomenon: Use the host computer to control the mechanical gripper, but the gripper does not move. No reaction
Cause analysis: 1. It may be that the clamping jaw is burned out
2. It is suspected that the servo cable is connected to the wrong position
3. Or the customer doesn¡¯t know how to use it.
Solution: I am requesting a video from a customer. Let customers check step by step

Fault phenomenon: Virtual control of multiple robotic arms
Cause analysis: The IOA data is too messy and cannot be found.
Solution: Need to be added later

Fault phenomenon: How to connect the controller and the robot arm via UART
Cause analysis: The first generation robot arm is connected to the controller, but the firmware does not support it.
Solution: Let customers update firmware and change parameters

Fault phenomenon: ROS 1 controls Mirobot, so ROS Noetic is installed on Ubuntu. Are there any instructions on how to set up important nodes to communicate with Mirobot
Solution: Send ros information to customers

Fault phenomenon: 1. Bluetooth connection between computer and controller
2. Bluetooth connection between mobile phone and controller
3. Wifi and controller connection

Fault phenomenon : The two axes of the robot arm cannot be reset
Cause analysis: It is suspected that the reset switch is damaged
Solution: 1. Let the customer take photos of the two-axis reset switch
2. Let the robot arm principle reset switch, and send $HH in the command control to see the status of the robot arm.

Fault phenomenon: cannot be applied normally
Cause analysis: After inspection, it was found that there was a problem with the version of the host computer.
Solution: Send a new version to the host computer

Fault phenomenon: 1. The robotic arm cannot be reset normally
2. How to use IO trigger
3. How to use the color sensor

Fault phenomenon: The four-axis shaking of the robotic arm
Cause analysis: It may be that the four-axis jack screw is loose.

Fault phenomenon: The customer does not know how to use the mirbot library and wants to use ros - cpp
Solution: Send mirbot library

Fault phenomenon: German ROS, ROS2 wants to call the ROS1 database, but it is not supported (processed)
Solution: Inform the customer that this cannot be called

Fault phenomenon: conveyor belt problem, conveyor belt color difference, scratches,
Solution: Three options are given. Option 1: Wait for the next purchase to replace it; Option 2: This can be used normally and the product will be given to the customer next time.
Some discounts; Option 3: Replace the conveyor belt directly to the customer (waiting for the final plan results from the customer)

Fault phenomenon: Germany, the air pump and clamping jaws are damaged, and the warranty period has expired
Solution : Let customers spend money to buy.

Fault phenomenon: Siemens 1200. None at the moment
Solution: There is no such thing yet

Fault phenomenon: Using the robot arm host computer to report an error, temporarily waiting for customer feedback, photo
Cause analysis: It may be that the robotic arm exceeds the limit during use.
Solution: Waiting for customer feedback photos

Fault phenomenon: I want to customize IDC cable, and I want to customize 1.5 meters.
Solution: Inform that the technology is not feasible, the cable length is too long, and the equipment is unstable.

Fault phenomenon: Fix y and z, and only change the movement of the robot arm in the x direction. When x increases (stretches forward),
The robotic arm will lift upward to increase z
Cause analysis: 1. There may be another problem with the PC version
2. Robotic arm firmware version problem
3. Determine the version of the robotic arm
Solution: Waiting for customer feedback photos

Fault phenomenon: The arm connection problem is described as follows: after installing the CH340 USB driver on Win10. COM3 was successfully connected through WLKATA Studio V2.0.3, but WLKATA Not connected
An error will be displayed, no device is available and the connected device cannot be used normally.
Cause analysis: It is suspected that the firmware version of the robot arm is too low.
Solution: Ask the customer to update the robot arm firmware
Fault phenomenon: Five-axis sensor failure
Solution: Contacting customer for order

Fault phenomenon: There is an error in wifi communication
Cause analysis : Maybe they changed the program.
Solution: The cause is being investigated

Fault phenomenon: An error occurs when the robot arm is connected to the host computer.
Cause analysis: The firmware of the robot arm is too low, causing the host computer to not recognize it.
Solution: Let customers update the new version of the host computer

Fault phenomenon: Asking the robot arm DH parameters
Solution: Send DH parameters to customers

Fault phenomenon: I don¡¯t know how to import the robotic arm into v-rep
Solution: Make a documentation tutorial and send a link

Fault phenomenon: The car stops in an incorrect position every time
Cause analysis: Sensor sensitivity is too low
Solution: Adjust the sensitivity of the sensor

Fault phenomenon: The first-generation robotic arm wants to use our second-generation controller
Solution: Inform the customer that it can be used, but the robot arm and firmware cannot be upgraded.

Fault phenomenon: nan
Cause analysis: Debugging installation

Fault phenomenon: The four axes of the robotic arm cannot be reset, even after calibration, the five axes do not move, and the gripper is broken.
Solution: Return to factory for repair

Fault phenomenon: When installing the mac version, the host computer reports an error and the teach pendant cannot be used.
Cause analysis : It may be that the customer installed it incorrectly and was blocked.
Solution: Resend the mac version of the host computer and the teaching pendant manual to the customer.

Fault phenomenon: The robot arm does not respond when reset; what does moiton_mode:1 mean?
Cause analysis: The robot arm exceeds the limit
Solution: Tell the customer how to solve the problem of the robot arm exceeding the limit, and explain that moiton_mode: 1 means that the robot arm is in angle mode

Fault phenomenon: When the customer uses the sensor kit provided with the conveyor belt, there is no response.
Cause analysis: It is suspected that the firmware version is too low and the customer is using it incorrectly.
Solution: Let the customer upgrade the firmware of the robot arm controller, and then let the customer read the documentation and operate it.

Fault phenomenon: The customer is using the host computer teaching mode to modify the robot arm speed, but there is no translation.
Cause analysis: When in doubt, the customer's operation method is wrong.
Solution: Send the g code list to the customer for reference. How to modify the speed. Tells how to modify the speed in teaching mode.

Fault phenomenon: The gripper of the servo clamp is damaged.
Solution: Replace for customer

Fault phenomenon: The teach pendant cannot be turned off
Solution: Let customers force shutdown

Fault phenomenon: Keyboard damaged
Solution: Reissue

Fault phenomenon: When installing the Windows version of the host computer, an error is reported and the language cannot be switched.
Cause analysis: 1: Caused by own computer reasons
2: Decompression error when decompressing the host computer
Solution: Remotely control the computer to help customers solve the problem of being unable to switch languages.

Fault phenomenon: Customer needs modbus command list
Solution: Send modbus command list to customer

Fault phenomenon: Click ON, then OFF and watch the clip open or close
- After a few times (usually from 1 to 5) the clamp does not move at all. No matter I press ON or OFF, the interface continues to display sending and the clamping jaw does not move.
Cause analysis: 1. The connection method between the gripper and the multi-function controller is incorrect:
2. There is a problem with the host computer and it needs to be reinstalled;
3. The firmware versions of the robotic arm and host computer are too old;

Solution: 1. Send the connection method between the gripper and the controller;
2. Reinstall the host computer software
3. Update the robot arm and controller firmware

Fault phenomenon: The customer wants to use python to control the robotic arm, but does not know how to download and use it
Solution: Send python usage documentation to customers

Fault phenomenon: The host computer and the robotic arm cannot match
Cause analysis: The firmware version is too low
Solution: Send upgrade tutorial

Fault phenomenon: modbus RTU connection problem
Solution: Send him the new version of the multi-function controller documentation
Fault phenomenon: Thinking that both window and Ubuntu need to be installed, the pythonSDK installation package and documentation will not be downloaded to the computer.
Cause analysis: Not familiar with python, a novice
Solution : 1. This is the installation environment for two systems, not one system that needs to install two.
2. Send the pythonSDK installation package to

Fault phenomenon: After startup, the robot moves to the inspection position (the end of area A 1.. A5) and the drive returns to the origin.
Until I send the G code $H7 and the slide moves to the zero position.
Is it possible for the robot to move to the main position via the reference position also for the slide?
If I start the robot or set rest, the robot drive gives the reference position to the main position, but only A1-A5, not A7.

Fault phenomenon: The host computer cannot recognize the robotic arm
Cause analysis: The firmware version is too old
Solution: Robot arm and controller firmware upgrade

Fault phenomenon: The robotic arm cannot be used normally.
Cause analysis: 1. Device connection error
2. Firmware update failed
Solution: 1. Check the device connection
2. Restore the robot arm to factory settings; re-update the firmware

Fault phenomenon: Servo clamp is damaged
Solution: Reissue servo gripper

Fault phenomenon: The installation host computer reports an error code
Cause analysis: When using the new host computer, an error message is reported about the missing DLL patch.
Solution: Download and install the VC++ library

Fault phenomenon: After the customer installs python, the controller cannot be used normally.

Fault phenomenon : 1. Ask for CH340 driver installation instructions under MAC
2. There is no PC installation guide for MAC users in the online manual.
Solution: Download the mac version from the official website and install it on the host computer. If it doesn¡¯t work, download the ch340 driver. Normally, mac comes with CH340.

Fault phenomenon: 1. Not familiar with the host computer or using accessories
2. Will not upgrade firmware
3. The single-finger suction cup is damaged
Solution: 1. Shoot a video of using the air pump
2. Provide detailed information to upgrade the firmware and the connection method for upgrading the firmware.
3. Give a solution: Watering sticks

Fault phenomenon: We purchased your Mirobot last week and I'm trying to use it with ROS. But the instructions are given for Ros Kinetic and we have Ros Noetic. Does it support Ros Noetic?
Or will Mirobot team up with Ros Noetic, since Ros Kinetic is already very old.
Solution: Currently, ros2 is not supported

Fault phenomenon: There is an error in blockly downloading the mac version to the host computer ;

Fault phenomenon: The servo clamp cannot be clamped normally
Solution: Replace the servo clamp

Fault phenomenon: How to connect the robotic arm to IOT
Solution: RS485 to wifi or RS485 Ethernet

Fault phenomenon: I want to measure the distance from point A to point B of the robotic arm. How to achieve this?
Solution: Send G code manual

Fault phenomenon : The controller downloads the program through blockly . After downloading, the program name in the controller loses the first letter.
Solution: Feedback has been given to He Yu

Fault phenomenon: The three-axis motor of the robotic arm is damaged.
Solution: After inspection, return to factory for repair

Fault phenomenon: Installation and debugging
Solution: 1. After pressing Start, the robotic arm cannot move normally.
2. The stepper motor cannot drive the conveyor belt; solved

Fault phenomenon: How to control the robotic arm with python and how to operate it
Solution: Send github link

Fault phenomenon: 1. The robotic arm cannot be recognized
2. The calligraphy production line information package is lost
Solution: 1. The serial port of the robot arm cannot be recognized and the firmware version is too low. Resend the PC software and tell you how to use it.
2. Resend the calligraphy kit

Fault phenomenon: When using pythonSDK again , python reports an error and the serial port cannot be recognized.
Solution: The reason we are looking for may be: This is essentially a problem with the quality of serial port communication. There may be signal interference sources and noise is generated. We will consider doing some fault tolerance later. If an encoding error is received, clear it and resend it.

Fault phenomenon: I recently purchased a vision package.
In the manual,
Device is unavailable after firmware upgrade
However, I upgraded the firmware. (V.3.9.4 -> V.4.3.1 (latest))
what should I do?
Is there any way to downgrade?
Solution : Uninstall and reinstall

Fault phenomenon: The first arm cannot be grasped (using Wlkata Studio), and the arm cannot be found to connect to. I have tried connecting directly and through a small box, and also tested it on two or three computers, but it still cannot be used. I don't know how to use it in operation.
The second arm can be captured and operated using Wlkata Studio, but when using the python program written by myself, when using opencv to open the camera arm to operate the robotic arm, the camera will not be able to open. (I compared the time it took for another robotic arm to operate the same program, so I thought it was a problem with the robotic arm.)
(The program opening process is to connect the robot arm (ok) and use opencv to open the camera (it will get stuck))

Fault phenomenon: Reissue a laser head, an air pump, and a suction cup head.

Fault phenomenon: The robot arm cannot use PythonSDK
Cause analysis: Analysis: It may be that the robot arm is garbled
Solution: For exchange, the new one will be sent to Qingdao and the old one will be sent to Beijing.

Fault phenomenon: The robot arm resets abnormally and cannot reset normally.
Solution: 1. When the power is off, keep the second and third axes away from the limit switch. Then use $h1~$H6 to reset each axis individually.
2. Check the $$ parameters and find that the robotic arm is not calibrated. Calibrate the robotic arm.
Fault phenomenon: The robot arm cannot be controlled through the controller
Solution: Replace the controller

Fault phenomenon: Robot arm DH parameters
Solution: Send G code list

Fault phenomenon: After upgrading the 2022.06.25 firmware, the robot arm reset is reversed.
Cause analysis: Robot arm $53=0, this is the third generation robot arm i firmware, you need to change the parameter $53=2 to become the second generation parameter
Solution: Solution 1: Send $M, then send $53=2 in command control; send $$ in command control, confirm $53=2,
Option 2: Update the old version of firmware

Fault phenomenon: Car image secondary development; transportation
Solution: Send the car information package and car model

Fault phenomenon: During the test, it was discovered that one of the robotic arms could not be compiled using the Python program. Python used the Anaconda environment and the compilation software was Spyder.
The currently faulty arms are two that are stuck and unable to move when compiling python, and one's mechanical axis is stuck when resetting.

Fault phenomenon: The robot arm cannot be reset. Can't find previous information
Solution: Send the data, confirm the status of the robotic arm, and proceed to the next step.

Fault phenomenon: The five-axis robotic arm of the warehouse robot is missing and cannot work properly.

Fault phenomenon: The air pump does not work properly
Solution: Return for repair

Fault phenomenon: Pre-sales project support
Solution: More customer requirements and provide customers with relevant things within the scope

Fault phenomenon: Installation support
Solution: Installation support

Fault phenomenon: Robotic arm calibration problem, firmware upgrade, how to pick up test tubes
Solution: Calibration documentation, firmware upgrade documentation, video demonstration of clamping test tubes

Fault phenomenon: Servo clamp is damaged
Solution: Detect and send the video to determine if the steering gear gripper is damaged and replace the robotic arm.

Fault phenomenon : The robot arm cannot be reset normally
the iIDC cable on the mainboard base of the robot arm fell off, and the forearm motor cable was entangled, causing the 5-axis motor cable to fall off.
Solution: Reissue a robotic arm

Fault phenomenon: How to connect the teach pendant to the controller
Solution: Send the teaching pendant and controller connection video to the customer

Fault phenomenon: Ask about the 3D model of the conveyor belt and modbus related functions
Solution: Send the 3D model of the conveyor belt and the modbus command list

Fault phenomenon: The host computer firmware does not match, and the connection failure will automatically pop up, or the serial port cannot be recognized.
Solution: Send simple version firmware upgrade tutorial, XLouder upgrade tutorial

Fault phenomenon: Missing photoelectric sensor

Fault phenomenon: A Dutch customer ordered an education kit from robotshop and received American standard wire.
Solution: Reissue, European standard line

Fault phenomenon: Combination of automobile simulation and production lines
Solution: 1. Send car simulation manufacturing drawings

Fault phenomenon: The information is not translated into English, it is all in Chinese.
Solution: Reissue information

Fault phenomenon: When the robot arm returns to position, we receive two error codes. A105 and E108 are error codes.
Solution: Send the common fault codes of the robotic arm, and let the customer take the operation video and operation interface

Fault phenomenon : The robot arm resets and the four axes rotate continuously.
Solution: Ask the customer to power off and restart, and send $ hh to watch the movement effect of the robotic arm for further review.

Fault phenomenon: 1. Can the fixture PWM output be used as a simple GPIO?
2. What GCODE command do I need to send to set the output to 0 or 1?
3\How to use the D0 and D1 GPIO outputs of the multi-function expansion box?
Solution: 1. Send the controller manual first and let customers read it themselves.

Fault phenomenon: The teach pendant cannot connect to the robotic arm and cannot control the robotic arm.
Solution: 1. Send the teaching pendant connection video
2. Explain the operating steps of the teaching pendant
Fault phenomenon: Error when installing the host computer
Solution: https://appuals.com/fix-error-0xc00007b-application-was-unable-to-start-correctly/

Fault phenomenon: The controller displays a red light and the robotic arm does not respond.
Solution: Send the multi-function controller manual and the status of the controller display light color

Fault phenomenon: The six axes of the robot arm exceed the limit
Solution: Solution: Unlock m50, $20=0, $21=0. Then move the 6-axis. When it reaches a certain position, open the soft and hard limits $20=1, $21=1

Fault phenomenon: An error occurs when connecting a multi-function controller to 2560
Solution: Suspect the connection method is wrong

Fault phenomenon: When using anaconda's spyder or jupyter to compile, it will get stuck after the reset ok is returned, and the reset instruction is not completed.

Bo:
you execute the same program code in Wlkata studio, you can complete the action.
Solution: 1. Confirm whether pythonSDK is new
2. Is python new?
3. Which version of the robot arm firmware is it?

Fault phenomenon: I am using the robot arm to point the center points of nine circles. Among these nine coordinates, the x-coordinates of each row are parallel, but the y-axis is not parallel.
Solution: Add auxiliary tools to alleviate the problem of repeated positioning accuracy

Fault phenomenon: The host computer software cannot be opened
Cause analysis: The computer is missing a library
Solution: Send library file installation

Fault phenomenon: When opening the PC software, the code keeps jumping
Cause analysis: When the robot arm is connected to the controller, the USB is plugged into the robot arm.
Solution: When USB is directly connected to the robotic arm, do not plug in the controller.

Fault phenomenon: How to use blockly and servo frame for robotic arm
Solution: Send blockl instruction manual and servo gripper writing package

Fault phenomenon: Four axes cannot be reset
Cause analysis: The four-axis cannot be reset, causing the five-axis stand-alone line of the robotic arm to be disconnected.
Solution: Exchange

Fault phenomenon: German students themselves need to program robotic arms + sensors through ardiuno
Solution: Provide libraries and documentation related to robotic arms

Fault phenomenon: The second shaft jack in Germany is loose
Solution : Let the customer tighten it himself

Fault phenomenon: Robotic arm hard limit
Solution: Send fault code

Fault phenomenon: The four-axis rotation of the robotic arm cannot be reset
Solution: The hard limit may be triggered

Fault phenomenon: The five-axis robot arm cannot be reset
Solution: Replace

Fault phenomenon: The robot arm exceeds the hard limit, causing the robot arm to be in an alarm state
Solution: First check whether the robot arm body is damaged and confirm the error status. Solution:

Fault phenomenon: Our school recently purchased 6 Mirobot professional models. We just took them out of the box and set them up. After a few minutes of use, one of the robots developed a problem.
It shows alert lock error 108. I used the commands $20=0 and $21=0 M50 and was able to move some axes. However, the J4 and J5 axes are difficult to move. The J5 axis barely moves at all and sounds like it's grinding or being bound.
When I use $H to home the robot, the J1, J2, J3 axes home normally - J4 rotates but never seems to find home, and J5 doesn't move.

Fault phenomenon: Noise occurs in the robotic arm
Solution: The speed setting is too low, the recommended speed is 2000

Fault phenomenon: After the robotic arm is powered on and the switch is pressed, the power light flashes on and off, indicating poor contact.

Fault phenomenon: The robot arm cannot return to zero
Cause analysis: $150~$156 calibration parameters are reset to zero and the calibration is not saved.
Solution : Recalibrate the robotic arm

Fault phenomenon: Related information about the robot arm for garbage sorting
Solution: Deep learning dynamic garbage sorting production line information package, and documents related to the robotic arm

Fault phenomenon: How to calibrate the robotic arm and calibrate the horizontal bead model
Solution: Send the calibration horizontal bead model, upload it to the official website, and send the calibration video

Fault phenomenon: Technical Support
Solution: Send robot arm related information

Fault phenomenon: There is a problem with the color sensor
Cause analysis: Use error, resulting in incorrect color sensor value
Solution: Send the old version of fruit production line data, set up a separate program for the color sensor, and detect

Fault phenomenon: When using python, the robot arm does not move and python reports an error.
Solution: The usb port connection method is incorrect, causing Python to not recognize the robotic arm.

Fault phenomenon: Multi-function controller does not respond
Cause analysis: 1: During use, the wrong wiring sequence caused the controller to short circuit.


Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: After investigation. The 6-axis motor exceeds the limit, causing the host computer to report an error
Solution: m50 is unlocked, $20=0;$21=0. Then j6 moves the six axes within the motion range

Fault phenomenon: Project data support (video on basic use of robotic arm) and other related materials
Solution : Package and send to teacher

Fault phenomenon: When using the host computer software, use the python column to report an error

USB cable connected to the host computer is damaged
Solution: Need to reissue one

Fault phenomenon: The initial value of a batch of robots after reset was 208,0,250; now the coordinate value after reset is 198,0,230
Solution: The cause is being investigated

Fault phenomenon: None
Cause analysis: None
Solution: technical support, project delivery

Fault phenomenon: None
Cause analysis: None
Solution: Project delivery, technical support

Fault phenomenon: None
Cause analysis: None
Solution: Robotic arm technical support, product scenario delivery

Fault phenomenon: The conveyor belt is stuck, cannot move, and makes abnormal noises.
Solution: Exchange
Fault phenomenon: Problem 1: Every time I use Unity to open a serial port connection, the robot arm will enter the restart state without my control, but this does not happen on another computer.
Problem 2: The robotic arm and software cannot combine virtuality and reality
Cause analysis: Question 1: It may be related to the configuration of the computer.
Question 2: There may be a problem with the robot arm firmware
Solution: Problem 1: Let the customer check the environment and computer
Question 2: Update the robot arm and controller firmware

Fault phenomenon: The Zhongshan project accepted the instruction manual and experimental instructions for the automobile production line, as well as some subsequent information.

Fault phenomenon: When using the robotic arm of a large automobile production line, an error occurs and SDing occurs.
Cause analysis: There may be a bug in the previous firmware
Solution: Update the firmware of the robot arm and controller

Fault phenomenon: nan

Fault phenomenon: The conveyor belt moves abnormally
Cause analysis: To be detected
Solution: Return for repair

Fault phenomenon: Problems related to matlab and verp

Fault phenomenon: Multiple control controllers cannot be upgraded using the host computer
Cause analysis: The computer environment affects the controller, causing the host computer to be unable to upgrade the controller.
Solution: Use flash software to burn the program to the controller (send flash operation video)

Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: The suspicion is that the calibration was not successful.
Solution: 1. Send $H3 to the host computer to see if the three axes of the robotic arm are reset, or $H1~$h5 to see if axes 1~5 can be reset normally.
2. Send $$ and check the return parameters of the robot arm. Let me take a look
3. Take a picture of the three axes of the robotic arm and take a look.

Fault phenomenon: I want to know the coordinate system of each joint of Wlkata to better understand it when using it on Matlab
Solution: Send G code manual

Fault phenomenon: During WLKATA Studio's "homing" command, the robot arm makes a grinding noise and the robot arm appears to vibrate and move slightly downward, as if it is trying to move but something is blocking it. The only way to stop it is to press the reset button.
Solution: Waiting for customer feedback

Fault phenomenon: Online guidance for installation

Fault phenomenon: 1. I am able to create a demo content that runs well in Unity
2. Actually, the cable of the pump is not working well. I also want to buy a spare one. Are there any standards for the cable?
Solution: Send the air pump line and line sequence to the customer

Fault phenomenon: The robot arm cannot be reset
Solution: The 4-axis rotation damaged the 5-axis

Fault phenomenon: An error is reported when the robot arm is reset, A105.
Cause analysis: After investigation, it was found that the top screw of the three-axis arm of the robotic arm was loose, causing the arm to become loose.
Solution: Send a video tutorial on repairing the boom jack screw

Fault phenomenon: When using python to control the robotic arm, it can only move once.
Cause analysis: The python environment needs to be updated, and the robot arm firmware and controller firmware need to be updated.
Solution: Send a new python environment, as well as robot arm upgrade and firmware upgrade tutorials. and firmware.

Fault phenomenon: When the robot arm is reset, the position of the robot arm is sometimes normal and sometimes abnormal.
Solution: Send robot arm and controller firmware, and firmware upgrade video

Fault phenomenon : Are there any experimental instructions written around a certain experiment?
Solution: None at the moment

Fault phenomenon: arduino upload error, I want to purchase some equipment for subsequent improvements
Solution: Re-select the serial port to connect to market procurement needs

Fault phenomenon: An error is reported when the robot arm is running
Cause analysis: The robot arm runs beyond the limit
Solution: Restart, reset, send fault code manual, and solution

Fault phenomenon: Old version of AI vision, no relevant information
Solution: Translate old versions of AI visual documents

Fault phenomenon: An error is reported when the robot arm is reset, A105
Cause analysis: After inspection, the five-axis motor cannot be reset normally.

Fault phenomenon: Conveyor belt deviation requires error range
Solution: Conveyor belt tension causes error (basic size 572, error range plus or minus 5)

Fault phenomenon: Will not having a teach pendant affect the operation of VScode Anaconda?
There is no problem using our wlkata studio without a teaching pendant . I don¡¯t know about using other software.

Fault phenomenon: Host computer and host computer instruction manual
Solution: Send the host computer and the user instructions and manuals of the host computer

Fault phenomenon: The robotic arm of the fruit production line keeps reporting errors during reset.
Solution: After contacting the hard limit, the robot arm can be reset normally.

Fault phenomenon: Write the serial port number into the wlkatamirobot function, and an error will appear after writing it in.
Solution: After the update, the serial ports are automatically updated.

Fault phenomenon: The air pump keeps working and does not stop.

Fault phenomenon: A computer with windows software V 2.03 and robotic arm software version 1.4. We want to know if these are compatible and may need to be updated as we try to run the robotic arm. We received an error message.
Solution: Wait for video

Fault phenomenon: The robot arm reports an error when running on the host computer.
Solution: Upgrade the firmware of the robotic arm and controller

Fault phenomenon: The air pump does not work properly
Solution: Return or exchange

Fault phenomenon: The car model stops moving when it reaches the fourth conveyor belt.
Solution: Refresh the previous program and then it can run normally

Fault phenomenon: The packing posture of the host computer cannot be performed
Solution: The posture of the host computer can easily cause the robot arm to limit its position.

Fault phenomenon: There is deviation in the circle drawn by the robot arm
Solution: Send calibration manual and calibration documents

Fault phenomenon: The customer's vision is not running correctly.
Solution: Send new AI vision software
Fault phenomenon: Error E104 E108 about the robot arm
Solution : Send fault code manual

Fault phenomenon: Siemens Healthineers, customers have questions about the accuracy of the robotic arm and demand for returns
Solution: Return

Fault phenomenon: school teacher, exchange of 6 units, and training

Fault phenomenon: The teacher uses the teaching mode on the host computer and an error occurs.
Cause analysis: It may be that the firmware version is too old
Solution: Run according to the teacher's program and find that no errors are reported. I suspect there is a problem with the operation.

Fault phenomenon: The customer connects the 24v photoelectric sensor and it does not work.
Solution: The voltage type 3.3v supported by the controller cannot drive its sensor.

Fault phenomenon: The customer needs the robotic arm to move and grab objects.

Fault phenomenon: The robot arm cannot be reset normally
Solution: Exchange

Fault phenomenon: The robot arm is faulty and the four axes cannot be reset normally.
Solution: Return for exchange. Reissue IDC cable

Fault phenomenon: 1. The robot arm may be misaligned when transporting the trolley to the conveyor line, resulting in the trolley not being moved from the shelf or hitting the shelf.
2. The position is inaccurate when assembling the car roof.
3. During automatic operation, clicking the stop button cannot stop the current process. Even if the assembly is completed, the next assembly will be carried out.
Solution: Solution: Problem 1: Calibrate the robotic arm and slightly modify the parameters. Question 2: Adjust the sensitivity of the sensor, 3: Delete the stop on the screen

Fault phenomenon: The robot arm cannot be reset and the controller indicator light always turns red.
Solution: Power off and restart, press and hold "ok" on the controller for three to five seconds and then let go.

Fault phenomenon: Changing that parameter can make the conveyor belt return to zero faster
Solution: Inform the parameters of the 7-axis stepper motor.

Fault phenomenon: The usb serial port is often disconnected and needs to be restarted to connect. What is the problem?
Solution: Error: serial.serialutil.SerialException : could not open port 'COM2': PermissionError (13, 'Access is denied.', None, 5)
Problem: The port is occupied and cannot be opened
Possible reasons: The previously running program has not ended, causing COM2 to be occupied.

Fault phenomenon: utf-8' codec can't decode byte
Format transcoding problem, how to solve it
Solution: Update the SDK configuration
pip3 install wlkata - mirobot - python

Fault phenomenon: The conveyor belt does not move
Solution: The conveyor belt motor gear fell off, replace the conveyor belt

Fault phenomenon: The 5-axis robot arm is broken in 2020
Solution: Need to return for repair

Fault phenomenon: An abnormality occurs when the robot arm is reset
Cause analysis: To be checked
Solution: Since the third-party robotshop does not provide customers with information and cannot properly judge and communicate the problem, we are now processing the return or exchange.

Fault phenomenon : Conveyor belt failure in large automobile production line
Cause analysis: Motor gear is loose
Solution: After investigation, the motor gear was loose, resulting in the inability to drive the conveyor belt.

Fault phenomenon: There is a temporary fault, checking is in progress.
Solution: Sister Min agreed to return and exchange, and is processing it.

Fault phenomenon: Unable to reset to zero, need to replace the product
Cause analysis: To be checked
Solution: Professional version robotic arm exchange

Fault phenomenon: The five-axis cannot be reset
Solution: The five-axis motor wire is twisted and must be returned for repair.

Fault phenomenon: I purchased two robotic arms and one of the air pumps did not work.
Cause analysis: After inspection, one of the air pumps may have an internal circuit that is damaged, resulting in a loss of control.
Solution: Reissue a new air pump

Fault phenomenon: The robot arm triggers the hard limit, and python cannot be used normally.
Cause analysis: The robot arm exceeds the movement range and triggers the hard limit. The python environment is not updated
Solution: Contact the hard limit limit of the manipulator. When the manipulator moves to a safe distance, turn on the hard limit protection of the manipulator, and then update the python environment.

Fault phenomenon: Slide rail accessories are missing
Cause analysis: Power cord accessory is missing
Solution: Continue to follow up

Fault phenomenon: Previously damaged, returned for repair and replaced the motor.
Solution : Communicate about conveyor belt installation and overall operation process

Fault phenomenon: After the robot arm has finished flashing the firmware, the reset is not correct. There is a problem with jetson
Solution: Re-flash the robot arm firmware and change the parameters.

Fault phenomenon: One axis of the robotic arm makes abnormal noise and the big arm is loose.
Solution: Return to factory for repair and troubleshooting

Fault phenomenon: Unable to reset, error A105 reported
Cause analysis: Troubleshooting: 1. Connect the robotic arm separately via USB , click reset on the host computer, and record the video of the robotic arm being reset.
2. Send $H1~$H5 in sequence on the host computer command control interface to see the reset action of each axis of the robotic arm.
3. When the power is off, check whether the upper arm and lower arm of the robotic arm are loose.

Fault phenomenon: Abnormal noise in one axis, loose arm
Cause analysis: Axis 1 and 2 are all loose and show signs of falling off. The position of the top screw of axis 2 does not match the production fixed position. It is suspected that there is a possibility of self-disassembly.
Solution: Restore in-situ reinforcement treatment
Fault phenomenon: Robot arm accessories are missing
Cause analysis: Failure to take good care of the robotic arm accessories
Solution: Let customers place new orders to purchase

Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: The clamp is placed at the end, causing the five-axis reset to exceed the Hall switch. As a result, the robot arm cannot recognize the signal
Solution: Power off the robotic arm and manually bend the five-axis to the vertical position.

Fault phenomenon: python SDK cannot be used normally, error utf-8 is reported, and the serial port cannot be recognized
Cause analysis: The PythonSDK environment is expired and the environment needs to be updated again.
Solution: Update to the latest version of SDK and you can use it normally

Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: The robot arm was reset and the four-axis sensor 1 could not be detected, causing the five-axis motor wire to be twisted.
Solution: Replace the forearm assembly

Fault phenomenon: The servo clamp cannot move normally
Cause analysis: Motor burned out
Solution: Reissue the servo clamp

Fault phenomenon: When I created urdf myself , the joint coordinate system ran outside the robot arm.
Solution: Change the frequency of sending source files under src to a smaller frequency, from 20hz to 10hz.

Fault phenomenon: Servo clamp 3D model
Solution: Send the servo clamp model

Fault phenomenon: A101 error occurs in the robot arm
Solution: Enter $20=0 and $21=0 on the host computer interface

Fault phenomenon: After the robot arm is reset, the fourth axis tilts slightly
Solution: Recalibrate the robotic arm

Fault phenomenon: The robot arm's message is encoded in UTF-8 error
Solution: Update python SDK environment

Fault phenomenon: The logistics line accessories tray is damaged
Solution: Reissue

Fault phenomenon : How does the robotic arm download blockly to the controller?
Solution: Send blockly related information and inform customers how to operate it simply

Fault phenomenon: Can I connect three external buttons to control the robotic arm?
Solution: You can use arduino to externally define buttons to control the robotic arm.

Fault phenomenon: Controller black screen
Solution: Use flash to flash the program, but the screen is still black. Reissue the controller.

Fault phenomenon: Servo clamp is damaged
Solution: Reissue the servo clip

Fault phenomenon: The pallet in the logistics line accessory package is damaged
Solution: Reissue pallets in the logistics line, 2 pieces

Fault phenomenon: A105 fault
Solution: The two-axis limit switch is damaged, and the two-axis limit of the boom is damaged.

Fault phenomenon: A105 fault

Fault phenomenon: E107 error report
Solution: Wait for the robot arm to stop before sending a new command

Fault phenomenon: python3.11 will report an error when using the PythonSDK example program
Solution: The current python3.11 environment may not be compatible. It is recommended to use pyhton 3.10

Fault phenomenon: 4 steering gear clamps are damaged
Solution : Reissue 4 servo grippers

Fault phenomenon: Controller black screen
Solution: Reissue a controller

Fault phenomenon: The E4 host computer cannot recognize it, and the motor moves in the wrong direction.
Solution: The E4 firmware version is too low. You need to update the latest E4 firmware. There is an error in the E4 installation manual. The motor connection direction is wrong. The motor connection direction has been changed.

Fault phenomenon: The sheet metal version of the fruit picking production line is missing adapters
Solution: Reissue missing adapters

Fault phenomenon: The robotic arm cannot be reset normally and the air pump does not work.
Solution: The air pump line sequence connection is wrong, and we have been informed of the correction.

Fault phenomenon: The robot arm reports an A101 error, and the host computer keeps playing garbled characters.
Solution: 1. A101 hard limit error, the movement range exceeds the limit
2. When the robot arm is using the controller, the USB cable needs to be connected to the controller, otherwise the ejection will be garbled.


Fault phenomenon: The end of the robot arm keeps rotating during operation
Cause analysis: Customer is not familiar with programming
Solution: Remotely guide customer programming

Fault phenomenon: Conveyor belt is missing power cord
Cause analysis: Customer lost
Solution: Issue a replacement

Fault phenomenon: Conveyor belt accessory model and controller bracket model
Solution: Send conveyor belt accessories model

Fault phenomenon: A case completed using a robotic arm model in V-rep software
Cause analysis: There are too few v-rep related cases
Solution: Send the writing teaching materials in the calligraphy kit and inform experiment 3 that there are some relevant cases

Fault phenomenon: The robot arm automatically resets after powering on.
Cause analysis: The controller has enabled the automatic reset function at power on.
Solution: Just turn off this function in the controller

Fault phenomenon: Unable to reset normally
Solution: Repair

Fault phenomenon: IOA information is incomplete
Solution: Resend

Fault phenomenon: The servo gripper does not work properly
Solution: Reissue servo gripper

Fault phenomenon: How to adjust the robot arm speed
Solution: Send a tutorial on adjusting the speed of the robotic arm

Fault phenomenon: The controller has a black screen and flashing the firmware does not work.
Solution: Replace the controller

Fault phenomenon: The robot arm resets abnormally.
Solution: Return for replacement

Fault phenomenon: Unable to operate normally
Cause analysis: Customer uses 1st generation robotic arm
Solution: Re-flash the firmware and calibrate the robot arm

Fault phenomenon: The servo clamp cannot work properly
Solution: Reissue the servo clip

Fault phenomenon: The servo clamp cannot work properly
Solution: Reissue the servo clip

Fault phenomenon: How to customize the G-code so that, for example, Mirobots additionally switches the gripper to off when transitioning from one letter to another, and to on when off for the next letter
Solution: Inform customers about the use of G codes and send G code manuals

Fault phenomenon: How to let the robot arm and plc pass
Solution: Controller manual. plc related cases sent to customers

Fault phenomenon: I want to output the simulation from the extension box. Can you give me an example of an API command?
Solution : Send the controller manual and tell IO to update the controller firmware

Fault phenomenon: Teach pendant and Bluetooth connection problem
Solution: Send Bluetooth and teach pendant connection video

Fault phenomenon: python vision problem
Solution: Waiting for customer feedback video

Fault phenomenon: Customer asks for the latest version of the host computer
Solution: Send the latest version of the host computer to the customer

Fault phenomenon: The robot arm is connected to the other party's PLC and starts automatically when it is turned on.
Solution: Added a filter capacitor to improve anti-interference ability

Fault phenomenon: Want a model of the robotic arm
Solution: Send to customer

Fault phenomenon: Cannot find the data package for calligraphy experiment simulation
Solution: Resend the calligraphy simulation experiment package

Fault phenomenon: The gear of one axis of the robot arm is loose
Solution: Let the customer send one to him first, and then reissue it to the customer later.

Fault phenomenon: modbus reads the value of pwm
Solution: Wait for Brother Yu to change

Fault phenomenon: There is a problem with the three robotic arms and they must be returned for maintenance.
Cause analysis : Reset exception
Solution: Replace the reset switch

Fault phenomenon: The controller reports an error

Fault phenomenon: The slide rail does not reset normally

Fault phenomenon: Samples have been provided to customers
Solution: The customer said they would get a reply within 2 weeks.

Fault phenomenon: How to install Ch340 and start ubuntu system
Solution: Guide customers to install Ch340 and start the ubuntu system

Fault phenomenon: The 6-axis motor of the robot arm is limited, causing the robot arm to be unable to reset normally.
Solution: The movement of the six-axis motor exceeds the limit. Turn off the power and manually make the six-axis motor vertical to the table.

Fault phenomenon: The customer said it was a transportation problem that caused damage to the robotic arm.
Solution: It is judged that it is man-made damage, and the robotic arm will be replaced (U.S.A.). In order to ensure the official public opinion of the product, the exchange will be based on comprehensive opinions.

Fault phenomenon: The five-axis robot arm is damaged and the three-axis motor gear is damaged.
Cause analysis: I need to exchange the goods. Write a replacement letter and I can send it back next week.

Fault phenomenon: The customer needs the STL file of the slide rail and the step file of the robotic arm.
Solution: Send the STL file of the slide rail and the step file of the robotic arm to the customer

Fault phenomenon: Spanish customer wants to flash firmware for first-generation robotic arm
Solution: Remotely guide customers to flash firmware for a first-generation robotic arm.

Fault phenomenon: The balance cylinder of the robotic arm is damaged, causing the robotic arm to be unable to function normally.
Solution: The United States has replaced the product

Fault phenomenon: The customer said that the sub-control panel is difficult to use and files are triggered as soon as the computer is turned on.
Cause analysis: The customer set up a bear trigger, and the controller firmware version is relatively old, triggering a bug.
Solution: Remotely guide customers to flash controller firmware.

Fault phenomenon: 3 robotic arms cannot be reset normally
Cause analysis: After inspection, the three-axis reset switch of the robot arm is damaged.
Solution: Replace the three-axis reset switch of the robotic arm

Fault phenomenon: The robot arm is unresponsive when executing PythonSDK
Cause analysis: The PythonSDK environment has been updated and needs to be updated again.
Solution: Send https://github.com/mushroom-x/wlkata-mirobot-python to update sdk ,

Fault phenomenon: The robot arm cannot update the firmware
Cause analysis: It is suspected that customers will not update themselves
Solution: Send the robot arm firmware update tutorial and the latest firmware

Fault phenomenon: How to query the controller Bluetooth on the host computer, and the wifi mode is turned off
Solution: Remotely guide customers how to query and close on the host computer

Fault phenomenon: There is interference in the controller, how to solve it
Cause analysis: There are many lines next to the controller and the interference is relatively large.
Solution: Add a filter capacitor and guide customers to install it remotely

Fault phenomenon : When testing the PythonSDK , when serial communication is first established with the robotic arm, sometimes the sent information is invalid and will be lost.
Solution: Let Akai change PythonSDK related issues

Fault phenomenon: The robotic arm cannot be reset normally.
Cause analysis: The second axis cannot detect the reset signal
Solution: It is suspected that there is a problem with the two-axis reset switch.

Fault phenomenon: The robot arm reset direction is wrong.
Cause analysis: After flashing the firmware, the robot arm did not recognize the firmware version, causing the robot arm to move randomly.
Solution: Re-flash the robot arm firmware, then $v, restore the robot arm to factory settings, and then check the parameters $53=2 (second-generation robot arm parameters)

Fault phenomenon: Ask about some parameter settings on the robot arm controller and robot arm related things
Solution: Inform the parameters of the robotic arm and the model of the controller

blockly on the host computer, an error will be reported.
Solution: There is an infinite loop set up on blockly , just remove it.

Fault phenomenon: The controller cannot be used normally
Solution: Replace the controller for the customer

Fault phenomenon: Asking for new version of modbus
Solution: Send the new version of the modbus command to the customer

Fault phenomenon: Customer inquires about production line information package
Solution: Send fruit picking production line information package to customers

Fault phenomenon : The previous conveyor belt cannot start normally when it is started.
Solution: Replace the conveyor belt for the customer

Fault phenomenon: The customer saw that the foreign official website said that the robotic arm supports Scratch and asked if it is supported.
Solution: Currently the robot arm cannot support Scratch

Fault phenomenon: Does the visual kit comply with
"Supports GigEVision and USB3Vision camera protocol standards, and can be connected to other brands of cameras"
Solution: Inform customers that i-gEVision and USB3Vision camera protocol standards are currently not supported.

Fault phenomenon: There are problems with the operation of large automobile production lines
Solution: Following up

Fault phenomenon: There is a problem with the calligraphy writing package and the information is incomplete.
Solution: Resend calligraphy materials production line package

Fault phenomenon: The robot arm reset switch is damaged
Solution: Replace the three-axis reset switch of the robotic arm

Fault phenomenon: Asking whether E4 is installed correctly
Solution: Guide to install E4, and there is a problem with spending

Fault phenomenon: The three-axis robot arm cannot be reset normally
Solution: After checking, the screws were given to the card owner.

Fault phenomenon: The controller cannot be used normally and the screen is black
Solution: Can be used normally the next day

Fault phenomenon: Use the serial port debugging assistant to send instructions to the robotic arm, and then the robotic arm will return multiple ok
Solution: The customer added a carriage return to the serial port debugging assistant, which resulted in a lot of

Fault phenomenon: The controller reports an error, a101
Solution: The message is that the mechanical arm hard limit error is reported.

Fault phenomenon: The robot arm resets in the wrong direction after flashing the firmware.
Solution: Re-flash the robot arm firmware, then $v, restore the robot arm to factory settings, and then check the parameters $53=2 (second-generation robot arm parameters)

Fault phenomenon: Asking about the conveyor belt procedure of Nanda Automotive Production Line
Solution: Send conveyor program parameters

Fault phenomenon: Asking about calligraphy writing information package
Solution: Send calligraphy writing package

Fault phenomenon: Asking questions in the Robotics Experiment Instruction Manual
Solution: Brother Peng will give the answer

Fault phenomenon: Ask for jetson¡¯s documentation package
Solution: Send jetson production line information package

Fault phenomenon: alarm alarm
Cause analysis: The robotic arm did not reset
Solution: Just reset the robotic arm.

Fault phenomenon : The customer wants to use two robotic arms at the same time. Our suggestion is to use the extended version, but the customer reported that there is no RS485 line. How to do it?
Solution: Let customers buy their own wires

Fault phenomenon: The client cannot be connected

Fault phenomenon: The serial port of the robot arm cannot be found

Fault phenomenon: python customers need to add IO control interface on WLKATA STUDiO

Fault phenomenon: The robot arm needs to update the firmware, and the robot arm is stuck beyond the limit.
Solution: New firmware has been sent to the customer to release the limit.

Fault phenomenon: Thinking of combining the robotic arm with some of our own projects, we need to customize the robotic arm and have relevant documents and operation manuals.
Solution: Send robotic arm related documents and information to customers

Fault phenomenon: The air pump cannot work properly and the slide rail cannot be reset normally.
Cause analysis: After checking, the air pump is damaged and the slide rail is not equipped with a reset switch.
Solution: Replace the air pump and reinstall the reset switch

Fault phenomenon: The large automobile production line process cannot operate normally
Cause analysis: After inspection, the position of the robot arm is deviated.
Solution: Recalibrate the robot arm modification program

Fault phenomenon: The conveyor belt cannot operate normally and makes abnormal noises.
Cause analysis: After checking, the conveyor belt is loose and the motor cannot move the conveyor belt when the power is turned on.
Solution: Replace the conveyor belt.

Fault phenomenon: The reset posture of the robotic arm is different
Cause analysis: After investigation, it was found that the two axes of the robotic arm were loose and the robotic arm was not calibrated.
Solution: Tighten the two-axis jackscrew of the robotic arm and calibrate the robotic arm.

Fault phenomenon: The following problems were found when using your company's Mirobot robotic arm:
(1) Sometimes it cannot be reset through serial communication and needs to be reset using a teaching pendant;
(2) The teaching pendant often cannot be turned off and can only wait for its power to be consumed by itself before charging and turning it on again;
(3) The Bluetooth connection of the robotic arm teaching pendant is unstable, and the Bluetooth connect button is useless. Only the connection is valid when the machine is turned on.
Solution: 1: If you use the serial port to reset, be sure to confirm that the current state of the robot arm is IDOL, which is unprecedented, or the alarm is in the locked state. In both cases, it is okay to send him this kind of reset bell. . Otherwise, if for example, the run state is being executed or stuck, then it needs to be reset, restarted, etc.
2: If the visual device cannot be shut down normally, press the two buttons below it at the same time to force the shutdown.
3: For the Bluetooth connection status of the viewfinder, mainly check the Bluetooth connection icon on the viewfinder and the Bluetooth connection icon on the controller. If it no longer flashes, it means it is connected. You can check this for details. Documentation for using that viewer.

Fault phenomenon: Logistics line E4 replaces Dark3.

Fault phenomenon: The conveyor belt is not functioning properly
Cause analysis: After inspection, the gear of the conveyor belt motor reducer is damaged.
Solution: Replace the motor and retest the conveyor belt

Fault phenomenon: The customer wants to demonstrate how to operate the robotic arm in a construction scene
Solution: Negotiate with the customer without time for communication, and train the customer on simple scene operations (Li Fei assists)

Fault phenomenon: The second conveyor belt cannot run and makes a loud noise. How to solve it?
Cause analysis: After investigation, the conveyor belt has not been running for a long time and the belts are fixed together.
Solution : Just let the belt move manually and then run the belt again.

Fault phenomenon: The robotic arm is not operating properly and the USB is stuck in the robotic arm.
Cause analysis: After investigation, it was found that the top screw of the second axis of the robotic arm was loose and the USB was stuck in the robotic arm.
USB bayonet stuck in the robotic arm.

Fault phenomenon: The controller cannot operate normally when connected to the robotic arm
Cause analysis: There is no problem when testing other controllers.
Solution: Replace the controller

Fault phenomenon: There is a screw stuck in the upper arm of the robotic arm.
Cause analysis: It may be that there was no careful inspection before leaving the factory.
Solution: Return the robot arm to the factory for replacement

Fault phenomenon: The E4 robot arm accessories are damaged and the air pump cannot work properly.
Solution: Reissue the E4 robotic arm and replace the air pump

Fault phenomenon: The installation is UBUNTU version and there is a problem when using the host computer.
Solution: Inform the installation method

Fault phenomenon: There are multiple robot arms in the same space. When using the Bluetooth teach pendant, how do you specify the machine you want to connect to? (For example, after I turn on the Bluetooth connection, I connect to the machine that others are using. Robot arm)
Solution: The current solution to this problem is that in the same space, if multiple robot arms are connected to the teach pendant, they need to be connected one by one separately, so that each teach pendant and the robot arm can be connected separately, and they cannot be connected together. Connect simultaneously.

Fault phenomenon: The six axes of the robotic arm cannot be reset normally
Solution: Replace the robotic arm

Fault phenomenon : No python SDK is used
Solution: Teach how to install python

Fault phenomenon: Car failure
Solution: The wiring sequence of the car is wrong, adjust the wiring sequence

Fault phenomenon: Car failure
Solution: The wiring sequence of the car is wrong, adjust the wiring sequence

Fault phenomenon: The first generation robot arm cannot update the firmware
Cause analysis: Send an old version of the host computer
Solution: Use an old version of the host computer to upgrade the firmware of the robotic arm, and it can be used normally.

Fault phenomenon: There is a problem when using moubus , and the robotic arm can only run once.
Cause analysis: Check the robot arm version and modbus version
Solution: Downgrade the firmware of the robotic arm

Fault phenomenon: Dark3, position deviation after reset
Cause analysis: There may be a problem with the parameters
Solution: Let the customer calibrate the parameter position of one axis for $154. Change the position of the robotic arm by changing the value of the $154 parameter

Fault phenomenon: An error occurs when running the code and a solution is required.
Solution: Maybe the environment reported an error and you need to copy the environment again.

Fault phenomenon: The robot arm is unable to perform packaging operations.
Solution: The robot arm firmware and the host computer version do not match, resulting in the inability to perform the packing posture.

Fault phenomenon : The robot arm cannot be reset
Cause analysis: It is suspected that the main cable is loose
Solution: After the robotic arm was returned, it was found that the main cable of the robotic arm had fallen off, causing the robotic arm to be unable to reset.

Fault phenomenon: The robotic arm does not have a flange and the end cannot be replaced.
Solution: Remote guidance removes the flanges that are softly grasped by the two fingers of the robotic arm and replaces their ends.

Fault phenomenon: The six-axis helmet of the robotic arm is cracked
Solution: Replace the robotic arm, communicate with Qingdao about the robotic arm problem, and check the quality of the batch of products with the robotic arm problem.

Fault phenomenon: There is a limit when the robot arm is running.
Solution: The video solves the problem and tells you to close the soft and hard limits of the robotic arm.

Fault phenomenon: After installing the host computer software, the resolution displayed by the computer is wrong and there is no adaptation.
Solution: Just change the computer resolution and it will be fine

Fault phenomenon: After the robot arm has been moving for a period of time, the six axes suddenly stopped moving.
Cause analysis: It may be that the six-axis motor wire was disconnected after moving for a period of time.
Solution: Return to the factory for repair. Currently, the factory does not have version 2.0 motors.

Fault phenomenon: Slide rail + robotic arm, the last step of the file we wrote is to return the block to zero, but sometimes when it performs the return to zero, it will get stuck and make abnormal noise when it returns to the original position.

Fault phenomenon: An error occurs when the calligraphy robot arm is running
Cause analysis: The controller selected the wrong file when selecting the file.
Solution: Remotely guide customers to adjust the robotic arm

Fault phenomenon: Ask about the SDK for robotic arms written in C language
Cause analysis : Missing C SDK
Solution: SDK for robotic arms written in C language

Fault phenomenon: The robot arm cannot complete normal reset after connecting to the controller.
Cause analysis: 1. Initially, it was suspected that the equipment cable connection was incorrect.
2. The controller firmware is too low
3. There is a problem with the robotic arm
Solution: Through investigation, it was found that the air pump cable was connected to the wrong location.

Fault phenomenon: The position of the robot arm simulated welding is wrong
Cause analysis: 1. Check whether the thermal paper is correct
2. Check whether the laser head is focused
3. Check whether the circuit is damaged
Solution: After investigation, it was found that the laser head of the robotic arm simulating welding was out of focus.

Fault phenomenon: The six axes of the robotic arm do not move
Cause analysis: It is suspected that the six-axis motor wire is loose
Solution: Replace the six-axis motor cable

Fault phenomenon: The first arm doesn¡¯t move, I don¡¯t know what¡¯s going on.
The blue light is always on
Cause analysis: 1. It may be that the robotic arm did not receive the command
Solution: Restart the production line after power outage

Fault phenomenon: The earliest version of the calligraphy writing robot

Fault phenomenon: The first generation of robotic arm cannot be used
Solution : Released a 19.0 PC and updated the 1st generation firmware.

Fault phenomenon: Robot arm A101

Fault phenomenon: 5-axis cannot be corrected

Fault phenomenon: The robot arm is not registered after calibration.
Solution: Send calibration video

Fault phenomenon: Customer error A105, no feedback video

Fault phenomenon: Hello,
I think I wrote a message on the wlkata.com contact page but I might have forgotten to press send since I didn't receive any confirmation that my message was sent. So I am writing to you (maybe again) regarding the kinematics of the Mirobot. I would love to learn what kind(closed, jacobian etc ) of inverse kinematics it uses and how it determines which configuration it uses when two possible configurations would reach the target. Can you please tell me anything regarding the kinematics or guide me to where I could find such information.

Kind regards

Solution: Buy books

Fault phenomenon: The conveyor belt was sent by mistake, it should be white

Fault phenomenon: The first-generation robot arm and the second-generation controller cannot be applied
Solution: Send update tutorial and guide on how to update firmware

Fault phenomenon: The red robotic arm smokes during use
Solution: Replace the seven-axis motor drive module

Fault phenomenon: There was a problem with the three robotic arms during the reset process.
Solution: The small six-axis helmet of one robotic arm is cracked, and the big arm of one robotic arm is loose.

Fault phenomenon: The controller has a black screen and the host computer cannot connect to the controller.
Solution: Reissue controller

Fault phenomenon: The six axes of the robot arm are selected in one direction.
Solution: The six axes of the robot arm are missing

Fault phenomenon: The air pump works as soon as the robotic arm is powered on
Cause analysis: It is suspected that the air pump is short-circuited
Solution: Replace the air pump

Fault phenomenon: Pre-sales plan: Product plan arrangement 1 is an introduction to the functions of the hardware equipment, 2 is an introduction to the functions of the supporting software development platform, and 3 is a development application case.

Fault phenomenon: The conveyor belt squeaks when running
Solution: Return to Beijing for repair and re-tighten the conveyor belt

Fault phenomenon: The gripper of the construction robot is unstable
Solution: The six-axis motor cable of the construction robot is damaged. Communicate with Qingdao to replace the motor cable. Recorded and issued.

Fault phenomenon: How to use, update firmware and operate E4
Solution: Send a new host computer to explain how to upgrade the firmware of the robotic arm and E4, how to operate the robotic arm to grab things, and deal with some problems that arise during their use.

Fault phenomenon: Opening v-rep shows that the model library is not loaded.
Solution : Reload the v-rep library

Fault phenomenon: The six-axis end support of the robot arm is cracked
Solution: Reissue the six-axis end support and replace the six-axis end video

Fault phenomenon: Customer needs conveyor belt linkage
Solution: Explain the linkage plan to the customer and what is needed for control

Fault phenomenon: A105 Homing fail A105 reset error
Solution: Wait for the video to be published

Fault phenomenon: There is a problem with the customer's Matlab code.
Solution: Upgrade firmware

Fault phenomenon: Customer 105 error robot arm 2-axis feed 2.0
Solution: Tighten the screws

Fault phenomenon: The 45th axis of the 1st generation robot arm does not move
Solution: No. 11/Repair

Fault phenomenon: The robotic arm shakes when writing and drawing.
Solution: It needs to be calibrated when using it, it will be slightly better.

Fault phenomenon: The automobile assembly line was to be changed to another production line, and some problems were encountered along the way.
Solution: Remote control to solve the problem

Fault phenomenon: An error occurred when installing the Ubuntu system.
Solution : A file is missing when decompressing, please decompress it again.

Fault phenomenon: The robotic arm is stuck and cannot move.
Cause analysis: Most robot arms keep outputting $ parameters because there is a problem with the eeprom .
Solution: Send: $RST=$
This command can clear eeprom and reload data

Fault phenomenon: The Ubuntu system cannot find the serial port
Solution: Send the installation and decompression video to the customer, and shoot the serial port video

Fault phenomenon: I want some cases of matching matlab and ros
Solution: Organize and send cases and videos on the combination of matlab and ros

Fault phenomenon: The robot arm cannot be reset
Cause analysis: There is a problem with the two-axis reset switch
Solution: Return to Beijing. Replace the two-axis reset switch of the robot arm

Fault phenomenon: Not very familiar with arduino and would like an example code
Solution: Send the Arduino sample program and Arduino library of the automobile assembly line to the customer

Fault phenomenon: The robot arm cannot be reset normally
Cause analysis: After inspection, the five-axis and six-axis motor wires of the robotic arm were twisted.
Solution: Replace the robotic arm

Fault phenomenon: A105 error,

Fault phenomenon: Not mobilized

Fault phenomenon: Servo clamp is damaged

Fault phenomenon: Servo clamp is damaged

Fault phenomenon: Asking about the car data package, and reporting an error when installing Arduino later.
Cause analysis: Arduino is not installed properly , resulting in an installation error.
Solution: Online guidance for installation

Fault phenomenon: The mechanical arm has installed the suction cup and cannot suck the wood block.

Fault phenomenon: The five axes of the three robotic arms are defective and the small helmet is damaged.
Solution: Replace the five-axis motor of the robotic arm and the small helmet

Fault phenomenon: The three-axis limit switch of the robot arm is damaged.
Solution: Replace the three-axis limit switch of the robotic arm

Fault phenomenon: Reason for shipment: 3-axis motor fell off
Solution: Replace the three-axis motor of the robotic arm

Fault phenomenon: The three-axis motor shaft of the robotic arm fell off (the customer just received the goods, 4.0 robotic arm)
Solution: Exchange the product and ask the factory to inspect the robotic arm

Fault phenomenon: The fourth axis motor is broken and the supporting bearings fall off.
Solution: Replace the motor

Fault phenomenon: The robot arm cannot be reset (the three-axis reset switch is damaged)
Solution : Replace the three-axis reset switch of the robotic arm

Fault phenomenon: The gear of the first-generation robot arm is damaged and two gears are sent.
Solution: Reissue two first-generation robot arm gears

Fault phenomenon: MEGA2560, (Erha vision module + single-head suction cup combination end) is damaged and needs to be replaced
Solution: Reissue the Erha module and single-head suction cup

Fault phenomenon: The screen of the multi-function controller does not light up. Replace the controller.
Solution: Replace the multi-function controller

Fault phenomenon: Indian customer, the three-axis reset switch of the robot arm is damaged (replace the three-axis reset switch)
Solution: Replace the three-axis reset switch of the robotic arm

Fault phenomenon: The 2-axis reset switch of the robot arm is broken (replace it)
Solution: Replace the two-axis reset switch of the robot arm

Fault phenomenon: The six-axis helmet of one robotic arm is damaged, and the other robotic arm cannot communicate.
Solution: Replace the six-axis small helmet of the robotic arm and replace another motherboard that cannot communicate

Fault phenomenon: The reset switches of 4 robot arms are damaged (two of the three-axis jackscrews are loose and one of the two-axis jackscrews is loose)
Solution: Replace the robot arm reset switch and tighten the loose jackscrew

Fault phenomenon: The small helmet of the robotic arm is damaged (the reset switch is broken)
Solution: Replace the small helmet for the robotic arm

Fault phenomenon: 1. There is a problem with the three-axis robotic arm. 2. The 4th axis of the six-axis robotic arm is shaking. 3. The program cannot run normally and there is a bug. 4. The arduino cannot download the program normally. 5. The 485 line falls off.
Solution : Replace the robotic arm and upgrade the production line

Fault phenomenon: Remote logistics debugging, remote guidance installation, debugging

Fault phenomenon: 1. The teacher asked about some small cases 2. Some problems with the robotic arm
3. How to use python 4. The problem of host computer resolution
5. The six-axis limit of the robot arm 6. The position of the air pump is wrong

Fault phenomenon: Fruit production line, remote guidance on installation, and teacher explaining how to use the robotic arm
Solution: Remote guidance for installation

Fault phenomenon: Some problems with E4 products: such as product parameters
The host computer supports E4 (win and unbut )
terminal model
manual
Solution: technical support

Fault phenomenon: 1. Three-axis technical support 2, six-axis technical support 3 and E4 technical support
Solution: Problems with remote guidance of robotic arms

Fault phenomenon: The artificial intelligence sorting suite is half debugged
Solution: Remote guidance and debugging

Fault phenomenon: Remote technical support QTS

Fault phenomenon: The latest Ubuntu version and win version
Solution: Test the new version of the host computer

Fault phenomenon: Talk to the person over there to explain the large car production line in detail.

Fault phenomenon: dark3 parameters are incorrect and this firmware parameter is required
Solution: Change the robot arm parameters

Fault phenomenon: The small helmet is broken,
Solution: The United States has been replaced

Fault phenomenon: 3-axis motor damaged
Cause analysis: Motor shaft fell off
Solution: Replace the motor (send a video tutorial on replacing the motor)

Fault phenomenon: The robot arm that controls multiple robots via Bluetooth wifi is now changed to require Bluetooth and Wifi to return status values.

Fault phenomenon: There is a problem with visual recognition,
Solution: jing guides customers to debug OpenMV

Fault phenomenon: Python control problem, want to control IO feed
Solution: Let him debug DO DI through the IO port. There is no response for the time being.

Fault phenomenon: I asked about PLC connection issues and want to build a production line myself.
Cause analysis: I am also a novice and don¡¯t know how to use it.

Fault phenomenon: The three-axis jacking screw of the robotic arm falls off
Solution: Fasten the jack screw

Fault phenomenon : small helmet damaged
Solution: Replace the small helmet

Fault phenomenon: The robotic arm is loose and shaking violently
Solution: Replace the robotic arm

Fault phenomenon: 1. After polishing the robotic arm, the two-axis reset switch is damaged.
2. The fork of the agv trolley is not accurate
Solution: 1. Replace the two-axis reset switch
2. Wait for notification from the other party

Fault phenomenon: Problem 1: The discharging machine of the ceramic tile production line may get stuck.
Solution: Not solved yet

Fault phenomenon: Problem 2: The robotic arm of the construction production line cannot pick up the model.
Solution: Adjust the program

Fault phenomenon: Error when importing robotic arm into ros
Solution: Hand over to Mr. Dong

Fault phenomenon: 1. The four-axis motor cable of E4 falls off
2. The second axis was not assembled properly during assembly.
Solution: Help the teacher troubleshoot

Fault phenomenon: Replacing one axis gear of the robot arm
Solution: Shoot a tutorial video on replacing the gear of one axis of the robot arm

Fault phenomenon : nan
Cause analysis: Some parameters of the robotic arm, as well as screenshots of the host computer and the configuration of the robotic arm

Fault phenomenon: The robot arm cannot be reset normally
Solution: Replace the robotic arm









G code Instruction Set
User Manual
(Technical Development Document)



Document version: V1.001
Release date: 2021/05/30

Copyright  Beijing Tsinew Technologies Co., Ltd. 2021. All rights reserved.
Without the written permission of the company, any unit or individual shall not excerpt, copy part or all of the content of this document without authorization, and shall not disseminate it in any form.
Disclaimer
To the maximum extent permitted by law, the products described in this manual (including its hardware, software, firmware, etc.) are provided "As-is" and may have defects, errors or malfunctions. Beijing Tsinew does not provide any form of express or implied warranty, nor does it compensate for any special, incidental or indirect damages caused by the use of this manual or the use of the company's products. Before using this product, please read this manual and related technical documents published on the Internet and learn more relevant information. Make sure to use this product under the premise of fully understanding the product-related knowledge.
The user of this product is responsible for following the laws and regulations of relevant countries and ensuring that there are no major dangers in the use of Beijing Tsinew robotic arms.  
Revision Notes

Beijing Tsinew Technologies Co., Ltd.
Address: Room 1603, Zhongguancun Energy & Security Science Park, Building 3, Qinghua East Road 16 , Haidian District, Beijing 
Official Website£ºwww.wlkata.com 



1. Instructions
Mirobot uses a USB serial port for communication. The baud rate is 115200, the data bit is 8, and the stop bit is 1.
Mirobot adopts instruction control based on G code.
The letters in the instruction are not case sensitive.
Mirobot can output two sets of PWM signals to control the gripper or suction cup.
The user can send instructions to the robotic arm through WlkataStudio or serial port tools, and each instruction ends with a newline character'\n'.



2. G code instruction set
2.1 Movement instructions

¡øFigure: Mirobot joint coordinate system (the positive direction of each axis is shown by the arrow)

¡øFigure: Mirobot Cartesian coordinate system
2.1.1Homing
2.1.2 Return to zero (nominal zero position of each axis)
2.1.3 Movement speed
2.1.4 Cartesian mode
2.1.5 Angle mode
2.1.6 Motion mode
2.1.7 Fast motion
2.1.8 Linear interpolation motion
2.1.9 Circular interpolation movement
2.1.10 Timed pause
2.1.11 Door-shaped trajectory movement
2.2 Auxiliary instruction
2.2.1 Unlock each axis
2.2.2 Air pump/gripper control
2.2.4 Status query
3. Robotic arm parameter setting
The hardware parameter setting instruction of Mirobot robotic arm is composed of "$" + ""number", and the setting method is the same as the previous section; before setting, send "$$" to the robotic arm to get the current parameter information, as shown in the figure below. Send "$+number=number" when modifying the value, for example, turn off linear interpolation: "$35=0". It will take effect immediately after the modification, and it will be saved after power-off. The following will explain each parameter separately according to the function;

3.1 Related to homing
3.2 DH parameters

Note: The length of each connecting rod in the figure is for reference only, and does not represent the actual value
3.3 Origin offset of base coordinate
The original coordinate origin of the robotic arm is in the center of the circular base, which cannot be reached by the robotic arm. In software such as laser engraving, the issued coordinates are relative to this origin, so it is very inconvenient to use. The following three offsets are used to adjust the offset of the origin in the direction of the XYZ coordinate axis, so as to move the position of the origin of the robotic arm.
3.4 Interpolation motion related
3.5 Tool coordinate system related

The tool coordinate origin is the center point of the flange bottom at the end of the sixth joint by default.If you install other tools, you can select a point on the tool as a reference point and set its XYZ offset relative to the center of the flange. Then the end pose of the robotic arm in Cartesian coordinate mode is the pose of this point.
3.6 Stepper motor pulse equivalent setting
This group of parameters is related to the reduction ratio of each axis. Please do not modify it if not necessary;
3.7 Stepper motor speed and acceleration settings
3.8 Workspace related
After the movement of the robotic arm triggers the soft limit, the robotic arm stops moving. The restriction can be lifted by moving in the opposite direction;
After the robotic arm triggers the hard limit, the robotic arm is locked and needs to be restarted;


3.9 Calibration position parameters
After homing, the robotic arm moves to the initial posture (the big arm is upright, the forearm is horizontal), and the position of each axis in the current posture is specified as the 0 degree position. The angle that each axis moves from the position where the travel switch is triggered to the current position is the calibration position parameter. When adjusting the calibration position parameters, you can observe whether the calibration marks of each axis are aligned. There is no travel switch on the 6th axis, so calibration is not required for it. The position when the 6 axis is powered on is defaulted as its 0 degree position. If you need to adjust it, you can rotate it through the software or manually adjust it.



3.10 Backlash compensation parameters
Mechanical structures such as the reducer of each axis of the mechanical arm have repetitive errors during the movement, which can be compensated by setting;





Official Wechat Account











Mirobot Robotic Arm Calibration
User Manual
(Technical Development Document)





Document version: V1.001
Release date: 2022/09/08

Copyright  Beijing Tsinew Technologies Co., Ltd. 2021. All rights reserved.
Without the written permission of the company, any unit or individual shall not excerpt, copy part or all of the content of this document without authorization, and shall not disseminate it in any form.

Disclaimer
To the maximum extent permitted by law, the products described in this manual (including its hardware, software, firmware, etc.) are provided "As-is" and may have defects, errors or malfunctions. Beijing Tsinew does not provide any form of express or implied warranty, nor does it compensate for any special, incidental or indirect damages caused by the use of this manual or the use of the company's products. Before using this product, please read this manual and related technical documents published on the Internet and learn more relevant information. Make sure to use this product under the premise of fully understanding the product-related knowledge.
The user of this product is responsible for following the laws and regulations of relevant countries and ensuring that there are no major dangers in the use of Beijing Tsinew robotic arms.  

Revision Notes

Beijing Tsinew Technologies Co., Ltd.
Address: Room 1603, Zhongguancun Energy & Security Science Park, Building 3, Qinghua East Road 16 , Haidian District, Beijing 
Official Website£ºwww.wlkata.com 


1. Calibration Definition
After the Mirobot is powered on, it needs to perform the "home" operation before executing other motion commands. The initial position after "homing" is the "zero position" of Mirobot as shown below. 

In angle mode, this is recorded as the 0-degree position of each axis; In coordinate mode, in the base coordinate system with the center of the base plane as the origin, the coordinates of the end of the robot arm are (X 198.6, Y0, Z 230.7). 
If there is a deviation between the "zero position" and the position of the above figure, it will cause the robot arm working space error and absolute accuracy deviation. At this time, the robotic arm needs to be "calibrated". 


2. Robotic Arm Calibration
Please upgrade the robotic arm firmware to the latest version before calibration, see Annex 1: Mirobot Firmware Update Tutorial for the detailed method.
2.1 Fast Calibration
Connect Robotic Arm
Open ¡°WlkataStudio¡± and connect the robotic arm

Enter Calibration Mode
£¨1£©Enter the "SETTING" interface, find "Calibration¡± and click ¡°Start¡± to confirm


£¨2£©Each axis of the robot arm returns to zero to the position of the stroke switch, and close the Settings window. 
 

1-5 Axis Calibration
£¨1£©Through the action control area, roughly adjust the angle of each axis to the value shown in the figure below

£¨2£©Using a lower "step" value, fine-tune the position of each axis so that the scale lines of each axis are aligned, and the position of the reticles is shown in the following figure;


Finish Calibration
Enter the "Settings" interface and click the calibration "Finish" button in the pop-up tab to save the calibration parameters.

2.2 Precise Calibration
Precision calibration is suitable for situations where the absolute accuracy of the robotic arm is high. For example, it is recommended to calibrate in this way before using the Mirobot painting function.
Accurate calibration requires the help of horizontal tools, it is recommended to use 9.5¡Á40mm bubble spirit level. The bracket model files can be downloaded on the official website for 3D printing. Please ensure that the platform level of the robotic arm locates is horizontal before calibration.

Connect Robotic Arm
Open ¡°WlkataStudio¡± and connect the robotic arm

Query Calibration Parameter
After the robotic arm returns to zero, it moves to the initial position (large arm vertical, small arm horizontal). By stipulating the position of each axis under the current position as 0 degrees position, the calibration position parameters are the angles at which each axis moves from stroke switch to the current position. 
The hardware parameter setting instruction command of the Mirobot robotic arm consists of "$" + "number". The current parameter information can be obtained by sending "$$" to the robotic arm in the terminal in the command control interface.


3-Axis Calibration ($156)
£¨1£©Place the spirit level on the forearm joint in a position as shown in the figure below.

£¨2£©The robotic arm performs "home", and then adjusts the "J3" angle through the motion control to level the forearm joint, and records the value of "J3" at this time.

£¨3£©Update the "$156" parameter by subtracting the previously recorded "$156" value and the adjusted "J3" value. The result is the new "$156" value, for example: 60-(-1.2)=61.2. Then, send "$156=61.2" in terminal.
		
£¨4£©After updating the "Calibration Position Parameter", the robotic arm needs to perform "home" to take effect. After homing, please check the level with bubble level, otherwise repeat the (2) (3) step until the forearm is horizontal.
2-Axis Calibration ($155)
£¨1£©Switch WlkataStudio to "coordinate mode" and control the Z-axis of the robotic arm to descend to the height of the end to about 3mm from the desktop, and the X coordinate to position 150. 

£¨2£©Change the "step size" to 5, and gradually increase the X coordinate value. During the process, observe whether the height of the end of the robot arm changes.
If the end moves downward closer to the desktop as the X coordinate increases, the current value of "$155" and "$156" should be reduced by a certain value, for example, the current value of "$155=35", "$156=61.2", both values can be reduced by 1 at the same time. Then, send "$155=34", "$156=60.2" to the robotic arm.
If the end moves upward away from the desktop as the X coordinate increases, the current value of "$155" and "$156" should be increased by a certain value to the robotic arm at the same time.
£¨3£©The robot arm performs "home" operation and continues to test according to step (2) until the end height remains unchanged when the X coordinate is moved, at this point, the 2-axis calibration is completed. 
4-Axis Calibration ($150) and 5-Axis Calibration ($151)
The 4-axis calibration should be aligned with the marks. The "$150" parameter is updated to be the sum of previously recorded "$150" value and adjusted level "J4" value. 
For example: 105+1=106, then send "$150=106" to the robotic arm terminal window.
The 5-axis calibration should be aligned with the mark. The "$151" parameter is updated to the sum of previously recorded "$151" value and adjusted level "J5" value. 
For example: 25+2=27, then send "$151=27" to the robotic arm terminal window.

				
For single-axis calibration, when performing the "home" operation, "$H" + "Axis Sequence Number" can control single axis to home, for example: "$H4", and the 4th axis can be controlled to zero back individually.
1-Axis Calibration ($154)
Since the Mirobot has a circular base, it is necessary to calibrate the 1 axis only when the robotic arm is fixed and there is a high absolute position accuracy requirement. Calibration can be based on the actual scenario, and the appropriate reference object can be selected to determine the X-axis orientation.
Update the "$154" parameter to the sum of previously recorded "$154" value and adjusted level "J1" value. For example: 100 + (-0.5) = 99.5, send "$154 = 99.5" in terminal window.
Annex I£ºMirobot Firmware Update Tutorial
WlkataStudio Firmware Update Tutorial
Using the upper computer to update the firmware can retain the customized settings of the manipulator parameters
Step 1: Use the USB cable to connect the robotic arm and computer. Then, turn on the power.

Step 2: Open WlkataStudio to check the firmware version: Select the correct serial port, press the "RESET" button of the base, and observe the startup information returned. The firmware version of the manipulator and controller is displayed in the red box position respectively (version information of the old version firmware is not displayed).

Step 3: Open the WLKATA Studio software, enter the "Settings" interface, and click "Update Firmware".

Step 4: Click "Upload" in the pop-up window to update the firmware.

Step 5: When the information in the red box appears, the firmware upload is complete, close this window.

Step 6: Click the "OK" button in the Settings window to finish


XLoader Firmware Update Tutorial
If the manipulator firmware is damaged or the software cannot identify the manipulator, use XLoader to update the firmware directly.
Step 1: Turn on the power of the robotic arm and connect the computer with USB cable (turn off WlkataStudio in advance, otherwise it will fail)
Step 2: Open the download program XLoader, as shown in Figure 1
Step 3: In Hex file, select the Hex file to download
Step 4: Select Mega(ATMEGA2560) in Device
Step 5: Select the corresponding port number in COM Port (usually there is only one option)
Step 6: Click Upload and start updating firmware. After successful download, there is a prompt in the lower left corner, as shown in Figure 2





Preface
"Intelligent Robot Education" is an emerging industry established in accordance with STEAM education. It runs through all age groups of preschool education, elementary school, middle school, high school, and university. 
Cultivate students' innovative ability in engineering practice is one of the core tasks to improve the quality of education. This book uses the Mirobot ¨C a 6-axis robotic arm - as the carrier, breaks through the constraints of the traditional discipline system, integrates advanced technology and products into the teaching materials, and implements integrated teaching of theory and practice. This book starts from the understanding of the mechanical structure of robotic arm and the use of WLKATAStudio software. From shallow to deep, from easy to difficult, from single to comprehensive, it will introduce the basic operations of the robotic arm step by step. Most of the chapters are equipped with practical cases, and students can learn by doing these experiments.
In the era of artificial intelligence, society needs application-oriented talents, who can integrate robotics theory, knowledge, and skills into all walks of life. Beijing Tsinew Technologies Co., Ltd. is committed to providing the most reliable, lightest, and safest standard industrial robotic arm hardware for robot education, helping the rapid development of robot education. WLKATA robot series products meet the needs of "new engineering" education and training, and have developed intelligent hardware including desktop robot arms, AGV cars, vision modules, and production line kit. The robot products are small and easy to use, which can be directly used in course teaching and maker experiment.
Limited to the editor's experience, level and time, there are inevitably shortcomings and errors in the book. We invite experts and readers to criticize and correct.
Editor
October 2020




Chapter 1 Introduction to Mirobot 6-axis robotic arm
The Mirobot robotic arm is a mini 6-axis desktop industrial robot which is safe and easy-to-use. It is independently developed and designed by Beijing Tsinew Technologies Co., Ltd. It is an open AI robot comprehensive teaching platform. Mirobot has multiple functions such as writing and drawing, laser engraving, palletizing, garbage sorting, etc. It reserves multiple extension interfaces to support secondary development, and supports programming languages such as Python, C, C++, and Java. It owns multiple control methods such as PC software, mobile phone APP, Bluetooth teach pendant. It can freely set actions and add fixtures, meeting the learning needs of different age groups. At the same time, it provides the source code for simulations in v-rep and Matlab and the development code for Mirobot based on ROS platform. This chapter mainly introduces the mechanical structure and electrical parameters of Mirobot, a 6-axis robotic arm. It will help readers understand the basic composition of Mirobot.
1.1 The mechanical structure of the robotic arm
The 6-axis robotic arm Mirobot is mainly composed by a base, rotating body, a lower arm, an upper arm, an end-effector connection plate. As shown in the figure below, it consists six rotating joints, so the robotic arm has six degrees of freedom£¬ and it has an omnidirectional movement in the workspace.

Each joint of the robotic arm is driven by an independent stepping motor with a gear reducer mechanism. The purpose is to improve the accuracy of the robotic arm and reduce its movement error. In the structural design of the 6-axis mechanical arm, we focus on reducing the load of the stepper motor, especially the motor in the second joint. The second joint movement requires a large torque, so a higher torque stepper motor is needed. Therefore, in the structural design, a rebound cylinder with a built-in spring is installed at the second joint. The cylinder can well balance the swing torque of the robotic arm and reduce the workload of the stepper motor. In addition, the whole robotic arm is made of plastic material, which reduces the weight of the robotic arm and reduces the load of the stepper motor. The main control board of the robot arm is installed and fixed inside the base, and it is responsible for the motion planning and control of the robot arm.

The 6-axis robotic arm can realize free movement in omnidirectional space. Therefore, the six-axis robotic arm has rich functional scalability. You can install grippers at the end of the robotic arm, and the robotic arm can grab objects; you can install a brush at the end of the robotic arm, and the robotic arm can write and draw; you can install an air pump at the end of the robotic arm, and the robotic arm can suck objects; you can install a laser head at the end of the robotic arm, and the robotic arm can laser engrave; and so on. The following picture shows some commonly used end tools of robotic arms:


The space coordinate system of the robot arm generally includes: the base coordinate system, the wrist coordinate system, the tool coordinate system, the fixed coordinate system, and the target coordinate system. The tool coordinate system is the actuator installed at the end of the robot arm. Therefore, after installing the end effector, the kinematics algorithm of the 6-axis robotic arm will be adjusted according to the tool coordinate system.
1.2 The electrical principle of the robotic arm
Desktop robotic arms mostly use control chips such as STM32 microcontroller or Arduino. Arduino is an open-source electronic platform, which is convenient, flexible, and easy to use. It uses C language programming. Its biggest advantage is to minimize the threshold for developers to use the controller, so that developers can focus on algorithms, rather than how to design and operate the controller. The picture below is the physical picture of the Arduino development board.

At present, the open-source 3D printers and engraving machine controllers on the market all use Arduino as their controller, and the desktop robotic arm uses the Arduino Mega2560 controller. As for the hardware interface of the robotic arm control system, the 6-degree freedom desktop robotic arm needs to control 6 stepping motors. Each stepping motor needs a pulse sending interface, a stepping motor enable pin interface, a direction control interface and a limit switch interface used when resetting. If there is a gripper controlled by a steering gear or an air pump at the end of the desktop robotic arm, one or two PWM output interfaces are also required. The above typical interfaces are needed, when a 6-DOF desktop robotic arm using Arduino as the controller.
The motion joints of the robotic arm are driven by stepper motors, and these stepper motor drivers are driven by a miniature low-cost chip such as A4988. Small stepping motor drive chips mostly are micro drive chips such as A4988, LV8729 and DRV8825. Because desktop robotic arms mostly use stepping motors with a size of 42mm or smaller, and their working current is below 2A, most of the stepping motors use the micro-drive modules mentioned above.
The maximum theoretical output of the A4988 module is 2A current, and the stepping motor control mode supports up to 16 subdivisions, that is, one movement of the stepping motor can be subdivided into 16 micro steps. The output current can be adjusted through the potentiometer that comes with the module. The following figure shows the pin definition of A4988 module and the connection diagram of typical stepper motor control.


A single-chip micro-controller including Arduino can be used to generate control pulses and motion direction signals for driving the movement of the stepper motor. The pulse signal is connected to the STEP pin in the A4988. The microcontroller sends a pulse signal each time, and the A4988 drives the stepping motor to move a micro step. The movement direction signal is connected to the DIR pin in the A4988, and the microcontroller sends a high-level or low-level signal to control the A4988 to drive the stepping motor to rotate clockwise or counterclockwise. The "1A, 1B, 2A, 2B" pins in A4988 are used to connect the four input power lines of the common two-phase four-wire stepper motor. Among the four pins, "1A, 1B" is connected to one phase of the stepper motor, and "2A, 2B" is connected to the other phase of the stepper motor. There are two sets of power supply pins for A4988, VDD and GND close to it are connected to the 5V power supply of the control signal, and VMOT and GND close to it are connected to the motor power supply of 8~35V voltage limit. The high and low levels of pins "MS1, MS2, MS3" are used to set the subdivision parameters of the stepping motor. The subdivisions corresponding to different settings are shown in the table below.
When using of the A4988 module, it is important to ensure good heat dissipation. Although its maximum current technical index can reach 2A, when the current is close to 2A, the chip heats up very seriously. If good heat dissipation cannot be guaranteed, a serious loss of steps will occur.
1.3 Technical parameters of the robotic arm
The following table shows the technical parameters of the Mirobot 6-axis robotic arm. From the table, we can see the physical and electrical information of the robotic arm, which details the range of motion of the six joint axes of the robotic arm and their maximum speeds. 



Now you have learnt the mechanical structure and electrical parameters, and the basic composition of Mirobot.
Chapter 2 Kinematics algorithm of six-axis robotic arm
The core motion control algorithm of Mirobot 6-axis robotic arm is forward kinematics and inverse kinematics. This chapter will introduce the basic knowledge of kinematics algorithm ¡ª space description and transformation. It will also explain the forward kinematics and inverse kinematics of the 6-axis robotic arm to help readers understand the calculation of kinematics algorithms. This chapter will lay a foundation for the programming and control of the robotic arm.
2.1 Space description and transformation
The definition of robotic arm operation refers to the movement of parts and tools in space through a certain mechanism, and it needs to express the position and orientation of the workpiece, tools, and the mechanism itself. To define and use the mathematical quantity that expresses position and posture, we must define a coordinate system and give expression rules, where the description of position and posture provides support for expressing linear and angular velocities, forces, and moments in the future. The 6-axis robotic arm has up to 6 degrees of freedom in three-dimensional space, that is, 3 degrees of freedom for translation and 3 degrees of freedom for rotation. There are various space transformation description methods in robotics. Homogeneous transformation matrix, Euler Angle method, axis and angle, unit quaternion are all the popular description methods at present.
The pose of a rigid body in the three-dimensional space can be determined by 3 translational coordinates and 3 rotational coordinates. The 3 translational coordinates determine the position of the rigid body, and the 3 rotational coordinates determine the orientation of the rigid body. We replace the rigid body with a coordinate system fixed with the rigid body. The three translational coordinates determine the origin of the coordinate system, and the three rotational coordinates determine the orientation of the coordinate system. The motion process of the coordinate system is equivalent to the motion process of a rigid body, so the motion of a rigid body can be completely described by 6 coordinates.
When we discuss the kinematics of the robotic arm, it often involves how to describe the position and orientation of the robotic arm¡¯s end-effector, links, tool, and workpiece in three-dimensional space. In addition to establishing a coordinate system for each component, a fixed frame, also known as the reference frame, is needed to facilitate relevant discussions. As shown below, the  coordinate system is called the fixed frame,  is the origin of the fixed frame. The  is the moving frame, at the same time.  is also the origin of the moving frame. If the relative motion between two frames is known, then the relative motion of any point P on a rigid body can be uniquely determined.

The position of any point P relative to the reference frame F on a rigid body can be represented by a three-dimensional vector . Then, the , ,  are the components of vector  relative to the reference frame F. So, we can define the projection of vector  relative to the reference frame F as

subscript F denotes the reference frame F. The components , ,  are the projections of vector  in the fixed frame F. The superscript T denotes the transpose matrix, and the transpose matrix is defined for convenience of writing and expression. The relationship between the transpose matrix and the original matrix is as follows:

If , ,  are defined as unit vectors of the axes in reference frame, then vector  can also be expressed as

The unit vectors , ,  of the reference frame are defined as



For describing the pose of a rigid body, the relative motion of a moving frame M with respect to a fixed frame F can be considered. For the time being, the two frames have a common origin, shown as below. , ,  are defined as the three axes of the moving frame M and , ,  are the corresponding unit vectors. The relationship of the unit vectors , ,  of the moving frame M in the fixed frame F are as follows:



where, , ,  are the projections of unit vector  along the , ,  axes of the fixed reference frame F, respectively. Similarly, , ,  and , ,  are the projections of ,  respect to , ,  axes. Then, relative to the moving frame M, the point P on a rigid body can be described as

where , ,  are the projections of the vector  along the ,, axes of the moving frame M. Then we can get the description of the point  on the fixed frame F as follows:


It can be seen that the projections of vector  relative to fixed frame F along the axes of X , Y , Z may be defined as



It can be expressed in matrix form as follows:

where [] and [] are three-dimensional vector  in fixed reference frame F and moving frame M, respectively. Matrix  is a 3¡Á3 rotation matrix. The projection of vector  in moving frame M can be transformed into that in fixed frame F by rotation matrix . The specific expressions are as follows:



Assuming that at the beginning the moving frame M coincides with the fixed frame F, then M rotates an angle  about the Z axis. The unit vectors of the moving frame M at that time can be described by its components in the fixed frame F. The specific expressions are as follows:



Where, s = sin,c = cos, then, the rotation matrix  can also be expressed as:


 

Similarly, the rotation matrices obtained by rotating the  angle about the Y axis and the  angle about the X axis are as follows:


The projection of vector  in moving frame M can be converted to that in fixed reference frame F by rotation matrix . In fact, using the properties of rotation matrix , more transformations can be realized, such as inverse transformation, that is, the projection of vector  in fixed reference frame F can be transformed into that in motion frame M. Now, we discuss some properties of rotation matrix .
Firstly, the first column of parameters in rotation matrix  is the projection of unit vector  in fixed reference frame F; the second column and the third column are the projections of unit vector  and  in fixed reference frame F, respectively. Because the unit vectors are perpendicular to each other, these vectors must satisfy the orthogonal constraints. Or the dot product of the unit vectors themselves is equal to 1, and the dot product of the unit vectors is equal to 0. At the same time, the cross product of the unit vectors can obtain another unit vector.



From the orthogonal properties of the rotation matrix , it can be concluded that the rank of the rotation matrix  is equal to that of the unit matrix  , or the rotation matrix  multiplied by its transpose matrix T is equal to the unit matrix .

Thus, the inverse matrix 1of the rotation matrix  can be obtained by transposing the matrix .

The descriptions of any point P in space are not the same in different frames. For clarify the relationship between the two frames, it is necessary to discuss the mathematical regulations of the transformations.
Let the vectors of any point P in the fixed reference frame F and the moving frame M be  and ¡ä, respectively. The origin of the moving frame M is . The vector  is used to describe its position relative to the fixed reference frame F. The three vectors are related as follows:


If ¡ä is known in the moving frame M, that is, [¡ä] is known, and the rotation matrix  can be used to describe the orientation of frame M relative to frame F. Then, ¡ä can be expressed as [¡ä] = [¡ä] to fixed frame F as follows:

The formula represents the transformation of point P from the moving frame M to the fixed reference frame F including both translation and rotation.
2.2 Forward kinematics of robot arm
The forward kinematics is firstly to give the 6 joints variables of the robotic arm, then to find the position and orientations of the robotic arm¡¯s end-effector or any member of the robotic arm in the base coordinate system. Its mathematical description is the homogeneous transformation Matrix T.
The general expression of the homogeneous transformation matrix , which is modified DH method for the adjacent connecting rods, is 


Where,  represents homogeneous transformation matrix of link frame  relative to link frame  1,  represents the joint angle in the DH parameter, c represents the cosine, s represents the sine,  represents the link length in the DH parameter,  represents the link offset in the DH parameter, and  represents the twist angle in the DH parameter.
Substituting the DH parameters into the general formula, the transformation matrix of each link can be obtained as follows:








Multiplying the transformation matrices of each link, the transformation equation of the 6-axis desktop robotic arm is

 describes the pose of the end link coordinate system 6 relative to the base coordinate system 0.
To verify the correctness of , calculate the initial position parameters of the desktop robot arm. Substitute in £¬£¬£¬£¬£¬, the value of the transformation matrix  is

The result obtained is completely consistent with the position and orientation of the robot arm shown.
2.3 Inverse kinematics of robot arm
The inverse kinematics is to know the position and orientation of the end-effector, then to find all the joint variables. There are many ways to solve the inverse kinematics of the robotic arm. The inverse solution function of the desktop robotic arm is very important in the entire control system. Because the desktop robotic arm uses a single-chip computer with limited performance as the arithmetic unit, the algorithmic calculation of the inverse solution function cannot be too big. The last three joint axes of a 6-axis desktop robotic arm are perpendicular to each other and intersect at a point (the wrist point W of the robotic arm). This situation satisfies the Pieper criterion, that is, when the three joint axes of the robotic arm intersect at one point or the three axes are parallel, the robotic arm must have a closed solution. Therefore, the inverse kinematics solution of the robotic arm has a closed solution. For a robotic arm with this structure, the first three joint angles of the robotic arm determine the position of the robotic arm's wrist point, and the latter three joint points of the robotic arm determine the attitude of the robotic arm's wrist point. Therefore, the geometric method is used to solve the first three joint angles, and then the Euler angle inverse transformation method is used to solve the last three joint angles. It should be noted that there will be multiple solutions in the solution process. Here, a set of solutions with a suitable range is selected based on the joint angle motion range of the desktop robot arm.
When solving the inverse solution of the 6-axis desktop robotic arm, it is necessary to pay attention to the expression method of the expected pose of the given end effector. The most general expression method is the homogeneous transformation matrix T of the given end effector coordinate system relative to the base coordinate system. But this method is very inconvenient for controlling a 6-axis desktop robotic arm. The attitude matrix contained in the homogeneous transformation matrix is not intuitive and convenient to describe the attitude of the end coordinate system. There are many parameters which are not independent. Therefore, we choose to use another method which is easy to observe the pose angles. This method to express the expected pose of a given end effector is set as: the position coordinates of the wrist point of the robot arm at the end of the given robot arm  and the angle of rotation around the  fixed axis on the base coordinate system, namely the RPY angle.
Geometric Method to solve 
The end attitude of the robot arm is given by the RPY angle. First, the end attitude represented by the RPY angle needs to be converted into the form represented by the rotation matrix R. The rotation around the XYZ fixed axis is expressed as first rotating the X axis by an angle of ¦Á, then rotating the Y axis by an angle of ¦Â, and finally rotating the Z axis by an angle of ¦Ã to complete the rotation. During the whole process, the reference coordinate system relative to the rotation axis is fixed.
The order of XYZ axis rotation matrix multiplication is from right to left, so the calculation method of the rotation matrix is:

The order of matrix multiplication is from right to left, that is





Where, respectively  represents the rotation matrix around a separate X axis, Y axis and Z axis, and  represents the rotation matrix obtained after the rotation of the XYZ fixed axis.
From the XYZ coordinates of the wrist point of the robotic arm, the first three joint angle values can be solved by geometric methods. Therefore, the XYZ coordinate value of the wrist point needs to be solved first.
These parameters have been given: the position coordinates  of the end effector tool point of the robotic arm, the distance  from the end to the wrist point, and the attitude matrix of the tool point of the end effector of the robotic arm, whose value obtained by the aforementioned method, namely


The coordinates of the end effector tool point of the robotic arm are solved by the above known quantities. In the end attitude matrix of the robot arm, the column  represents the cosines of three directions between the Z axis of the end coordinate system and the XYZ coordinate axis of the base coordinate system. Therefore, according to the geometry of the end of the robot arm£¬ the coordinates of the end effector tool point can be expressed as




After obtaining the end effector tool point¡¯s coordinates , you can start to solve the first 3 joint angles of the robot arm.
First, solve the joint rotation angle . The  axis of the robot arm is perpendicular to the XY plane of the base coordinate system. Looking down on the XY plane, you can get:


Where£¬
Another solution is


             
The geometric structure of the robotic arm on the XY plane and the geometric structure of the robotic arm on the XZ plane
Then, solve .
According to the law of cosines in triangle ABC

Where,


In a right triangle,

Further,

Get,

In the formula, S and V are respectively



Get,

Further, get

It should be noted that since  has two values, the obtained  also has two solutions, which are denoted as  and  here.
Next, solve . According to the geometric relationship, we can know

Where, Value  and  are respectively


Because the rotation direction of the joint determined according to the DH method differs from the calculated angle by a negative sign, so

Since the calculated intermediate variable V has two values,  also has two solutions, which are denoted as  and  here. It should be noted that it is necessary to add a minus sign before the  obtained by the geometric relationship method. This is because the angle of the  obtained by the geometric method is opposite to the  angle defined in the DH model.
The  and  are obtained by the geometric solution method. each of them has two sets of solutions, so there are 8 sets of solutions for the first 3 axis angle values obtained by the geometric solution method.
 Analytical method to solve 
The last three joint angles are solved by analytical method and proceed according to the following ideas.
 Set the angle of the last 3 joints to 0, as shown in the figure.

Then, when the angle of the last three joints is 0¡ã, solve the rotation matrix of coordinate system 6 relative to coordinate system 3. Currently, the rotation matrix  is a constant matrix, namely


Where,  represents the attitude matrix of the coordinate system 6 relative to the coordinate system 3 when the angle of the last three axes is 0.
 Fix a coordinate system  at the end of the robotic arm, that is, the end effector tool point . Make the attitude of the coordinate system in the base coordinate system 0 is consistent with that of the given desired end.
 The first 3 joint angles of the robot arm which obtained in the previous section determine the position of the wrist point of the robot arm. According to the forward kinematics of the robot arm, the attitude of the coordinate system 3 relative to the base coordinate system 0 can be obtained,


Where£¬ represents £¬ represents £¬ represents £¬ represents .
Use the attitude matrix  to represent the attitude of fixed coordinate system e of the end effector tool point relative to the coordinate system 6 of the robotic arm. Then the attitude relationship between the coordinate system  of the end effector tool point of the robotic arm and the base coordinate system 0 can be expressed as

Get 

Where,  represents the expected attitude of the end robot arm in the coordinate system 6, when the rear 3 joint axis is 0. The coordinate system e is an auxiliary coordinate system that does not exist in the actual DH model. Actually, this problem is converted to rotate the  joint angle values to make the coordinate system 6 and the auxiliary coordinate system e overlaps, so that the coordinate system 6 obtains the same attitude as the auxiliary coordinate system e, when the  joint angles are all 0.
Further observe the structure of the last 3 joints of the robotic arm. The axis Z4 of the joint 4 coincides with the Z6 axis of the coordinate system 6, and their direction is opposite, when the joint angles of  are all 0; The axis Z5 of the joint 5 coincides with the Y6 axis of the coordinate system 6, and their direction is the same, when the joint angles of  are all 0; The axis Z6 of the joint 6 coincides with the Z6 axis of the coordinate system 6, and their direction is the same, when the joint angles of  are all 0;
Therefore, it can be concluded that the joint angle values of  are equal to the ZYZ Euler angle which after the pose matrix  is converted to the ZYZ Euler angle. Because the direction between the Z4 of the joint 4 and the Z6 axis of the system 6 is opposite, the angle value of  needs to add a minus sign to the value of the ZYZ Euler angle.
In summary, the problem of solving the joint angle values of  is simplified to solve the attitude matrix  and transform the matrix  into  Euler angles. Let the solved  Euler angles correspond to ¦Á, ¦Â and ¦Ã, then



The specific solution process is as follows:
First, solve the expression of the attitude matrix  transformed by the ZYZ Euler angles. It should be noted here that the Euler angle transformation is performed along the changed coordinate axis after rotating. Therefore, the order of multiplication of the rotation matrix of the angle ¦Á, ¦Â and ¦Ã around the ZYZ axis is performed in the order from left to right. 






The general form of  is,

The joint angles of  can be obtained as



There are also multiple solutions here




Then consider the case of a special solution, that is, the solved  or . At this time, the above expression is degenerate, and only the sum or difference of the two angles can be obtained.  is usually selected.
When 


When 



At this point, the inverse kinematics of the 6-axis desktop robotic arm is solved. There are 8 sets of solutions for the first 3 axes and 2 sets of solutions for the last 3 axes. Here you need to limit the position according to the angle range of each axis of the actual robotic arm, and then select one solution as the solution result of inverse kinematics, whose group angle is within the limit range.



Now you have learnt the basic knowledge of kinematics algorithm, the forward kinematics and inverse kinematics of the 6-axis robotic arm. 
Chapter 3 The use of Mirobot 6-axis robotic arm
This chapter mainly introduces the basic use of the Mirobot 6-axis robotic arm, including the interface introduction of the host computer software, the installation of the host computer software, the connection, debugging, firmware upgrade and basic control of the robot arm to help readers to quickly get started with the operation, and to get ready for the programming operations later.
3.1 Introduction of WLKATAStudio
WLKATAStudio is a software dedicated to control the 6-axis robotic arm of the Mirobot desktop. The software includes multiple functions such as robotic arm command control, angle/coordinate control mode, point teaching, graphical programming, Python programming, writing, drawing, and firmware upgrade.
(1) Chinese and English switching function
After opening the software, click to set the language, select English or Chinese, confirm and restart (you can also click the "CN" setting in the green box in the upper right corner of the interface).

£¨2£©Introduction of setting interface 

a. Set the serial port: set the serial port and baud rate of the Mirobot Studio connected to the robotic arm (115200)
b. Drawing settings: set drawing speed (recommended default value)
c. Calibration: used to calibrate the robotic arm
d. Reset: reset all data of the robotic arm (recalibration is required after resetting)
e. Language: Set language and font (click OK after language setting to automatically restart the software to take effect, and click OK after font setting to manually restart the software to take effect) or click the "CN" or ¡°EN¡± button in the upper right corner of the interface to switch the interface between Chinese and English

f. End tool options: select the end tool used by the robotic arm: sliding rail/converyor belt mode 

g. Firmware: Update the firmware
3.2 Installation of WLKATAStudio
WLKATA Studio is a special control software that includes functions such as robotic arm command control, angle/coordinate control, point teaching, graphical programming, Python programming, writing, drawing, and firmware upgrades.
System environment requirements description (the installation guide uses Windows 10 as an example):
The Mirobot Studio control software supports the following operating systems:
Windows 7, Windows 8, Windows 10
macOS 10.10, macOS 10.11, macOS 10.12
Ubuntu 14.4 and above (no need to install CH340 driver)
Step 1: Download and install the CH340 driver
a. Log in to the official website cn.wlkata.com, select "Support-Download Center", and click "CH340 Driver" to download.

b. Click ¡°SETUP.EXE¡± after decompression.


c. Click "Install" in the pop-up interface, the driver will start to install, and a window will pop up after success. Then click "OK". 



Step 2: Download and install Mirobot Studio control software
a. Log in to the official website https://www.wlkata.com/, select "Support-Download Center", click " Wlkata Studio-Win-V1.018 (for WLKATA Mirobot with Multifunctional Box)¡± to download

b. Click ¡°Wlkata studio.exe¡± after unzipping. Open the WLKATA Studio interface as shown in the figure below.
Note: WLkata Studio file storage location cannot have Chinese characters

3.3 Robotic arm connection
Step 1: Click "WLKATA Studio.exe" in the WLKATA Studio directory to open the control software

Step 2: Connect the Mirobot robot arm
Use a USB cable to connect the robotic arm to the computer.

Power on the Mirobot robotic arm and press the power switch on the base of the robotic arm

Power on: Press the switch button on the side of the base of the Mirobot robotic arm, and the power indicator on the button will light up, that is turning on the power of the Mirobot robotic arm.

Step 3: Connect the Mirobot Studio to the robotic arm
Open the "Device Manager" window. You can find "USB-SERIAL CH340(COMX)" in "Ports (COM and LPT)", it means the driver is installed successfully. X in COMX represents the corresponding port number, and the figure below corresponds to COM5.

Open the Mirobot Studio software. Under normal circumstances, the WLKATA Studio host computer will automatically connect to the corresponding serial port of the Mirobot robotic arm. If it fails to connect, click the ¡°Settings¡± tab to set the "Serial Number" and "Baud Rate". After clicking "OK", "Connected" will be displayed in the upper left corner.

Step 4: Let Mirobot move
Before performing any control operations on the robotic arm, the robotic arm must be reset. Click the "Home" button in the upper right corner of Mirobot Studio, as shown in the figure. Then wait for the robot arm reset to complete.

The figure below shows the posture of the robotic arm after reset.

In the "angle control mode", the rotation of each axis of the robotic arm can be controlled through the "J1~J6" on the right side of the interface.

In "coordinate control mode", you can control the end coordinate position and attitude of the robot arm through the "X, Y, Z, RX, RY, RZ" on the right side of the interface.

3.4 Debugging of the robotic arm
Detailed steps of manual calibration:

Step 1: Turn on the power of the robotic arm, open the Mirobot Studio software, enter "M50" in the "Command Control" interface, and click "Send" to unlock each axis.

Step 2: Enter the "Settings" interface and click "Calibration-Start".

Step 3: In the angle control mode, control each axis to the corresponding position by adjusting the "J1~J6" on the right side.
Note: The 4th axis must pass the negative step to be effective, and the other axes can be adjusted through the nearest step. The 6th axis is the default position.
Step 4: After each axis of the robotic arm rotates to the corresponding position, enter the "Settings" interface again, and click "Finish".





Step 5: After completing the calibration, click ¡°Home¡±, the posture of the robot arm after normal reset is as shown in the figure below.

3.5 Robot firmware upgrade
Currently, only WLKATA Studio V1.014 and above versions support the firmware upgrade of the control software.
The firmware upgrade process:

Step 1: Use the USB data cable to connect the robotic arm to the computer, and turn on the power

Step 2: Open the WLKATA Studio software and enter the "Settings" interface, click "Update Firmware"

Step 3: Click "Upload" in the pop-up window to update the firmware

Wait for the Wlkata studio firmware flashing success prompt

Note: After the firmware upgrade is completed, the Wlkata studio software will automatically send the initial data of each axis before the firmware upgrade, and the robot arm can be reset directly. If the Wlkata studio software command control display bar does not send the initial data of each axis, it needs to be manually calibrated and then reset (refer to the tutorial "Mirobot Robotic Arm Calibration Tutorial").
3.6 Basic control of the robotic arm
(1) Angle/coordinate control mode switch
a. Angle control mode:
Step 1: Click the command control tab;

Step 2: Select "Angle Control Mode" at the control mode selection in Mirobot Studio, and it will be displayed as a white background highlighted state;

Click the "J1~J6", which is single-axis motion control button on the right side of Mirobot Studio, to control the six joints of the robotic arm to move independently. The movement speed of each axis can be adjusted through the "speed" button or input value. The step size of a single movement can be adjusted by clicking the "step" button, and the "sliding rail" button can directly control the movement of the sliding rail.
b. Coordinate control mode:
Select "Coordinate Control Mode" at the control mode selection in Mirobot Studio, and it will be displayed as a white background highlighted state.

Click the "X, Y, Z, RX, RY, RZ" control buttons on the right side of Mirobot Studio to control the position and attitude of the end actuator of the robotic arm. The movement speed of each axis can be adjusted through the "speed" button or input value. The step size of a single movement can be adjusted by clicking the "step" button. And the "sliding rail" button can directly control the movement of the sliding rail.




Now you have learnt the basic use of the Mirobot 6-axis robotic arm with the interface, installation, connection, debugging, firmware upgrade and basic control of the robot arm.

Chapter 4 "Teaching & Replay" mode of robotic arm
The operating environment of the robotic arm integrates a very powerful "Teaching & Replay" module. The core of the "Teaching & Replay" function is to manually adjust the teaching of the robotic arm first, and the robotic arm will repeat the same sequence of actions. What¡¯s more, the user can set the number of repeated executions without additional programming.
The Introduction of motion modes
The "Teaching and Replay" mode of the robotic arm provides three motion modes, namely line mode, fast mode, and gate mode, as shown in the figure below:

£¨1£©When choosing ¡°MOVL¡±, the robotic arm adopts interpolation algorithm, and the end effector moves to reach the target point in a straight trajectory, which is the shortest path.

£¨2£©When choosing ¡°MOVJ¡±, each joint moves from the joint angle corresponding to the starting position A to the joint angle of the ending position B. During the movement, the running time of each axis is required to be the same, so they reach the end point at the same time.

£¨3£©When choosing ¡°JUMP¡±, the robotic arm will first lift up to a certain height, then move to the top of the target point in a linear motion, and finally descend to the target point. The linear trajectory between the two points C and D is horizontal. 



Use of "Teaching & Replay" mode
Point teaching-replay steps:
Step 1: Click "Teaching Control" to enter the interface

Step 2: Select the motion control mode
In the angle control mode, record the position parameters of each axis; in the coordinate control mode, record the end effector¡¯s position and attitude parameters. Select the coordinate control mode here.

(1) In the control interface on the right side, control the robot arm to move to the specified position and click the "Add" button to add a point to record the current robot arm position.
(2) Select the corresponding fixture in the "Trigger" button and select the fixture state in the "Value" bar.

(3) Select the recorded coordinates and click the "Single-Step" button to debug and verify the single-step teaching.
(4) After recording multiple teaching actions, click ¡°Run¡± to play the teaching.
(5) Select the corresponding teaching point and click the "Delete", "Up/Down", and "Copy" buttons to delete, move up/down, and copy the teaching point.
(6) Click the "Undo" button to undo the previous operation.
(7) Click ¡°Paste¡± to paste the copied file in the next line of the currently selected teaching point.
4.3 Robotic arm move blocks
Through the above introduction, I believe that everyone has already mastered the use of the "Teaching & Replay" mode. We will use the "Teaching & Replay" mode to realize transporting blocks via robotic arm, to help you further understanding "teaching" & Replay¡± mode of the Mirobot robotic arm.
In this case, a fork tool will be used to smoothly move the "pallet" from the "ground" to the "shelf", as shown in the following figure:
Use the fork tool to smoothly move the "pallet" from the "ground" to the "shelf".

When handling the pallet, it is necessary to keep it as level as possible to prevent the goods from overturning or slipping. This requires easy adjustment of the posture of the fork tool. Therefore, this task is suitable for using the "coordinate control mode" to record the status of the points.
It is recommended to use the "fast movement" mode for the movement mode to move to each saved point, which runs faster and smoother.
£¨1£©Decline
When the fork is descending, adjust the posture to be horizontal. To avoid collision with the items on the pallet, move to point 1 firstly, and then adjust the posture of the fork. The origin of the fork tool coordinate system is at the center of the bottom. To save Enough flipping space, raise the Z coordinate of point 2.

£¨2£©Pick up
Lower the fork horizontally and extend it into the bottom of the pallet.

£¨3£©Lift
Lift the pallet and reduce the X coordinate to prepare for horizontal steering.

£¨4£©mobile
Adjust RZ, turn the fork face to the shelf and move it to the shelf position.
£¨5£©Discharge
Put the goods into the shelf, drop and withdraw.

£¨6£©Zero
Go back to zero position.

After recording, you can first click the single-step button to execute each stored point action in sequence. After checking that it is correct, click the run button to let the robotic arm execute the stored action. By setting the number of repetitions, the robotic arm can repeat the movement

Now you have learnt the "Teaching & Replay" module, basic motion modes, and how to use this module with motion modes to control the 
Chapter 5 Blockly programming control of robotic arm
In June 2012, Google released Google Blockly, a fully visual programming language. Google Blockly is similar to MIT's children's programming language Scratch. Users can build applications with blocks of graphic objects in a way like Lego toys. Each graphic object is a code block. It can be spliced together to create a simple function, and then the simple functions are combined to construct a program. The whole process only requires the dragging of the mouse, and there is no need keyboard tapping.
5.1 Introduction to WLKATA Studio Blockly programming instructions
WLKATA Studio divides Blockly programming instructions into ten categories: program, motion, logic, loops, math, text, list, color, variables, and function.
 
In addition, Mirobot supports Python programming control. When sending the python program on the right interface to Mirobot in the python programming environment, it can achieve the same function.
Add instruction: Under the instruction bar, move the mouse to the instruction block which you want to add, and click the left button of the mouse to complete adding instruction, when the edge of the instruction block turns orange.

Delete instruction method 1: Move the mouse to a single instruction block or the first block of multiple instruction blocks, press the left mouse button, and drag the instruction to the trash can icon on the lower right side to delete a single or multiple instructions.
 
Delete instruction method 2: Move the mouse to a single instruction block or the first block of multiple instruction blocks, and click the left mouse button. When the edge of the single instruction block or the first block of multiple instruction blocks turns orange, press the "Delete" key on the keyboard to delete the command.
5.1.1 Action bar
The simple and complex control of Mirobot can be controlled through the instructions in the action bar. The action bar can also control the movement of the slide rail, conveyor belt, and end clamp.
 
The main instructions include:
 Reset: The reset command module controls the mechanical arm to return to the initial state after various calibrations.
 Zero position: quickly return to the zero position after reset.
 Speed of movement: set the maximum movement speed of the robot arm, slide rail, and conveyor belt.
 Delay time: set the action delay time.
 Move command: move to the corresponding coordinate in the coordinate mode. X, Y, Z represent the space coordinate, A, B, C represent the attitude of the end clamp, and the speed represents the speed of the robot arm moving to the specified point.
 Move forward/backward/left/right/up/down.
 SuctionCup (on/off): control the suction cup to suck/release objects.
 Gripper (on/off): control the servo gripper to clamp/release objects.
 Slider/conveyor command: control the slide rail or conveyor belt to move a certain distance at a specified speed.
 Multi-axis rotation command (Rotate angle): control the rotation of each axis of the robotic arm at a certain angle at the same time.
 Single-axis rotation command (Turn ¡­ to ¡­): individually control the rotation of each axis of the robotic arm to a certain angle.
Example: Use the Mirobot robotic arm to lift a block from point A to point B through the suction cup.
 
5.1.2 Logical command bar
The trigger condition of Mirobot operation can be set through the logic command bar, which mainly includes the following commands:
 
 If (condition 1) do (action 1)
 Set (variable 1) >/</= (Parameter 1)
 (Condition 1) and/or (Condition 2)
 Not (a certain condition/value/state)
 judged as (true/false)
 null: empty value
 If condition is true, execute (A), and execute (B) when it is false 
Example: Judge whether the infrared sensor detects a block (1: detected, 0: not detected). When the infrared sensor detects the block, the Mirobot robotic arm lifts the block from point A to point B through suction cup.
 
5.1.3 Loops command bar
Through the instructions in the loops command bar, a simple or complex program can be cycled multiple times or continuously to control the Mirobot.
 

The loops command bar mainly contains the following commands:
 Repeat the instruction () times
 run the program repeatedly, while the conditions are met
 Set variable i, and set repeated execution of the program () times
 Break out of the loop
Example: The program is repeated 10 times and repeat the instruction message while the condition is met.
 
5.1.4 Math command bar
By assigning values to Mirobot¡¯s specific parameters, accessories, and sensors, the robot arm or accessories can reach a specific state of motion.
 
Common command blocks include:
 Assigned as (0/1)
Example: Set the infrared sensor parameter to 1
 
5.1.5 Text command bar
The text instruction bar mainly uses text to annotate the program. It can facilitate students to read and clearly understand the program logic. And it is very useful for complex and long instruction programs.
 
The commonly used instruction blocks are:
 Output "comment content"
Example: Annotate the command function before the command
 
5.1.6 List command bar
Creating a list can cover all the elements you use in the program, instead of defining them individually each time. The most used function in this course is to create different color lists for color sensors, and to control the robotic arm to execute different commands according to different colors.
 
Common instruction blocks:
 Create a list (element 1, element 2, element 3...)
Example: Create an instruction list covering several colors, and perform different operations based on the judgment of different colors
 
5.1.7 Variable command bar
In the variable command bar, users can define new variables according to their own requirements.
 
Common instruction blocks:
 Create variables (list name, sensor)
Example: Create a list of "sensors"


5.2 Blockly programming application

In industrial applications, grabbing and releasing blocks multiple times will be very convenient through only one time programming. According to the different handling sites of the robot arm, the following positions need to be set for one grab and release of the robot arm:
Midpoint (point M in the picture, the midpoint may not be needed, or more than one may be needed, which will be explained in detail later)
Above the grab point (point A)
Grab point (point B)
Above the release point (point C)
Release point (point D)
5.2.1 Blockly grab and release in simple scenarios
Key instructions
 Reset
 Move
 Delay
 Suction cup
 Text annotation
Hardware and software
 Mirobot Robotic Arm Standard Edition
 Workbench
 WLKATAStudio software
 A blue square
Preparation
(1) Connect the Mirobot power supply and connect the Mirobot robot arm to the computer with a USB cable (to be completed under the guidance of the teacher);
 
Install the single-finger suction cup on the end of the robotic arm;

Connect the robot arm, expansion module, and air pump
 
Open the WLKATAStudio software and press the power button of the robotic arm (here the robotic arm will be automatically connected, and the red circle ¡°!¡±will automatically change to green "¡Ì")
 
For the first connection, you need to reset the robotic arm. Click the "Homing" button with the mouse, and Mirobot will automatically reset (the correct pose of the Mirobot robotic arm after resetting is as shown in the figure below)
 
Select the Blockly interface in the WLkata Studio software (including the instruction bar, Blockly instruction block display area, Python code display area, interface control area, instruction block delete and recovery, and robotic arm position control area).
 
Build Blockly instruction 
In order to realize simple block handling and release, we will use the command block under the "Motion command bar".
 
Under the "action command bar", there are many command blocks for controlling Mirobot robot arms, slide rails, conveyor belts, end-fixtures, etc. We will use four blockly command blocks: zero position, delay time, move to, and suction cup.
 
(1) In the first step, we need to find the coordinates of X, Y, and Z corresponding to the positions of the grab and release points. Here we can use the X, Y, Z, RX, RY, RZ buttons in the Mirobot control area on the right to find the coordinate values of the A, B, C, and D positions. Where X, Y, and Z are used to adjust the end position of the Mirobot robotic arm (At this time, the air pump will always maintain a downward attitude), RX, RY, and RZ are used to adjust the position of the suction cup.
 
Because there are no obstacles in the area between grabbing and releasing, we don't need to set the middle point M, and let the Mirobot robotic arm directly move the block from point A to point C.
 
(2) The second step is to obtain and record the location. The corresponding values of X and Y are shown in the figure below. Adjust the corresponding parameters of Z to go upwards for increase and downwards for decrease.
 
In order to easily carry the blue block, we can find that the X and Y parameters of point A and B are the same, and the X and Y parameters of point C and D are the same. Point B is grabbing point. The Z value when touching the block is taken as the Z value of point B. Similarly, when Mirobot places an object to point C and just touches the bottom panel, the Z value displayed in the Mirobot control area is taken as the Z value of point C. Finally, we want the robotic arm to return to the zero position, so at the end we record the home position again. Here, because we did not change the posture of the end suction cup, RX, RY, and RZ are all 0. Record the parameters in the following table:
(3) In the third step, after recording the value of the corresponding point, we start programming in Blockly.
First, we use text annotation instructions to explain the points we set, so that we can modify them later.
 
Then we move to point A by adding a move instruction block.
 
After moving to point A, we add a text annotation. Move to point B and enter the coordinate value of point B via the move command block. It is not difficult to find that the position of A is directly above B, so the value of Z is relatively big.
 
Then we start to turn on the air pump to suck the blue block. After adding the suction cup command block, we can click the status bar behind the suction cup to set the state of the suction cup to "on" or "off". Here we set it to "on" to turn it on suction cup.
 
We need to add a delay after turning on the suction cup, because it takes a certain amount of time to start the air pump to suck the block. To ensure that the suction cup can suck the block smoothly, we add a 1 second delay here.
 
Then we move the block from point B up to point A again by adding a move instruction block. Here we add a text note: move it up to point A.
 
Then we add a comment and move the block from point A to point C and then down to point D.
 
Here we can see that the value X of point C is smaller than that of point A, and the value Z of point D is smaller than that of point C. It is not difficult to draw the same conclusion by referring to the position map in step (2).

After moving to point D, we need to close the suction cup to release the block. To ensure that the release position of the block is accurate enough, we need to add a 2ms delay after closing the air pump. Here we only need to click the number after the delay and input the corresponding delay time.
 
Finally, we need to return to the zero position, and we can add the "zero position" instruction block to complete the entire handling operation. After completing all the instruction block operations, we can see the "New", "Open", "Save", and "Save As" commands on the top. We then choose "Save", and next time we can directly open the saved blockly command to complete the corresponding operation.
 
£¨4£©The fourth step is testing. After completing all the instructions, we click "Run" in the upper right corner to test whether we can smoothly move the blue block from point B to point D.
 
python code learning
After completing all the blockly programming above, we can see the corresponding python code in the python code display area. We will learn how to use python programming to implement Mirobot to grab the block from point B to point D.
 
(1) In the first step, we need to import two function modules PythonWrap and time function blocks, because we need to send the language that Mirobot can interpret to the robotic arm through python. Importing functions in python need to use "import". For example, when we want to calculate "1+1", we first need to import the "math" function.
(2) In the second step, we need to output our comments in python, here we will use print (""). Print will output the content in double quotes, and we can also pass "#" or "'''note content'''" to annotate content in Python. such as:
The above three methods can play the effect of annotation in python programming, and you can choose according to your own habits.
(3) Then we will program based on the recorded coordinates of points A, B, C, and D. Here note that Gcode is a function under the PythonWrap function block, so use PythonWrap.Gcode. "m20 g90 g01" refers to the motion control mode of the Mirobot robot arm (coordinate control mode). The air pump opening and closing instructions are the fixed function. Corresponding related point codes are:
(4) Time delay function-time.sleep(2) and return to zero position
5.2.2 Blockly programming realize cyclic handling
In daily life and industrial applications, a robotic arm is often used to perform multiple cycles of an action. For example, using a robotic arm to hold a fan back and forth. What about we realize the cycle for simple handling?

This means that we need to move the block from point B to point D and then move the block from point D to point B.
Key instructions
 Reset
 Move
 Delay
 Suction cup
 Loops
 Text annotation
Hardware and software
 Mirobot Robotic Arm Standard Edition
 Workbench
 WLKATAStudio software
 A blue square
Preparation
First we record the coordinate value of the corresponding point. Record the parameters in the following table:
blockly instruction build
(1) First, we open the blockly file, as shown in the figure. we open it according to the steps 1-2-3.
 
(2) Then we add a movement command block, which is to move from the "zero position" to point C. And then add another block to move to point D.
 
(3)Then we turn on the air pump, add a 1ms delay and move the block from point D to point C, then to point A, and finally to point B.
 
(4) Then we turn off the air pump, add a 2 seconds delay, and "return to zero".
 
(5) Finally, in order to realize the loop, we add the loop instruction under the "loop instruction bar". Click the first instruction block of the above instruction block with the left mouse button to drag it under the loop instruction block. We can set the number of cycles that we want.

 
Python codes
Similarly, to make the Mirobot robotic arm understand the Python language, we first need to quote the PythonWrap and time function blocks. The specific Python code is as follows:
What needs to be explained is the for function, for count in range (10): indicates that the count is from 0 to 9, not including 10, and the value of count is increased by 1 every time it loops.



Now you have learnt Blockly programming, basic blocks, and how to develop algorithms with Blockly to control the robotic arm. 
Chapter 6 Python programming control of robotic arm
In the last chapter, we mainly talked about the Blockly programming control of the robotic arm. I believe that you can already program simply and control the robotic arm. In this chapter, we will introduce how to use the very popular programming language-Python, another programming control method, to program and control the robotic arm. The WLKATAStudio host computer software integrates a Python programming interface, and you can use the Python language in the interface to call the API functions of various robotic arm motion instructions to realize the Python programming control of the robotic arm. 
6.1 The origin of Python
The author of Python is Guido, Dutch. In 1989, in order to pass the Christmas holiday, Guido began to write a compiler for the Python language. The name Python comes from Guido's beloved TV series Monty Python's Flying Circus. He hopes that this new language called Python can meet his ideals: to create a comprehensive, easy-to-learn, easy-to-use, and extensible language between C and the shell. As a language design lover, Guido has already tried to design languages.

In 1991, the first Python compiler was born. It is implemented in C language and can call C language library files. From its birth, Python has core data types£¬ including classes, functions, exception handling including tables and dictionaries, and it also has a module-based expansion system.
A lot of Python syntax comes from C, but it is strongly influenced by the ABC language. Some regulations from the ABC language are still controversial to this day, such as mandatory indentation. But these grammatical rules make Python easy to read.
On the other hand, Python cleverly chooses to obey some conventions, especially C language conventions, such as assignment operation. Guido believes that if something is established on "common sense", there is no need to be overly entangled. Python has been especially concerned about scalability from the beginning. Python can be extended on multiple levels. From a high level, you can directly import .py files. At the bottom, you can reference C language libraries. Python programmers can quickly use Python to write .py files as extension modules. But when performance is an important factor to consider, Python programmers can go deep into the bottom layer, write C programs, compile them into .so files and import them into Python. Python is like using steel to build a house. First, a large framework is specified. The programmer can expand or change quite freely under this framework.
The original Python was developed entirely by Guido himself. Then, Python is welcomed by Guido colleagues. They give feedback quickly and participate in the improvement of Python. Guido and some colleagues form the core team of Python. They spend most of their free time hacking Python. Subsequently, Python expanded beyond the research institute.
Python hides many details on the machine level and hands them to the compiler for processing. It highlights the logic level programming thinking. Python programmers can spend more time thinking about the logic of the program, rather than the specific implementation details. This feature attracted many programmers, and Python started to become popular.
6.2 WLKATAStudio Python Programming Guide
WLKATAStudio has encapsulated the motion control instructions of the robotic arm into Python API interface functions. The user can program in Python in the host computer interface, call the corresponding API functions. The API interface functions help to issue G codes that the robotic arm can recognize, to realize Python programming control of the robotic arm.
6.2.1 Python programming interface explanation
Open WLKATAStudio, and enter the Python programming interface. The upper yellow rectangle in the figure below is the code file operation area, the red rectangle on the left is the Python API option area, and the green frame on the right is the Python code editing area.
Note: The default 8 lines of code in the code editing area cannot be changed!

(1) File operation area

 New: Create a new Python file
 Open: Open a local file
 Save: save the file, save to the data directory by default
 Save as: save the modified file as
 Run: Run the code in the workspace
£¨2£©Python API options area
The whole options areas are divided into 3 categories (Action, Robot joint mode, Coordinate mode), a total of 21 functional modules, double-click to directly add and use.

a. Action options
Homing
api.home_simultaneous():
execute the reset action of the Mirobot robotic arm
S
Unlock
api.unlock_shaft():
unlock the joints of the robotic arm

Zero position
api.go_to_zero():
The Mirobot robot arm moves from the current position to the zero position in the angle control mode

Open the suction cup
api.suction_cup_on():
Turn on the air pump

Close the suction cup
api.suction_cup_off():
Turn off the air pump

Slider moveto
api.slider_move_to(0, 1500):
move the slide rail to the specified position

Conveyor move
api.conveyor_move_to(MoveMode.relative, 0, 1500):
Move the conveyor to the specified position

Set delay time
api.set_delay_time(1):
execute the next action after a specified time delay

b.Robot Joint Mode
Send each axis to a specific position
api.go_to_axis(0,0,0,0,0,0):
The Mirobot robot arm moves from the current position to the specified position in the angle control mode

Increment each axis a specific amount
api.increment_axis(0,0,0,0,0,0):
the Mirobot robot arm moves from the current position to the specified position

Moving axis
api.move_to_axis(MirobotJoint.Joint1, RevolveDirection.cw, 0):
individually specify an axis to rotate in a specified direction by a specified value

c.Coordinate mode
Linear move to a Cartesian position 
api.go_to_cartesian_lin(Motion.MOVJ,202,0,181,0,0,0):
Mirobot robot arm moves from the current position to the specified position in coordinate control mode

Linear increment in Cartesian space 
api.increment_cartesian_lin(Motion.MOVJ,0,0,0,0,0,0):
Mirobot robot arm moves from the current position to the specified direction by the specified number of coordinates

Directional movement:
api.direction_mobility(MoveDirection.forward, 0):
The Mirobot robot arm moves from the current position to the specified direction by the specified number of coordinates

Door track movement
api.jump_move(MoveMode.relative, 0, 0, 0, 0, 0, 0)
move to the specified coordinate point on a door-shaped trajectory

Arc trajectory movement
api.set_arc_move(MoveMode.relative, RevolveDirection.cw, 0, 0, 0, 60)
move in an arc trajectory


6.2.2 Python programming example
First, write a Python program to control the robotic arm to achieve simple motion. The code is as follows:
This code will first reset the robot arm, wait for 15 seconds, set the motion speed of the robot arm, then set the first axis rotate 30 degrees left and 30 degrees right in the loop function, and finally return to the zero position.
6.3 Python controlled robotic arm palletizing
In this section, we will use robotic arm Python programming to achieve block palletizing. First, we need to prepare a servo gripper to install on the end of the robotic arm, and a robotic arm expansion board to control the servo gripper.

Then, open the Python programming interface of the host computer, enter the following program, and click ¡°Run¡±to achieve. The program is simple. After the reset delay of the robot arm is 5 seconds, the gripper at the end of the robot arm moves to the position of the block, open the gripper to grab the block, and close the gripper to place it down.






Now you have learnt Python programming, basic API functions of various robotic arm motion instructions, and how to develop algorithms with Python to realize the control of the robotic arm.

Chapter 7 Mirobot motion control based on ROS
This chapter covers a programming language implementation to control the robot arm via ROS (robot operating system). The functional modules, such as path planning, motion control, are developed in ROS and the control commands are executed by the controller on the robot arm. 
7.1 ROS Introduction 
With the rapid development of hardware technology, the design and fabrication of robotics have become complex and sophisticated, posing great challenge to the software development of robotics systems. Large variety of robotic platforms and hardware components makes demands of the reusability and modularization of the software. Currently, software development for robotic applications is behindhand compared to the hardware development. To boost the growth of robotic software system, in recent years, a variety of excellent robot software frameworks have been produced, which pave the way for software development. One of the them is ROS (robot operating system).
ROS is a flexible framework to write programs for robots. It integrates a large number of tools, libraries, and protocols, and provides functions alike a PC¡¯s operating system, including hardware abstract description, low-level driver management, process management, message transfer, and software release management, etc. These tools simplify program development in various robot platforms.
ROS was initially developed and used in the PRP (Personal Robots Program) that was a collaboration project by Stanford University¡¯s Artificial Intelligence Laboratory and Willow Garage. ROS had been maintained by Willow Garage after 2008. PR2 was one of the mobile robots developed by this project, and it is able to perform incredible tasks such as playing billiards, plugging in sockets, folding clothes, and making breakfast. The versatile PR2 drew worldwide attention and its core function modules were developed in ROS. In 2010, Willow Garage open sourced the ROS framework which has become the most popular robotic software framework in numerous robotics applications. 
7.1.1 ROS features
The core of ROS¡ªdistributed network, uses TCP/IP-based communication, realizes point-to-point loosely coupled connection between modules, and supports several communication mechanisms: 1) topic-based asynchronous messaging; 2) service-based synchronous messaging; 3) memory sharing on the parameter server, etc. In summary, ROS has the following features:
1. Point-to-point design
In ROS, each process runs in the form of a node. The messages between nodes are transmitted from the publishing node to the receiving node through an RPC transmission system. This point-to-point design can shift the computational expensive functions (e.g. positioning and navigation) to processes implemented in different devices; so, it can be conveniently adapted to multi-robots scenario.
2.Multi-language support
To support more applications for transplant and development, ROS is designed as a framework structure with weak language dependency. ROS uses a concise and neutral language to describe the message interface between nodes, and it generates object files for message definition with the same language used in compilation. Many different languages such as Python, C++, Java, Octave, and LISP are currently supported, and these languages can also be used to program different modules.
3. highly-modularized architecture 
In the existing robot applications, software reusability is a critical but unsolved problem. Many drivers, application algorithms, and functional modules were developed too complex to be transplanted and re-developed in other applications. The modularity of the ROS framework allows each functional module to be compiled separately, and the unified message interface conveniently makes the modules reusable. Meanwhile, in the ROS community, there are many open-source projects that transplant and integrate well-known libraries, such as OpenCV, PCL (Point Cloud Library), etc. Developers can utilize these rich resources to boost their robot applications development. 
4. Powerful toolkits
Friendly visualization tools and simulation software are vital for the development of mobile robots. ROS provides a versatile 3D visualization tool¡ªrviz (Robot Visualizer), which encapsulates the basic components, like point cloud map, robot, trajectory, coordinate system, and displays them in a 3D scene. In addition, ROS integrates a message viewing tool and a simulation tool to support debugging and testing for robotics development.
5. Free and open-source
ROS compiles with the BSD license which gives users great freedom, allowing them to modify and redistribute the source code, even for commercial purposes. The open source code in ROS is classified by its maintainers: 1) the core modules are maintained by Willow Garage; 2) the peripheral modules are maintained by developers in the ROS community. In just a few years, the number of ROS software packages has increased exponentially. Developers can download and reuse a great number of pivotal modules to accelerate the development of robot applications.
7.1.2 ROS Architecture 
Shown in the figure, ROS architecture has three layers: OS, middle and application 

1.OS layer
ROS is not a standalone system, and it builds on the Linux system to provide some functions to acts like an operating system. Therefore, ROS is best implemented in the Linux-based operating systems like Ubuntu, macOS, Arch, Debian etc.
2. Middle layer 
Linux is a general operating system for PC, and it does not provide special middleware functions for robot systems. Therefore, ROS provides many functions in middle layer. The most important part is the communication system that is developed upon the TCP/UDP network and re-encapsulated with TCPROS/UDPROS to support publish/subscribe, client/server and other operations for data transmission in multiple communication mechanisms.
On top of that, ROS provides many other modules such as data type definition, coordinate transformation, motion control, etc., which are callable by interfaces in the application layer.
3. Application layer 
At the application layer, ROS needs to run a Master node to manage the runtime environment for ROS. Due to modularity, the ROS packages are run independently as nodes and the nodes are communicated with each other via message interfaces. Therefore, to utilize a package in ROS, developers do not need to understand and alter the implementations inside a node but handles its interfaces, significantly reducing the development load. 
As shown in the figure, from the perspective of system implementation, ROS can be divided into three levels: file system, communication graph, and open source community.
 
Communication graph/diagram demonstrates the data pipeline from one node to another. A running program is like a graph in ROS, the messages (data) are like edges and the processes handling the data are nodes. There are four important concepts: node , message, topic, and service.

1. Node
Nodes are processes that run the functional modules and handle the data to perform certain tasks. Code modularization advances ROS¡¯s utilization: a system is typically composed of multiple nodes where the nodes are referred as "software modules". The node mechanism makes the ROS-based program being vividly reviewed and monitored runtime: drawing end-to-end communication graph as a diagram as shown in the following figure. 
 
2. Message
Communication between nodes is realized via message transmission. Each message is a data structure, and it supports standard data types (integer, floating point, Boolean, etc.), nested structures, and arrays (similar to C language structure struct). In addition, it can also be defined by the developers according to the application needs.
3. Topics
Messages are delivered in a Publish/Subscribe (see figure) manner. A node publishes/subscribes messages for specific topics. There may be multiple nodes simultaneously publishing or subscribing to messages on the same topic. 
 
4. Service
Although the topic-based publish/subscribe mechanism is very flexible, it is not suitable for synchronous data transmission since it broadcasts the messages for multiple publishers and subscribers. Instead, the service mechanism restricts the data transmission in a one-to-one mode, like a web server. Each service is coupled with a name and at any time, only one node can use the service name to send/receive data to the node that provides the service. 
5. ROS Master node
The runtime environment of ROS is managed by a node, called ROS Master. It registers call-back functions and interfaces between the nodes in runtime through remote procedure calls (RPC). Without ROS Master, a node cannot find other nodes, exchange messages, and call services. When ROS is running, all the nodes communicate with the ROS Master to register their topics and services, and the Master node stores the registration information of topics and services for ROS nodes to call the remote functions and send/receive messages. 
7.2 The principle of communication between Mirobot and ROS
7.2.1 Mirobot communication principles
Mirotbot is a desktop robotic arm. It uses serial communication, and the host PC controls its movement by sending specific commands via the serial port.
One example is shown below:  
m20g90g01x202y0z143a0b0c0F2000
Note: The letters in all instructions are not case sensitive, and they can be either uppercase or lowercase letters.
The meaning of each part of the command:
1.m20/m21¡ª¡ªcontrol mode of Mirobot 
m20: Move the end effector in the Cartesian coordinate system£» 
m21: Rotate Mirobot around its 6-axes with six input angles 
2.g90/g91¡ª¡ªrotation model
g90: absolute movement£¬the rotation angles are defined relative to the global (initial) coordinate system£»
g91: relative/incremental movement£¬the rotation angles are defined relative to the body (current) coordinate system
3.g0/g01¡ª¡ªInterpolation selection
g0: fast movement without linear interpolation£»
g1: slow smooth movement with linear interpolation;
4.x202y0z143a0b0c0¡ª¡ªThe values of (x,y,z): (202, 0, 143)
In m20 (Position mode), xyz is followed by the coordinate values, and abc is followed by the RPY angle value. The position xyz and the Euler angles abc indicates the pose of the end effector. g90 represents absolute movement model, and the position values are defined in the global coordinate system. g91 represents relative movement model, and the position values are defined in the body coordinate system.
In m21 (Rotation mode), xyzabc specifies the euler angles for the 6-axes (Fig. 1). g90 represents absolute movement model, and the angles are defined in the global coordinate system. g91 represents relative movement model, and the angles are defined in the body coordinate system.
Note: The default values of the input parameters are 0, meaning the movement or rotation will not happen along a certain axis if its value is not specified. For example, if we only want to move the end effector along the Z axis about 10mm downward, the parameters for X and Y axis can be ignored, and the command is:
m20g91g01z-10F2000
Rotating the Mirobot with certain angles along the 6-axes with the command like: 
M21G90X{1}Y{2}Z{3}A{4}B{5}C{6}
M21: rotation mode, and it is Mirobot¡¯s default state after powering on.
In the instruction, X{1} ,Y{2}, Z{3}, A{4}, B{5}, C{6} represents the rotation angles around the 1-6 axes about 1,2,3,4,5,6 degrees, respectively. 
7.2.2 Communication between ROS and Mirobot
There are two methods to control the Mirobot with ROS:
Method 1. 
We can use the rosserial_arduino package to run a ROS node in the Mirobot¡¯s arduino microcontroller. This node subscribes to a joint node which publishes the joints¡¯ Euler angles. Then it creates and executes the controlling commands to with the received angular values. This method needs to modify the firmware code on the Arduino microcontroller by implementing a ROS node.
To verify this method, we created a ROS node in the arduino board as and made it subscribe to the /joint_states topic. In the call-back function, we analyzed the received message via the topic /joint_states, and sent each angle value to the motor controller of the joints via serial port 1. In addition, we printed out the angular values received from a host-PC via the /joint_states topic. 
Arduino¡¯s code is shown below£º
Connect serial port 0 and 1 of Arduino to a host-PC. The communication between Arduino and the host-PC is through ROS. 

To use rosserial_arduino, first, we need to convert the host's arduino serial port 0 to a virtual machine (run with Ubuntu). 

Then authorize permissions to the arduino serial port system connected to Linux, otherwise an error will be reported later
sudo chmod +777 /dev/ttyACM0	
Note: The general arduino board name is ttyACM0, but some arduino boards use the CH340 chip, at this time the name needs to be changed to ttyUSB0
Run roscore by typing the following command in terminal:
roscore
rosrun rosserial_arduino serial_node.py _port:=/dev/ttyACM0

Then we run the rviz with the previously exported urdf file£º
roslaunch ~/catkin_ws/src/test_14/launch/display.launch

Then open the serial port debugging assistant in the host-PC, and the four angle values are printed out in the serial port 1 (sent by Arduino).

The communication graph/diagram is shown below£º

Method 2.
Without adding ROS node in the arduino microcontroller, we can add a node in the host-PC to generate the g-command (explained in section 7.2.1) and send it to the Mirobot directly. 

First, creates a new src folder under the mirobot_urdf_2 folder. Next, create a new node in this src folder. Here, we use C++ language to create this node and name it as mirobot_write_node. The source code is shown below:  
This node subscribes to the /joint_states topic, and calls the callback function angle_write_callback() to obtain the angular values of the arm¡¯s joints. Next, it generates the command by formatting the angular values with the principles explained in section 7.2.1. Finally, it sends the commands to the Mirobot via the serial port. Note that serial.h is located in the ROS installation directory and is a serial function library provided by ROS. 
At this time, it cannot be successfully compiled because we added the source code file without declaring it in the CMakeLists.txt file. 
Then modify CMakeLists.txt by£º
Then compile in the catkin_ws directory 
After compilation, connect the Mirobot to the computer.¡£

Authorize permission to the arduino serial port that is connected to the host-PC with Ubuntu system 
sudo chmod +777 /dev/ttyUSB0	
Note: Mirobot's serial communication uses the CH340 chip, and the name of the serial device is ttyUSB0.
Then run roscore: (you can also skip it by running roslaunch command which will automatically run roscore if it is not started)
Roscore (optional)
roslaunch mirobot_urdf_2 display.launch
Drag the progress bar for the angular values of each axis on the GUI, and you shall see that Mirobot rotates accordingly. 
7.3 Move the end effector via ROS(C++) 
Given the model (urdf) of the Mirobot, we can use ROS to control a virtual Mirobot with various complex movements. However, our goal is to control a real Mirobot via ROS, this section mainly covers how to establish the communication and control between ROS and a real Mirobot. 
The pipeline is shown in the following figure. A controller node is written in C++ to use Moveit! to compute the joint angles, and then it publishes the angles with the topic /joint_state. Then another node, mirobot_write_node, that subscribes to this topic, receives these angular values, formats them into a G node command, and sends the command to Mirobot through the serial port. 


7.3.1 Joint movement
The code for joint movement is stored under the src folder. In order to run it, first, we need to run
roslaunch mirobot_moveit_config demo.launch
It loads the Mirobot¡¯s model. Next, opens another terminal, run
sudo chmod +777 /dev/ttyUSB0
This authorize the arduino serial port permissions for writing and reading.  Then start the mirobot_write_node by 
rosrun mirobot_urdf_2 mirobot_write_node
Now, the real Mirobot is ready to receive commands to move. Finally, open another terminal, run 
roslaunch mirobot_demo moveit_fk_demo
Open rviz to display the Mirobot and move it following the commands sent by mirobot_write_node. The virtual Mirobot should move similarly to the real Mirobot. The code is shown as below
7.3.2 Linear movement in Cartesian space
First, a list of waypoints is needed for path planning in the Cartesian space. To understand the specific meaning of the controller program, such as moveit::planning_interface::MoveGroupInterface, please search it in Google for further research. Next, open a terminal and run 
roslaunch mirobot_demo moveit_cartesian_demo
This shall control the real Mirobot and the virtual Mirobot in rviz to move along a straight line. The code is shown below:





Now you have learnt the programming language implementation to control the robot arm via ROS (robot operating system) and how to establish the communication between ROS and Mirobot. 


Chapter 8 SDK of Robot Arm
SDK (software development kit) is a collection of development tools used by software engineers to develop application packages, software frameworks, hardware platforms, operating systems, etc. To support re-development of the Mirobot, we build a development environment and create a SDK with some common functions declared in the API (application programming interface). The figure below shows the Mirobot¡¯s SDK and Mirobot.py, which declares the functions such as communication interface, motion control functions, parameter setting commands, etc. The functions declared in Mirobot.py are callable by users for re-development.


8.1 API Functions
API (application programming interface) declares some pre-defined functions and it allows developers to access to these functions without exposing their implementation details (source code). Some functions declared in the Mirobot¡¯s API are shown and explained below: 
mirobot.go_to_zero(speed=None, wait=None)
Move the end-effector to its starting pose (position and orientation)
mirobot.go_to_cartesian_lin(self, x=None, y=None, z=None, a=None, b=None, c=None, speed=None, wait=None)
Absolute movement: move the end-effector to position (x,y,z) in the global coordinate system of the Cartesian space. The movement is slow and smooth with linear interpolations between the starting point and the end point. 
mirobot.go_to_cartesian_ptp(self, x=None, y=None, z=None, a=None, b=None, c=None, speed=None, wait=None)
Absolute movement: fast move the end-effector to position (x,y,z) in the global coordinate system of the Cartesian space. The movement is fast without interpolations between the starting point and the end point.
mirobot.go_to_axis(self, x=None, y=None, z=None, a=None, b=None, c=None, d=None, speed=None, wait=None)
Absolute movement: rotate the joints along their axes (6 of them) in the initial joint coordinate systems
mirobot.increment_cartesian_lin(self, x=None, y=None, z=None, a=None, b=None, c=None, speed=None, wait=None)
Relative movement: move the end-effector to position (x,y,z) in the body coordinate system of the Cartesian space. The movement is slow and smooth with linear interpolations between the starting point and the end point.
mirobot.increment_cartesian_ptp(self, x=None, y=None, z=None, a=None, b=None, c=None, speed=None, wait=None)
Relative movement: fast move the end-effector to position (x,y,z) in the body coordinate system in the Cartesian space. The movement is fast without linear interpolations between the starting point and the end point.
mirobot.increment_axis(self, x=None, y=None, z=None, a=None, b=None, c=None, d=None, speed=None, wait=None)
Relative movement: Rotate the joints along their axes (6 of them) in their current joint coordinate systems
mirobot.increment_slide_rail(self, d, speed=None, wait=None)
Relative motion of slide rail and conveyor belt
mirobot.go_to_slide_rail(self, d, speed=None, wait=None)
Absolute motion of slide rail and conveyor belt
8.2  Application of Mirobot SDK
The following two simple examples introduce the specific application of the Mirobot SDK to help readers with deeper understanding.
8.2.1 Robotic arm reset
Here shows the implementation code for Mirobot resetting. The reset command is called, and corresponding G code of the reset command is executed to move the robotic arm to its starting pose. Meanwhile, the status of the Mirobot is updated and printed. 
8.2.2 Movement in Cartesian Space
Here we introduce the point movement of the Mirobot in Cartesian space. After resetting, the robotic arm is moved three points A, B, and C respectively, and prints the position of the Mirobot¡¯s end effector at points A, B, and C. The following code mainly calls the reset command and fast motion command provided in the API.





Now you have learnt the SDK of Mirobot Robotic Arm and the application of the Mirobot SDK.  

Chapter 9 Robotic Arm Control Based on OpenCV 

OpenCV is a BSD-licensed cross-platform computer vision and machine learning software library that can run on Linux, Windows, Android, and Mac OS. It is lightweight and efficient, and it consists of a series of C functions and a small number of C++ classes. Meanwhile, it also provides interfaces to other programming languages such as Python, Ruby, MATLAB, etc., and offers numerous algorithm implementations in image processing and computer vision.
Using OpenCV, the Mirobot six-axis robotic arm can acquire image information to perceive the external world, from which it can detect and locate the target objects. Furthermore, we can extend the development of the Mirobot by using deep learning. 
9.1 Introduction of Vision Kit
The vision kit of the robotic arm mainly includes a camera, a robotic arm, a Jetson Nano development board, a mouse, a keyboard, a display, a SD card, a camera calibration board, and a bracket, etc. Since many image processing functions in OpenCV can be executed efficiently with a GPU, the Jetson Nano development board is used as a host pc. 

NVIDIA released the Jetson Nano development kit at the 2019 NVIDIA GPU Technology Conference (GTC). This is a $99 computer that is now available to embedded designers, researchers, and DIY manufacturers. It is compact and easy to use. The powerful functions of modern AI are provided on the platform used. Complete software programmability. Jetson Nano uses quad-core 64-bit ARM CPU and 128-core integrated NVIDIA GPU, which can provide 472 GFLOPS of computing performance. It also includes 4GB LPDDR4 memory in a high-efficiency, low-power package with 5W/10W power mode and 5V DC input.
The newly released JetPack 4.2 SDK provides a desktop Linux environment (Ubuntu 18.04) for Jetson Nano which is equipped with accelerated graphics, supporting NVIDIA CUDA Toolkit 10.0 and libraries such as cuDNN 7.3 and TensorRT. The SDK also integrate several popular open source machine learning (ML) frameworks such as TensorFlow, PyTorch, Caffe, Keras and MXNet, as well as computer vision and robotics development frameworks such as OpenCV and ROS.
Besides, as NVIDIA's leading AI platform, Jetson can implement AI-based inference workloads more easily than ever. Jetson Nano provides real-time computer vision and reasoning for various complex deep neural network (DNN) models. These functions support multi-sensor autonomous robots, IoT devices with intelligent edge analysis, and advanced AI systems. In addition, transfer learning can use the ML framework to retrain the network trained and stored locally on Jetson Nano.
The Jetson Nano development kit covers an area of only 80x100mm, and it has four high-speed USB 3.0 ports, MIPI CSI-2 camera connector, HDMI 2.0 and DisplayPort 1.3, Gigabit Ethernet, M.2 Key-E module, MicroSD card insertion Slot, and 40-pin GPIO connector. The interfaces and GPIO connectors are ready to use out of the box. Besides, it has a variety of common peripherals and sensors. In addition, there are many ready-to-use open source projects on Github, such as NVIDIA's 3D printable JetBot.
The devkit starts from a portable MicroSD card, and it can be formatted and imaged from any PC with an SD card adapter. The devkit can be conveniently powered via a Micro USB port or a 5V DC barrel jack adapter. The camera connector is compatible with affordable MIPI CSI sensors, including modules based on the 8MP IMX219 provided by JPS ecosystem partners. It also supports Raspberry Pi Camera Module v2, which includes driver support in JetPack. The table below shows the key specifications: 

9.2 Camera Calibration and Image processing
The main component of the camera is the lens. The camera we use is a Sony IMX290 which has an eka-star low-light lens with a minimum illumination of 0.001lux. The main parameters of the product are as follows:
9.2.1 Camera Zooming
Using a manual zooming lens as an example which has a focal length knob, a focus knob and an aperture knob. As shown below, focal length (f) is defined as the distance between the center (O) of the optical lens and the focal point (F), where the collimated light parallel to the optical axis is focused.

In the manual zooming camera shown in the figure below, W---T indicates the direction where the knob is tuned to adjust the focal length and modify the camera¡¯s field of view accordingly.

W: Wide Angle (short focal length). The more you tune the knob along W, the shorter the focal length, the larger the field-of-view, the smaller the visible portion of the target object, and the more macroscopic information you can observe.
T: Telephoto The more you tune the knob along T, the larger the focal length, the smaller the field-of-view, the larger the portion of the subject, and the more details you can see.
After adjusting focal length, the image is usually blurry since the focal point does not fall on the photosensitive device, often called CCD (charge-coupled device). The focal point may be ahead or behind the CCD, and therefore, we need to tune the focus knob to shift the focal point towards the CCD, a process called focusing. 

Working distance is the distance between the lens and the plane of the field of view
FAR means long working distance and it indicates the direction to tune the knob to enable the focus of the distant light fall on the CCD. (It can be infinite in theory)
NEAR makes small working distance and it indicates the direction to tune the knob to enable the focus of the close light fall on the CCD. Generally, the lens has a limited shortest distance.

The Aperture knob is used to tune the lens¡¯ aperture to control the amount of light entering the lens within a specific time period, so it decides the brightness of the image. To generate good/clear image, the lens¡¯ aperture needs to be adjusted according to the surrounding light intensity. 

OPEN indicates the direction to increase the aperture of the lens. A larger aperture allows the camera¡¯s CCD to capture more light within the same time period, generating brighter images. However, too much light could result in overexposed images.
CLOSE indicates the direction to reduce the aperture of the lens. A smaller aperture allows the camera¡¯s CCD to capture less light within the same time period, generating darker/unclear images. The following figure shows the generated images under three different conditions: 1) overexposure (aperture is too large); 2) good exposure (aperture is appropriate); 3) underexposure (aperture is too small).  

The camera's minimum requirement for light is called sensitivity (also called minimum illumination), which depends on the photosensitive chip. According to sensitivity, a camera is classified into three categories: normal, moonlight-level, and starlight-level. The starlight-level camera has the strongest sensitivity, and it only needs 0.0001Lux of light intensity for normal operation. (Note: Lux is the unit of light intensity.)
The above explains the process of focusing. In summary, it mainly includes the following three steps:
(1) Adjust the focal length to adjust to a suitable field of view.
(2) Adjust the focus to make the target object clear in the image
(3) Adjust the aperture to generate clear image with appropriate light exposure.
9.2.2 Camera Calibration
In the applications of visual measurement and machine vision, camera intrinsic must be known to establish the relationship of the 3D geometry (points/lines/planes in Euclidean space) and the 2D imaging model (perspective projection of the points/lines/planes in the image space). The camera intrinsic is computed via a standard process that is called camera calibration.
Camera calibration is vital in the applications of visual measurement and machine vision. The accuracy of the camera intrinsic significantly affects the accuracy of these applications. Therefore, camera calibration is the prerequisite for carrying out any vision-based research. In a vision system, a high-quality and processable image is acquired through image processing.
A USB-connected camera is calibrated three steps
1. Delete the original pictures in the data/caliboard¡¯ folder
2. Collect calibration data
3. Perform the calibration process
An example of a distortion-free image is shown below:

The camera calibration procedure is shown below 
9.2.3 Color feature extraction
The following introduces some basic concepts about color feature processing:
£¨1£© Pixels and resolution
Pixels are the basic unit elements that make up an image, and resolution refers to the number of pixels along the directions of length and width. For example, a 640¡Á480 picture, "640¡Á480" means that the picture has 640 pixels along the length direction and 480 pixels along the width direction, totaling 640¡Á480=307200 pixels.
£¨2£©RGB color space
The most widely used color space in computer techniques is the RGB color space, which is a color model closely related to the structure of the human visual system. According to the structure of the human eye, all colors can be seen as a combination of three basic colors, namely red, green, and blue. Most displays use this color model.
In the RGB color model, black is at the origin, white is at the corner farthest from the origin, and the gray level is distributed along the line connecting these two points. Each component image is its primary color image. A color image/RGB is a three-dimensional array, such as 400¡Á300¡Á3, representing an array with 400 columns, 300 rows, and 3 components (R, G, and B).

£¨3£©HSV color space 
HSV color space is another commonly used color space in image processing. It starts from the human visual system and consists of three components: (H)ue, (S)aturation, and (V)alue. The HSV color space is closer to the subjective perception of the human eye, in which H is represented by an angle; S is the radius length from the central axis of the HIS color space to the color point. The closer the color point is to the axis, the more white it is; V is expressed by the height in the axial direction, as shown in the figure below. The axis of the cone describes the gray level, black at the minimum intensity and white at the maximum intensity. HSV color space and RGB color space are just different representations of the same physical quantity.

£¨4£©Gray color space
The gray scale is divided into several levels according to the logarithmic relationship between white and black, and the gray scale ranges from 0 to 255. Therefore, each pixel of the gray scale image needs to be stored in one byte. The gray value only represents the brightness and darkness of a single color, and the gray color space is particularly effective for intermediate image processing.
£¨5£©The relationship between grayscale image and RGB color image
Converting a color image into a grayscale image is called grayscale processing of the image. The color of each pixel in a color image has three components of R, G, and B, and each component has 256 possible values. The pixel-value at a color image has a range (0 to 224-1). The grayscale image is a special color image with the same values of the three components of R, G, and B, and its pixel-value range is (0 to 28-1). Therefore, to save computational cost, color images are often converted to grayscale images in digital image processing.
(6£©RGB color image to gray image conversion 
The commonly used converting formulas are as follows:
a: There is a well-known psychological formula for converting color to grayscale

b: Scale the above formula 1000 times to realize integer arithmetic

The above formula adds a 0.5 for rounding .
c: The other is the formula implemented in Adobe Photoshop RGB (1988), where the exponent parameter gamma=2.20

This method runs slower, but it works very well
d:Mean Method

Then use (GRAY, GRAY, GRAY) instead of (RED, GREEN, BLUE), but the accuracy of this is relatively low.
£¨7£©Binarization
The image binarization process is to set the gray value of the image pixels to 0 or 255, so that the entire image appears black and white. By selecting an appropriate threshold for a grayscale image with 256 brightness levels, a binarized image reflecting the overall and local characteristics of the image can be obtained.
In digital image processing, binarization is widely used. Before the binarization, the image needs to be "grayed", and all pixels with grayscale greater than or equal to the predefined threshold are set as 255, otherwise they are set as 0. Particularly, for object segmentation, the white pixels (=255) are extracted as the target objects while the rest black pixels (=0) are set as background area. Next, we can operate merely on the extracted object pixels. 
OpenCV is a cross-platform computer vision library. Log in to the OpenCV official website to download the OpenCV software and install it. When installing, follow the prompts to complete the installation. Here are some usages of OpenCV operators:
£¨1£©Image processing
a: cv2.cvtColor(input_image,flag)
Function: Convert the color space of the image, such as from BGR to Gray, or from BGR to HSV, etc.
Parameters: input image; flag conversion type
Note: For the conversion between BGR and Gray, the flag used is cv2.COLOR_BGR2GRAY. Similarly, for the conversion between BGR and HSV, the flag is cv2.COLOR_BGR2HSV. OpenCV uses the BGR color space. The difference from BGR is that the sequential channels are inconsistent.
b: cv2.inRange(hsv,lower_red,upper_red)
Function: Extract the area of a specific color
Parameters: hsv: original image; [lower_red-upper_red]: range of the pixel values in the red channel (any pixels in this range is set as 0, otherwise set as 255). 
c: cv2.medianBlur(src,ksize)
Function: median filter, the purpose is to blur the image and reduce image noise.
Parameters: src: is the image to be processed; ksize: is the size of the window (ksize by ksize), which is an odd number greater than 1.
£¨2£©Morphological operation
Morphological operation enlarges or shrinks the cluster of pixels on an image, and it is usually applied to a binary image. Morphological operation needs two inputs, one is the original image, and the other is kernel, which is used to determine the shape and structure of the operation. The two most basic morphological operations are corrosion and expansion. Their variants constitute other operations called opening, closing, gradients computation, etc.
a: cv2.getStructuringElement(MORPH, (x,y))
Function: Set image structure elements
Parameters: MORPH: The shape of the MORPH kernel. There are three shapes to choose from, namely rectangular MORPH_RECT, cross-shaped MORPH_CORSS and elliptical MORPH_ELLIPSE. (x,y): the size of the kernel and the position of the anchor point. Generally, before calling the erode() and dilate() functions, define a Mat type variable.
Returns: the position of the anchor point.
b: cv2.erode(src,dst,kernel,anchor,iterations)

Function: It adopts a minimum operator to the pixels in a local area/window to corrode a picture, which causes the image¡¯s light areas being eroded. Specifically, it applies the minimum operator at each pixel location (called anchor point) across the whole image and replace the anchor point¡¯s value with the minimum pixel value in the local area/window. 
Parameter: src: a multi-channel input image, like CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst: output image with the same size and shape as the input image. kernel: structure element (rectangular, cross-shaped, or elliptical window). If kernel=Mat(), it is a preset 3¡Á3 rectangle. The larger the matrix, the more obvious the corrosion effect. The original position of anchor is preset to the center of the kernel. iterations: the times that the operation is executed. 
Return: Return the optimal threshold retVal and the result image, respectively.
c: cv2.dilate(src,dst,kernel,anchor,iterations)

Function: It convolves image A with kernel B of any shape (usually square or circle). Kernel B has a definable anchor point, which is usually defined as the core center. During the dilation operation, the kernel B is applied to all the pixels (called anchor point) in the image, the maximum pixel value of the area covered by the kernel B is used to replace the pixel at the anchor point. Obviously, this maximization operation will cause the bright areas in the image to "expand", so this operation is also called "expansion".
Parameters: src: a multi-channel input image, like CV_8U, CV_16U, CV_16S, CV_32F or CV_64F. dst: output image with the same size and shape as the input image. kernel: structure element (rectangular, cross-shaped, or elliptical window). If kernel=Mat(), it is a preset 3¡Á3 rectangle. The larger the matrix, the more obvious the expansion effect. The origin position of the anchor is preset to the kernel¡¯s center. iterations: the times that the operation is executed. 
Return: Return the optimal threshold retVal and the result image, respectively.
£¨3£©Canny edge detection
Canny edge detection is a very popular edge detection algorithm. Because edge detection is easily affected by noise, the first step of Canny edge detection is to use Gaussian filter to reduce noise; the second step is to use Sobel operator to calculate the first derivative along the horizontal and vertical directions (image gradient G_x and G_y), which help to find the gradient and direction of the boundaries; the third step is non-maximum suppression which excludes non-edge pixels and retains the thin lines; the fourth step is to use the a threshold to extract the true edges.
cv2.Canny(image,threshold1,threshold2[,edges[,apertureSize[,appertureSize[,L2gradient]]])
Function: Identify the points with obvious brightness changes in the digital image.
Parameters: image: input image. threshold2 set the size of the Sobel convolution kernel used to calculate the image gradient, the default value is 3. L2gradient is used to set the equation for calculating the gradient.
£¨4£©Contour extraction
Contour extraction can be simply regarded as a curved connecting continuous points (connecting boundaries) together. It has the same color or gray scale. Contours are useful in shape analysis and object detection. To make it simple and accurate for contour extraction, binarization is implemented in the first step to obtain a binary image. Next, Canny is used to extract edge points. Then, calling contour extraction to find a contour is like finding a white object in a black background. 
Cv2.findContours(binary,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
Function: Find contours in binary images
Parameters: binary: input binary image. Cv2.RETR_TREE Contour retrieval mode. Cv2.CHAIN_APPROX_SIMPLE contour approximation method.
Return: image and contours. Among them, the contours are stored in a Python list. Each contour is a numpy array containing the coordinates of the boundary point (x, y) of an object.
9.3 Visual garbage classification 
With OpenCV, the shape, the size, and the locations of the objects (trash) are able to be estimated from the camera¡¯s images. Also, the object¡¯s locations in the image plane are used to compute the 3D locations of the object in the coordinate system of the robot arm¡¯s endpoint via coordinate transformation. Then, based on the distance and direction between the robot arm¡¯s end effector and the object, a series of command is generated to control the robot to grab the object automatically. 
The following introduces a case program for garbage classification via deep learning. Here, the Pytorch deep learning method (yolov5) is used to detect and classify the junk cards from images. Yolov5 will output a window covering the boundary of a detected junk card, and the center of the window is the object¡¯s location. Given the coordinate transformation from the camera¡¯s coordinate system to the robot arm¡¯s end-effector¡¯s coordinate system, the 3D locations of the card are computed and used to control the robot arm to grab it. Next, the robot arm delivers it to the corresponding trash can. This process mainly uses OpenCV image processing. The following is the specific process of image processing to further deepen readers' understanding of OpenCV.






Now you have learnt how to use OpenCV with the AI Vision Set to extend the development of the Mirobot by using deep learning with image processing and computer vision. 


Learning Robotics Basics With WLKATA Mirobot Manual of Experiments

Author by: WLKATA Robotics

For more information and tutorials from WLKATA Robotics, please visit:
Official website: www.wlkata.com
Facebook official fansclub: https://www.facebook.com/mirobotarm/
Youtube WLKATA channel: https://www.youtube.com/channel/UCrneaL8hjWUxmvFHinFEicw
Company Address:
New Jersey Office: Wristline Inc.
140 N STATE RT 17 STE 313, Paramus, NJ 07652
TEL: 1-201 523 9232
EMAIL: hello@wristline.com

Bejing Office: Beijing Tsinew Technologies Co., Ltd.
Room 1603, Zhongguancun Energy & Security Science Park, Building 3, 
Qinghua East Road 16 , Haidian District, Beijing China 100083
TEL: 0086-13683577036
EMAIL: wlkata_service@tsinew.com

  Talk to us directly via 
WLKATA Wechat ID 











Multifunctional Extender Box
User Manual
(Technical Development Document)





Document Version£ºV1.003
Release Date£º2021/06/09

Copyright  Beijing Tsinew Technologies Co., Ltd. 2021. All rights reserved.
Without the written permission of the company, any unit or individual shall not excerpt, copy part or all of the content of this document without authorization, and shall not disseminate it in any form.

Disclaimer
To the maximum extent permitted by law, the products described in this manual (including its hardware, software, firmware, etc.) are provided "As-is" and may have defects, errors or malfunctions. Beijing Tsinew does not provide any form of express or implied warranty, nor does it compensate for any special, incidental or indirect damages caused by the use of this manual or the use of the company's products. Before using this product, please read this manual and related technical documents published on the Internet and learn more relevant information. Make sure to use this product under the premise of fully understanding the product-related knowledge.
The user of this product is responsible for following the laws and regulations of relevant countries and ensuring that there are no major dangers in the use of Beijing Tsinew robotic arms. 

Revision Notes


Beijing Tsinew Technologies Co., Ltd.
Address: Room 1603, Zhongguancun Energy & Security Science Park, Building 3, Qinghua East Road 16 , Haidian District, Beijing 
Official Website£ºcn.wlkata.com



1. Product Introduction
1.1 Overview of Multifunctional Extender Box
The multifunctional extender box (hereinafter referred to as the "controller") is an important accessory of the Mirobot robotic arm. The built-in Bluetooth and Wi-Fi modules provide perfect wireless connection, and the TF card slot provides more file storage space. The controller contains many interfaces, which can control accessories such as pneumatic set, micro servo gripper, sliding rail, conveyor belt, etc. The controller supports RS485, serial port and other communication methods at the same time. Multiple IO interfaces provide users with a richer choice of peripherals.
1.2 Overview of Controller External Interface

Figure: The front of controller
1.Status indicator   2.OLED screen  3.Navigation keys

Figure£ºThe left side of controller
4.The 7th axis stepper motor interface  5.The 7th axis reset switch interface  6.Power output interface
7.Serial communication interface   8.RS458 communication interface  9.Serial communication interface

Figure: The front end of controller 
10.PWM signal output interface   11.I/O interface  12.Extended communication interface

Figure£ºThe right side of controller
13.TF card slot
2. Function Introduction of Controller Interfaces
2.1 Status Indicator
The status indicator is used to indicate the working status of the robotic are. The meaning of the lights is shown in the table below
2.2 OLED Screen
A 1.3-inch OLED screen with a resolution of 128¡Á64 is used to display the status information of the robotic arm. For a detailed explanation of the display information, please refer to the next section Controller Quick Start.
2.3 Navigation Keys
Navigation keys are used to select controller files, switch modes and perform other operations.

2.4 The 7th Axis Stepper Motor Interface
Function: This interface is used to connect sliding rails or conveyor belt, and control a two-phase four-wire stepper motor.
Model£ºPH2.0-4P
Interface definition:

Note: The default drive current is 0.8A, and the maximum support is 2A (you need to manually adjust the stepper motor drive and install a heat sink).
2.5 The 7th Axis Reset Switch Interface
Function: This interface is connected to the limit switch of the sliding rail for the seventh axis reset.
Model: PH2.0-3P
Interface definition:


2.6 Power Output Interface
Function: Used for power supply of external equipment. Output voltage 12V. Maximum current 1A.
Model: XH2.54-2P
Interface definition:

2.7 Serial Communication Interface
Function: Used for serial communication with other devices.
Model: XH2.54-4P;
Interface definition:

2.8 RS485 Communication Interface
Function: Used for multi-machine communication with other equipment, supporting up to 99 robot arm linkage control.
Model: KF2EDG3.81-2P;
Interface definition:


2.9 Serial Communication Interface
Function: Used to communicate with computers.
Model: USB Type-B(Square head);
Interface definition£º

2.10 PWM Signal Output Interface
Function: Used to control accessories such as pneumatic set, micro servo gripper, laser head, etc. The interface voltage is 5V, and the maximum output current is 1A.
Model: PH2.0-3P;
Interface definition£º

2.11 I/O Interface
Function: Used for digital signal input and output, analog signal input and PWM output.
Model: XH2.54-3P ¡Á 6;
Interface definition:

2.12 Extended Communication Interface
Function: Communication interface between controller and robotic arm.
Model: JTAG2.54-16P;
Interface definition:

2.13 TF Card Slot
Function: Used to install a TF card. Insert the card with the printed pattern side facing up. Press to eject the card after use.

3. Controller Quick Start
The content of this chapter is based on the controller program of version 20210410. If the interface of your controller does not match the manual, please refer to Chapter 3 to upgrade the controller program.
3.1 Hardware Connection


Figure: Wiring Diagram
1.Use the IDC cable to connect the controller and the robotic arm
2.Use Type-B data cable to connect the controller and the computer
3.Connect the power supply of the robotic arm and turn it on. And the controller will automatically turn on.
3.2 Use of Pneumatic Set and Micro Servo Gripper
The control of pneumatic tools and the micro servo gripper is mainly completed by the host computer. Just connect the corresponding tool to the "PWM signal output interface", and the controller can be used without other operations.

Figure: pneumatic tool and the micro servo gripper wiring
For specific control methods of pneumatic tools and the micro servo gripper, please refer to "Wlkata studio User Manual".

3.3 Use of Sliding Rails and Conveyor Belt
When using the conveyor belt, the user only needs to connect the stepper motor to the "7th axis stepper motor interface". And then it can be controlled by the upper computer, and the controller does not require additional operations.

Figure: conveyor motor wiring
When using the sliding rail, not only need to connect the stepper motor wire, but also need to connect the limit switch of the sliding rail to the "7th axis reset switch interface". Otherwise the sliding rail reset function cannot be used normally. 

Figure: wiring of sliding rail motor and reset switch
*For specific control methods of sliding rails and conveyor belt, please refer to "Wlkata studio User Manual".
https://lin-nice.github.io/mirobot_gitbook/4-wlkata.html
3.4 Execute Offline Files
In addition to using the host computer for control, the robotic arm can also perform actions by loading program files in the controller. These files are stored in the TF card of the controller, and the user can use the navigation keys to enter the "file menu" to select a file to execute.
Main Interface
Execute¡±test.gcode¡±
The test file "test.gcode" is stored by default in the controller. This file controls the individual actions of each axis. The following will take the execution of this file as an example to introduce how to use the controller to execute an offline file.
¢Ù After the controller is turned on, click the navigation key "¡ú" or "¡ý" in the main interface to enter the first level menu.

¢Ú The first option of the first level menu is the "file" option. Press the navigation key "¡ú" or "Confirm" to enter the second level menu.

¢Û Under the second level menu, select the file to be executed. If there are many files, you can use the navigation key "¡ü¡ý" to move the arrow cursor to select. Now you can click "Confirm" to run the file, or click the navigation key "¡ú" to enter the third level menu and choose Execute. 

¢Ü Under the three-level menu, you can choose to execute the current file immediately, or you can set the file to run in a loop. After choosing Execute, enter the execution interface. 

Suspend Operation
When the robotic arm is moving, click the "Confirm" button to pause the action. At this time, the "!" symbol appears in the upper right corner of the interface. Click "Confirm" again to continue executing the remaining instructions.

Stop Operation
If you need to stop the current file operation, click the navigation key "¡û", and the robotic arm will stop running and exit this interface after executing the received instructions.

3.5 Offline File Download
The program written in the host computer can be run online or downloaded to the controller to run offline. The upper computer TEACHING mode, BLOCKLY mode and PYTHON mode can all perform the operation of downloading the program. Their operation methods are the same. The following takes the file download in the teaching mode as an example to introduce.
¢Ù First, program the action track in the teaching mode of the Wlkata studio.

¢Ú Then click the "save" button in the menu bar to save the file.(The controller currently does not support displaying Chinese in file name. Please do not use Chinese when saving the file name.) 

¢ÛAfter saving, click the "download" button in the menu bar, and the host computer will export the file as a gcode file and store it in the controller. 
¢Ü After the download is successful, you can view it in the controller file menu. Files are sorted by modification time. You can also send the command "o110" to the controller on the command control interface of the host computer to print the file directory. 


¢Ý If you need to back up the gcode file to the local, click the "export" button which next to the "download" to save it to the local.



3.6 Bluetooth Communication
The controller can communicate with Bluetooth, and realize wireless control and other operations through Bluetooth connection. You need to turn on the Bluetooth of the controller before using this function. Please follow the steps below:
¢Ù Choose to enter the communication menu.

¢Ú Choose "BT" Bluetooth mode and confirm. The controller will restart.

¢Û The controller restarts successfully, and the Bluetooth icon (flashing state) and pairing password (default PIN: 7676) appear on the main interface.

Robot Teaching Controller Bluetooth Communication
The Bluetooth teaching controller is an offline controller specially designed for the Mirobot robotic arm. It¡¯s functions includes angle control, coordinate control, point teaching, fixture control, etc. The teaching controller realizes the control of the robotic arm through Bluetooth communication with the multifunctional controller. The following briefly introduces the connection process between the multifunctional controller and the teaching controller.
¢Ù Turn on the controller and switch to Bluetooth mode. The Bluetooth icon on the upper right corner of the screen flashes, indicating that it is waiting for pairing.

¢Ú Press and hold the power button for 3 seconds to turn on the teaching controller. The wireless connection icon will flash in the upper right corner of the screen.


¢Û The Bluetooth icons of the multifunctional controller and the teaching controller change from flashing to steady on, indicating that the Bluetooth connection is successful. At this time, the teaching controller can be used to control the action of the robotic arm. 
* For specific use method of the teaching controller, please refer to "Mirobot Bluetooth Controller Quick Start Tutorial"
https://lin-nice.github.io/mirobot_gitbook/9-wlkata.html
Mobile APP Bluetooth Connection
APP Download
http://cn.wlkata.com/cn_downloads_wlkata.php?PHPSESSID=ab46e550a248c5bfdb9843f8fd15eae5
Please download the APP in the download center of the Chinese official website. 

Bluetooth Connection
¢Ù Turn on the controller and switch to Bluetooth mode. The Bluetooth icon on the upper right corner of the screen flashes, indicating that it is waiting for pairing.

¢Ú Open the Bluetooth of mobile phone, search "mirobot" and pair. The default pairing password is 7676.

¢Û Open the WLKATA Mirobot APP, and click "Select Device" to select the "mirobot" device.

¢Ü After connecting the device, swipe down the APP interface to find the "Homing" button. Long press to reset the robotic arm, and then it can control the robotic arm.

Computer Bluetooth Connection
PC virtual serial port communication module
Use the HC-05PC virtual serial port communication module to communicate with the controller to achieve wireless control of the robotic arm.
For specific usage methods, please refer to the supporting technical data of the module to complete the parameter setting;


Computer Bluetooth
Use the computer's built-in Bluetooth to realize the connection with the controller;
¢ÙOpen the system settings, find the Bluetooth option, and add a new device;

¢ÚSelect the found Bluetooth device named as the controller (default: mirobot), and enter the PIN (default: 7676) to connect;
(This process may prompt that the PIN is invalid, please click repeatedly until the PIN input interface appears)

¢ÛPrompt that the connection is complete;

¢ÜOpen the device manager to check the standard serial port number on the Bluetooth connection

¢ÝSelect the corresponding serial port on the host computer to complete the connection;
Modify Bluetooth Name and Password
Bluetooth default name: mirobot   Default password: 7676
If the controller cannot automatically connect with Bluetooth after changing the password, you can change back to the default password "7676" or choose to restore factory settings in the controller settings.
The modification process is as follows:
¢Ù Connect to the controller

¢Ú Modify the Bluetooth name. Use the host computer or serial port tool to send the control code to the controller (Pay attention to the baud rate and other settings when using the serial port assistant). The command is: "o150"+"n" (n="string" ."string" is a character string. Chinese is not supported). The letter o can be in upper or lower case. In this example, we set this Bluetooth name to "myrobot". After the modification is completed, send "o151?" to check, or directly observe the main interface of the controller.

¢Û Modify the Bluetooth pairing password. Use the host computer or serial port tool to send the control code to the controller. The command is: "o151xxxx" ("**" are four Arabic numbers). The letter o can be in upper or lower case. In the example, we set the Bluetooth password to "0000". After the modification is completed, send "o151?" to check, or directly observe the main interface of the controller. 

¢ÜIn the 0.19 version software, you can directly select the "BOX" interface and modify the configuration after updating the controller information;

3.7 RS485 Communication
The communication function of the controller RS485 is mainly used to control multiple devices. The multifunctional extender box is equipped with two sets of 485 ports. We can use one of them, and the other can be used to connect other 485 devices in parallel. The following will introduce how to control two robotic arms.
RS485 Mode Setting
¢Ù Select to enter the communication menu

¢Ú Select "RS485" mode and confirm. The controller restarts.

¢Û After the controller restarts successfully, the RS485 icon and address (default 01) will appear on the main interface.

Configuration Address
Set addresses "01" and "02" respectively for the two controllers. The address of the controller is two digits from 01 to 99.
¢Ù Connect the controller

¢Ú Use the host computer or serial port tool to send the control code to the controller (Pay attention to the baud rate and other settings when using the serial port assistant). The command to configure the address is: "o140**" ("**" means 01~99), the letter o can be in upper or lower case. In the example, we set the controller address to "02". After the address configuration is complete, send "o140?" to query, or directly observe the address display on the main interface of the controller.

Hardware Connection
Connect two controllers and RS485 host (You can also use USB-RS485 to connect and debug).

Multi-machine Control
RS485 host device sends control commands:
For example: 
@01$h The robotic arm with address number 01 executes the reset command.
@02o111test The robotic arm with address number 02 executes the file named test.


3.8 WIFI Communication
* Under development, so stay tuned!


3.9 Serial Communication
The controller can communicate with other devices through this serial port. The default baud rate is 115200 and cannot be modified.

Example: arduino sends G code commands through the serial port to control the movement of the robotic arm
char*Positional1[]={
"M21G90G1X0Y0Z0A0B0C0",
"M21G90G1X19Y32.9Z13A-4B-55.8C-19.8",
"M21G90G1X19Y35.9Z13A-4B-55.8C-19.8",
"M3S1000",
"M21G90G1X15.7Y-15.1Z19A-4B-55.8C-19.9",
"M21G90G1X94.6Y-15.1Z19A-4B-55.8C-19.9",
"M21G90G1X94.6Y-21.1Z44A0B-98.8C90",
"M21G90G1X94.6Y-7Z50A0B-147.5C90",
"M3S0",
"M21G90G1X0Y0Z0A0B0C0"
};

classHardwareSerial;
HardwareSerial*m_serial=&Serial2;

StringsendMsg(Stringgcode,StringstrEnd="ok",unsignedinttimeout=10)
{
Serial.println("sendmsg:"+gcode);
if(!m_serial||0==gcode.length())return"";
if(gcode.indexOf("$H")>=0||gcode.indexOf("$h")>=0){
if(timeout<15)timeout=30;
}
StringstrMsg="";
//Before sending data, if there is data in the serial port, the content will be read
while(m_serial->available())m_serial->readString();
//Using println's own line feed
unsignedlongtime=millis();
m_serial->println(gcode);
while(strMsg.indexOf(strEnd)<0){
//If there is data in the serial port, read all
if(m_serial->available())strMsg+=m_serial->readString();
//When waiting for Terminator to time out£¬it will jump out
if((millis()-time)>=(timeout*1000))break;
delay(100);
}
if(gcode.indexOf("$H")>=0||gcode.indexOf("$h")>=0){
//Need to set speed after reset
chartemp[20]={0};
sprintf(temp,"G01F%d",2000);
m_serial->println(temp);
}
Serial.println("end:"+strMsg);
returnstrMsg;
}

voidsetup()
{
Serial.begin(9600);
Serial2.begin(115200);
delay(100);
sendMsg("$h");
}


voidloop()
{
for(inti=0;i<sizeof(Positional1)/sizeof(Positional1[0]);i++)
{
sendMsg(Positional1[i]);
}
delay(5000);
}

*For the meaning of G codes, please refer to "WLKATA Mirobot G Code Instruction Set User Manual".
3.10 I/O pin trigger
The 4 I/O interfaces of the controller can be used for digital signal input and output, analog signal input and PWM output; By setting the trigger function of the sensor, you can make the robotic arm execute the specified Gcode file. The setting process is the same as the setting process of Bluetooth name and password, please refer to Modifying Bluetooth name and password. For setting instructions, please refer to Annex I: Command list 130~132 commands.





4. Controller Firmware Upgrade
4.1 Controller Firmware Upgrade Steps:
¢Ù Connect to the controller and turn it on
¢Ú Turn on the host computer and connect to the serial port
¢Û Click ¡°settings¡±, select the ¡°Multifunctional extender box¡± option, and click the ¡°start¡± button. 




Annex I: Command list





















                                                          WLkata WeChat official account











Multifunctional Extender Box
User Manual
£¨Technical Development Document£©





Version£ºV1.005
Released Date£º2022/04/14

All rights reserved  Beijing Tsinew Technologies Co., Ltd 2021.
Without the written permission of the Company, no unit or individual is allowed to extract or reproduce the contents of this document in part or in whole and shall not be transmitted in any form.
Disclaimer
Within the scope of the law allow maximum, this manual describes products (including its hardware, software, firmware, etc.) are provided "according to the status quo", a possible flaw, error or malfunction, frequently bull shark tank does not provide any express or implied warranty, also does not use this manual or use the company's products lead to any special, incidental or indirect damages to compensate. Before using the product, read the user manual and relevant technical documents published online and understand the relevant information. Ensure that you fully understand the knowledge of the product under the premise of using the product.
It is the responsibility of the user of this product to ensure compliance with the applicable laws and regulations of the relevant country and to ensure that there is no significant danger in the use of Beijing Tsinew Technologies robotic arm. 
Revision Notes

Beijing Tsinew Technologies Co., Ltd.
Address: Room 1603, Zhongguancun Energy & Security Science Park, Building 3, Qinghua East Road 16 , Haidian District, Beijing 
Official Website£ºwww.wlkata.com

Must Read
To use the functions described in this manual, extender box firmware needs to be 20220302 or later, and upgrade the robotic arm firmware to 20220310 or later. WlkataStudio-Windows-V2.0.3 is available for download to upgrade the robotic arm and extender box.
For details about extender box firmware upgrade, please refer to
5.1 Controller Firmware Upgrade£º
For details about how to update the robotic arm firmware, please refer to
Annex III: Mirobot Firmware Update Tutorial

1. Product Introduction
1.1 Overview of Multifunctional Extender Box
The multifunctional extender box (hereinafter referred to as the "controller") is an important accessory of the Mirobot robotic arm. The built-in Bluetooth and Wi-Fi modules provide perfect wireless connection, and the TF card slot provides more file storage space. The controller contains many interfaces, which can control accessories such as pneumatic set, micro servo gripper, sliding rail, conveyor belt, etc. The controller supports RS485, serial port and other communication methods at the same time. Multiple IO interfaces provide users with a richer choice of peripherals.
1.2 Overview of Controller External Interface

Figure: The front of controller
1.Status indicator   2.OLED screen  3.Navigation keys

Figure£ºThe left side of controller
4.The 7th axis stepper motor interface  5.The 7th axis reset switch interface  6.Power output interface
7.Serial communication interface   8.RS458 communication interface  9.Serial communication interface

Figure: The front end of controller 
10.PWM signal output interface   11.I/O interface  12.Extended communication interface

Figure£ºThe right side of controller
13.TF card slot
2. Function Introduction of Controller Interfaces
2.1 Status Indicator
The status indicator is used to indicate the working status of the robotic are. The meaning of the lights is shown in the table below
2.2 OLED Screen
A 1.3-inch OLED screen with a resolution of 128¡Á64 is used to display the status information of the robotic arm. For a detailed explanation of the display information, please refer to the next section Controller Quick Start.
2.3 Navigation Keys
Navigation keys are used to select controller files, switch modes and perform other operations.

2.4 The 7th Axis Stepper Motor Interface
Function: This interface is used to connect sliding rails or conveyor belt, and control a two-phase four-wire stepper motor.
Model£ºPH2.0-4P
Interface definition:

Note: The default drive current is 0.8A, and the maximum support is 2A (you need to manually adjust the stepper motor drive and install a heat sink).
2.5 The 7th Axis Reset Switch Interface
Function: This interface is connected to the limit switch of the sliding rail for the seventh axis reset.
Model: PH2.0-3P
Interface definition:


2.6 Power Output Interface
Function: Used for power supply of external equipment. Output voltage 12V. Maximum current 1A.
Model: XH2.54-2P
Interface definition:

2.7 Serial Communication Interface
Function: Used for serial communication with other devices.
Model: XH2.54-4P;
Interface definition:

2.8 RS485 Communication Interface
Function: Used for multi-machine communication with other equipment, supporting up to 99 robotic arm linkage control.
Model: KF2EDG3.81-2P;
Interface definition:


2.9 Serial Communication Interface
Function: Used to communicate with computers.
Model: USB Type-B(Square head);
Interface definition£º

2.10 PWM Signal Output Interface
Function: Used to control accessories such as pneumatic set, micro servo gripper, laser head, etc. The interface voltage is 5V, and the maximum output current is 1A.
Model: PH2.0-3P;
Interface definition£º

2.11 I/O Interface
Function: Used for digital signal input and output, analog signal input and PWM output.
Model: XH2.54-3P ¡Á 6;
Interface definition:

2.12 Extended Communication Interface
Function: Communication interface between controller and robotic arm.
Model: JTAG2.54-16P;
Interface definition:

2.13 TF Card Slot
Function: Used to install a TF card. Insert the card with the printed pattern side facing up. Press to eject the card after use.

3. Controller Quick Start
The content of this chapter is based on the controller program of version 20210410. If the interface of your controller does not match the manual, please refer to Chapter 3 to upgrade the controller program.
3.1 Hardware Connection


Figure: Wiring Diagram
1.Use the IDC cable to connect the controller and the robotic arm
2.Use Type-B data cable to connect the controller and the computer
3.Connect the power supply of the robotic arm and turn it on. And the controller will automatically turn on.
3.2 Use of Pneumatic Set and Micro Servo Gripper
The control of pneumatic tools and the micro servo gripper is mainly completed by the host computer. Just connect the corresponding tool to the "PWM signal output interface", and the controller can be used without other operations.

Figure: pneumatic tool and the micro servo gripper wiring
For specific control methods of pneumatic tools and the micro servo gripper, please refer to "Wlkata studio User Manual".
3.3 Use of Sliding Rails and Conveyor Belt
When using the conveyor belt, the user only needs to connect the stepper motor to the "7th axis stepper motor interface". And then it can be controlled by the upper computer, and the controller does not require additional operations.

Figure: conveyor motor wiring
When using the sliding rail, not only need to connect the stepper motor wire, but also need to connect the limit switch of the sliding rail to the "7th axis reset switch interface". Otherwise the sliding rail reset function cannot be used normally. 

Figure: wiring of sliding rail motor and reset switch
*For specific control methods of sliding rails and conveyor belt, please refer to "Wlkata studio User Manual".

4.Controller Function
4.1 Controller Interaction Interface
The extender box has a built-in operating system with 8 MB memory and supports up to 32GTF card expansion. It can manage files, configure ports, display interactive information of the robotic arm on the OLED screen, and switch interfaces through navigation keys.
Main Interface
Icon Description

Shortcut keys (main interface) :

Level 1 Interface


4.2 File Management
The TF card of the controller is used to store Gcode files. Files are imported through WlkataStudio or card reader. Files can be read or deleted through the file management menu.
Gcode File Import in WlkataStudio
Programs written in WlkataStudio can be run online or downloaded to the controller for offline operation. Programs can be downloaded in teaching control mode, BLOCKLY mode and PYTHON mode, and the operation methods are the same. The following is just an example of file download in teaching control mode.
£¨1£©Write the movement trajectory in the teaching control mode;

£¨2£©Click the "Save" button in the menu bar to save the file; (The extender box does not support Chinese file name display, please do not use Chinese file name when saving)

£¨3£©Click the "Download" button in the menu bar, and the host computer will export the modified file to gcode file and store it in the controller


£¨4£©After the file is downloaded, it can be viewed in the controller file menu. The files are sorted according to the modified time.

£¨5£©If you want to back up the changed Gcode file to the local computer, you can click the "Export" button next to the download to save it to the local computer.	

Import G-CODE File with Card Reader
Gcode files obtained by other means can be imported using the card reader configured in the package.
Run ¡°test.gcode¡±
The controller can read the Gcode file and send it to the robotic arm for execution. By default, the controller has the test file "test.gcode", which controls the individual action of each axis of the robotic arm. The following uses this file as an example to describe how to use the controller to execute the offline file.
£¨1£©In the Gcode file menu, select the file to be executed. If there are multiple files, use the navigation key "¡ü¡ý" to move the arrow cursor before the file name for selection. At this point, you can directly click the circular "OK" key to run the file, or click the navigation key "¡ú" to enter the lower-level menu and select the running mode.

£¨2£©Under the third-level menu, you can choose to execute the current file immediately or set the file to run in a startup cycle. After selecting run, the running interface is displayed. 

File running interface


Pause operation:
When the robotic arm is moving, click the circular "OK" key to suspend the action of the robotic arm. At this time, the icon in the upper right corner of the interface  switches to £¬indicate robotic arm suspended. Click "OK" again to continue executing the remaining instructions.
Stop operation:
To terminate the operation of the current file, click ¡û to stop the operation of the robotic arm and exit the interface. The icon in the upper right corner of the interface  switches to .
4.3 Bluetooth Mode£¨BLE4.0£©
The default mode of the controller is BLE4.0. In this mode, the controller can control the robotic arm wirelessly through bluetooth connection.
Teaching Pendant Bluetooth Connection
Bluetooth teaching pendant is an off-line controller specially designed for Mirobot robotic arm, including angle control, coordinate control, point teaching, end-effector control, and other functions. The teaching pendant controls the robotic arm through Bluetooth communication with the controller. The following is a brief introduction to the connection flow between the controller and the indicator.
£¨1£©The controller enters the COM menu, select "BLE4.0", and click the circular "OK" key to select;

£¨2£©The controller restarts automatically, and a flashing Bluetooth icon appears on the main interface, waiting for pairing;

£¨3£©Long press the power button of the teaching pendant for 3s to turn on, and the wireless connection icon flashes in the upper right corner of the screen

£¨4£©When the Bluetooth icon of the teaching pendant and controller changes from flashing to steady state, and the Bluetooth connection is successful. After this, teaching pendant can control the robotic arm.
* For details on how to use the teaching pendant, please refer to ¡°Using the teach pendant (Bluetooth extender box)¡±
https://document.wlkata.com/?doc=/wlkata-mirobot-user-manual/111-using-the-teach-pendant-bluetooth-controller/ 

4.4 Bluetooth Mode£¨BT2.0£©
Phone APP Bluetooth Connection
APP Download
http://cn.wlkata.com/cn_downloads_wlkata.php?PHPSESSID=ab46e550a248c5bfdb9843f8fd15eae5
Please download the APP in the download center of the Chinese official website. 

Wlkata Mirobot APP can realize simple control of the robotic arm. When using, the controller needs to switch to "BT2.0" mode. The APP connection process is as follows:
£¨1£©Controller enter the COM menu, select "BT2.0", click the circular "OK" key to select;

£¨2£©The controller automatically restarts. Flashing Bluetooth icon will appear on the main interface, waiting for pairing (pairing code: 7676 Bluetooth Name: Mirobot);

£¨3£©Turn on the bluetooth of the mobile phone, search for "Mirobot" and pair it. The default matching password is 7676.

£¨4£©Open WLKATA Mirobot APP, click "Select Device" to Select "Mirobot" Device;

£¨5£©After connecting the device, scroll down the APP interface and long press the "Homing" button to reset the robotic arm. Then you can control the action of the robotic arm.

Computer Bluetooth Connection
PC Virtual Serial Communication Module
HC-05PC virtual serial port communication module is used to communicate with the controller to realize the wireless control of the robotic arm.
Please refer to the module supporting technical information for specific usage method and complete parameter setting.

Computer Bluetooth
Use the computer's own Bluetooth connection with the controller;
£¨1£©Open system Settings, find Bluetooth options, and add a new device;

£¨2£©Select the device (default: mirobot) and enter PIN (default: 7676) to connect.
(This process may prompt invalid PIN, please click repeatedly until the PIN input interface appears)

£¨3£©A message will be displayed indicating that the connection is complete.

£¨4£©Open Device Manager to view the standard serial port number on Bluetooth connection

£¨5£©Select the corresponding serial port on the host computer to complete the connection;


Modify Bluetooth Name and Pairing Code
Bluetooth (BT2.0) name and pairing code can be viewed on the main screen. Bluetooth default name: mirobot; Default pairing code: 7676;

Modification process is as follows:
£¨1£©Connection controller;

£¨2£©query the Bluetooth name, enter o150? In the dialog box below the Command Control interface on the host computer.

£¨3£©Change Bluetooth name, send "o150" + "n" (n="string"), such as "o150myrobot"

£¨4£©After modification, send ¡°o150?¡± Query the name and confirm that the modification takes effect.

£¨5£©Query bluetooth pairing code and send ¡°o151?¡±£»

£¨6£©Modify the pairing code and send ¡°o151XXXX¡±, XXXX as four-digit number for example, ¡°01511234¡±.

£¨7£©After modification, send ¡°o151?¡± Query the name and confirm that the modification takes effect.


4.5 RS485 Mode
RS485 is a serial communication mode. RS485 can not only transmit between a single device, but also connect multiple devices on a communication bus. RS-485 interface adopts differential signal transmission mode, good anti-interference ability and long communication distance.
In RS485 communication network is generally used in the master-slave communication mode, that is, a host with multiple slave, multi-functional controller as a slave. The multi-function controller is equipped with two groups of 485 ports. When used, the A and B ports of the two devices are connected with A pair of twisted pair cables. The control of the two robotic arms will be described below.
RS485 Mode Setting
£¨1£©Enter COM menu, select "RS485" mode and confirm;

£¨2£©The controller restarts, and the icon , address (default: 01) and baud rate (default: 115200) appear on the main interface.


Set the address and baud rate
Set the addresses 01 and 02 for the two controllers. The controller address is a three-digit number ranging from 01 to 255.
£¨1£©In the COM menu, move the cursor to "RS485", click the controller "¡ú" right key, enter the lower menu

£¨2£©Set the address, select the address option, use the up, down, left and right arrow keys to adjust the address value, after completing the adjustment, exit to confirm;

£¨3£©Set the baud rate, select the baud rate option, and select the same baud rate as the host.

Custom G Code Communication Protocol
£¨1£©In RS485 mode, the default value is User-defined G-code Protocol, and the icon on the home screen is . It can be set by selecting Protocol on the RS485 menu.


£¨2£©Format of the Protocol
Example 1£º¡°@01O111= test¡±
Note: The robotic arm at address 01 runs "test.gcode".
Example 2£º¡°@02$H¡± 
Note: The robotic arm at address 02 returns to zero;
Example 3£º¡°@02 M20 G90 G01 X250 Z100 F1000¡± 
Note: the end of the robotic arm at address 02 moves to the position xyz (250,0,100) in coordinate mode with linear interpolation at the speed of 1000mm/min in coordinate mode.
Custom Modbus Communication Protocol
£¨1£©In RS485 mode, Modbus Communication Protocol is optional, and the icon on the home screen is . It can be set by selecting Protocol on the RS485 menu.

£¨2£©Format of the Protocol
Modbus is a serial communication protocol. The controller uses Modbus RTU protocol.
See Appendix II: Mirobot Modbus Instruction Table for details
Arduino Connection (Custom G-Code Communication Protocol)
Connect two controllers and the RS485 host. Arduino is used as the host in the figure below (USB-RS485 connection can also be used for debugging).
This example demonstrates that the Arduino Mega2560 controller sends G code instructions to the controller through RS485 bus, and the controller controls the movement of the robotic arm body after forwarding. (This example requires Mirobot library.)

Example File£ºRS485_Mirobot
/*
*RS485_Mirobot
*=====================Function =====================
* Demonstrate how to use Arduino board to send control instructions to two robotic arms
* through RS485, and direct multiple robotic arms to work together*
*====================Robotic Arm====================
*Update the latest firmware for the robotic arm and controller using WlkataStudio-V1.019.20.
*Multi-function Controller COM is set to RS485.
*controller addresses of the two robotic arms are set to 01 and 02: respectively.
*For details, see Multifunctional Controller User Manual.
*
*=====================Connection=====================
*MageSensorShieldRS485---Multi-functional Controller RS485 port
*
*This example program is used with the Mirobot arm, and cannot be executed normally without the arm
*
*/
#include<Mirobot.h>// Include header file

// Create a robotic arm object
RS485_Mirobotarm1;
RS485_Mirobotarm2;

voidsetup(){
Serial.begin(9600);// Initialize the serial port at the baud rate of 9600
arm1.rs485Init();// Initial Settings, default address 01
arm2.rs485Init(2);// Initial Settings, default address 02
arm1.setSerialMonitoring(ON);// Enable serial port monitoring and print information through the Arduino serial port monitor
while(arm1.getStatus()!=Alarm||arm2.getStatus()!=Alarm);// Wait for the two arms to be powered on
arm1.sendMsg("$H",OFF);//arm1 returns to zero, close the verification of the returned information of the robotic arm
delay(500);
arm2.sendMsg("$H",OFF);
while(arm1.getStatus()!=Idle||arm2.getStatus()!=Idle);// Wait for the robotic arm to complete zero and become idle
arm1.setMoveSpeed(3000);// Set the maximum movement speed of the robotic arm at 3000
arm2.setMoveSpeed(3000);// Set the maximum movement speed of the robotic arm at 3000
arm1.moveJoints(-90,10,-90,60,10,10);
arm2.moveJoints(-90,10,-90,60,10,10);
arm1.zero();
arm2.zero();
arm1.runFile("test");// Run the "test.gcode" file stored in the controller
arm2.runFile("test");
}
voidloop(){

}

PLC Connection Example (Modbus RTU Protocol)
(1) Hardware Connection
For common RS485 connections between devices, only a pair of differential signals A and B are used. According to EIA official standards: (A: inverted input terminal; B: non-inverted input terminal). However, many devices, chip specifications and application documents, such as ISL8483E, MAX485 chip have different definitions as (A: non-inverted input terminal; B: inverted input terminal).
The above two signal definitions are the opposite, so in the actual application, it is very easy to have connection error which can lead to abnormal communication. When marking signals, non-inverting and inverting signals are expressed in the form of TXD+/TXD- or DATA+/DATA- or A+/B-. The one with the + sign means the in-phase signal, and the one with the - sign is the inversion signal. They can be distinguished on the logic level, and the level of the in-phase signal is higher than that of the inversion signal.
Therefore, special attention should be paid when connecting. For example, the signal definitions of Siemens s7-200smart involved in the following routine, its DB9 interface and expansion module SB CM01 are all in accordance with EIA standards, that is, A is the inverting terminal and B is the non-inverting terminal. Contrary to the A and B definitions of TTL-to-S485 chips such as MAX485.

(2) Siemens s7-200smart Modbus RTO Communication Subroutine






4.6 WIFI Mode
WIFI Mode Setting
£¨1£©Select enter COM menu, select "WIFI" mode and confirm;

£¨2£©Controller restarts, and an icon  is displayed on the home screen.

WIFI Connection
£¨1£©To set the name of the router to be connected, send ¡°o162 + XXXX¡± (XXXX indicates the router name), and send ¡°o162¡±? Inquire and confirm.

£¨2£©To set the password of the router to be connected, send ¡°o163 + XXXX¡± (XXXX indicates the password of the router). After setting the password, send ¡°o163?¡± Inquire and confirm.

£¨3£©Send o100 to restart the controller and confirm that the Wi-Fi connection is successful. Otherwise, repeat the preceding steps.

Connect The Robotic Arm Under Current Network
£¨1£©Start the Network Debugging Assistant, set the protocol type to UDP, and connect to the network.
Network debugging assistant download links: 
https://pan.baidu.com/s/1nOHXI6BI1Ck3-ZwuGSZ2uw Code£ºmx1u 


£¨2£©Enter the IP address and port number of the target host according to the connection information returned by the controller, and send the $h test message.




4.7 UART Mode
The controller can use this serial port to communicate with other devices. The default baud rate is 115200 and cannot be modified.
UART Mode Setting
£¨1£©Select enter COM menu, select "UART" mode and confirm;

£¨2£©The controller restarts,  is displayed on the home screen and the baud rate (default: 115200) 

Arduino Serial Port Control
This example demonstrates that the Arduino Mega2560 controller sends G code instructions to the controller through serial port, and the controller controls the movement of the robotic arm after forwarding. (Mirobot library is required for the sample program)
Hardware Connection:
The definition of the PIN of the UART interface is shown in the following figure.



Example£ºUART_Mirobot

/*
*Use Serial2 serial port to communicate with the robotic arm
*/
#include<Mirobot.h>// Include header file

UART_Mirobotmyrobot;// Create a robotic arm object
voidsetup(){
Serial.begin(9600);// Initialize the serial port at the baud rate of 9600
myrobot.serialInit(2);// Set Serial2 to communicate with the robotic arm at baud rate of 115200£»
myrobot.setSerialMonitoring(ON);// Enabling Serial Port Monitoring
while(myrobot.getStatus()!=Idle&&myrobot.getStatus()!=Alarm);// Determine whether the robotic arm can receive commands
myrobot.sendMsg("$H",OFF);// The robotic arm reset
while(myrobot.getStatus()!=Idle);// Wait for the robotic arm to complete reset and become idle
myrobot.setMoveSpeed(3000);// Set the maximum movement speed of the robotic arm at 3000
myrobot.moveJoints(-90,10,-90,60,10,10);// Control the robotic arm to move 1-6 axis to (-90¡ã, 10¡ã, -90¡ã, 60¡ã, 10¡ã, 10¡ã) position
myrobot.zero();// The robotic arm moves to its initial position
myrobot.movePose(198,0,230.05,0,-60,0);// Control the end of the robotic arm to move to XYZ£¨198,0,230.05£©£¬RPY£¨0,-60,0£©position
myrobot.movePose(0,-100,-100,0,60,0,INC,MOVL);// Control the end of the robotic arm in coordinate mode with relative position of linear interpolation motion
myrobot.movePose(250,0,100,0,0,0);
myrobot.moveArc(200,0,100,60,ABS,CCW);// control robotic arm moves along a section of arc (inferior arc) with a radius of 60mm at the tangent point xyz (200,0,100) with the current coordinate point;
myrobot.gripper(ON);// gripper open
myrobot.timedPause(2.5);// waiting 2.5s
myrobot.gripper(OFF);
myrobot.zero();
myrobot.timedPause(0.5);
myrobot.runFile("test");// Run the Gcode file "test.gcode" stored in the controller.
myrobot.homing(2);
}
voidloop(){

}

4.8 Sensor Settings
Four I/O interfaces of the controller can be used for digital signal input and output, analog signal input and PWM output; By setting the sensor trigger function, the robotic arm can be controlled to run the specified G-CODE file.


Set D0 Pin to Trigger Run ¡°test.gcode¡±
£¨1£©Connect the sensor to the D0 interface (this example uses the photoelectric sensor in the conveyor belt kit, the user can choose other types of sensor);

£¨2£©Select enter the sensor menu, select "GPIO" and confirm;	

£¨2£©Select the interface "D0" to view the return value of the current sensor "Val".

£¨3£©On the D0 interface, press the "Ok" key to enable the triggering function. "Threshold" indicates the Threshold triggered by the sensor, "File" indicates the Gcode File triggered to run, and the default value is "test.gcode".

Set Sensor Trigger Threshold and File
£¨1£©Set the pin trigger threshold and send "O133=0,0,0,0" set all four interfaces to low level trigger and send "O133? Check whether the settings are successfully queried.

£¨2£©Set the pin trigger file, default trigger file is (test.gcode) send "O134=,,test,", set the D0 pin trigger file to test.gcode.


5.Controller Firmware upgrade
5.1 Controller Firmware Upgrade
(1) Turn on the power supply of the robotic arm, and use the USB-TypeB data cable to connect the robot controller;
 
(2) Open the host computer and connect the serial port;
(3) Click "Settings", select the controller options, and click the Start button;

(3) Click "OK" to complete the program upgrade.




Annex I: Instruction Sheet
This document describes Mirobot's ability to set instruction sets and how to use them.
Currently, some of the directives marked with * have not been rigorously tested and are trial versions.
AT command can be subdivided into three types:

Note:
Not every command has all types of commands above.
[ ] is the default value in parentheses. It may be left empty or may not be displayed.
The default baud rate for instructions is 115200
Command is not case-sensitive.
The command ends with a line break \r\n. Please note that the serial port tool is set to "New Line Mode".
For a definition of the error code returned by the instruction, see the WLKATA Mirobot Error Code Manual.
Instruction Description
Basic Instructions
O100 Restart Device

O101 Query Version Information

O103 Query Arm Status

O104 Set Continuously Location Information Return

*O105 Set Time Interval for Information Return

O106 Set Starting Home Function

O107 Query SD Card Information

O110 Query SD Card File Directory

O111 Execute File

O112 Execute File ¨C Loop

O113 Delete File

O117 Terminate File

O120 Start Download File

O121 Stop Download File

O122 Add Actions to File

O123 Run and Download File

*O130 Set GPIO Mode

*O131 Set GPIO Value

*O132 Set Pin Trigger Enable

*O133 Set Pin Trigger Threshold

*O134 Set Pin Trigger Function

O140 Set RS485 Address

O141	Set RS485 Baud Rate

O142	Ser RS485 Communication Protocol

O150	Set Bluetooth Device Name

O151	Set Bluetooth PIN

O162	Set WIFI SSID

O163	Set WIFI PASSWORD

O173	Reset To Default

O180	Set Port Type







Annex II: Mirobot Modbus Instruction Table
Data Frame Description
Normal Frame
The above ModBus protocol is the same as common types, except that data 1 and data 2 (say 8 bits) are treated as a 16bit Num data length.
Addr£ºslave machine address£¨0x01-0xf7£©£¬0x00 is broadcast address. If the slave machine receives a packet whose address is not that of the slave machine, the packet is discarded. (So, at the physical level, data is still "broadcast.")
Cmd£ºFunction code, used to mark the frame Function.
Reg: register address, whose value is the first address of data to be sent/read (see register address table)
Num: indicates the number of registers
Data: indicates a Data domain
CRC: the parity bit. If the CRC verification is incorrect, packets are discarded and retransmitted.
Example
Send HOME command to Mirobot at 02 address (write 8 to register 28 of the Mirobot at 02 address.

Continuously write data to control the movement of robotic arm first axis to 90 degrees;
Error frame
Error Code
Register Value and Function Code Description


Annex III: Mirobot Firmware Update Tutorial
WlkataStudio Firmware Update Tutorial
Using the upper computer to update the firmware can retain the customized settings of the robotic arm parameters
Step 1: Use the USB cable to connect the robotic arm and computer. Turn on the power.

Step 2: Open WlkataStudio to check the firmware version: Select the correct serial port, press the "RESET" button of the base, and observe the startup information returned. The firmware version of the robotic arm and controller is displayed in the red box position respectively (version information of the old version firmware is not displayed).

Step 3: Open the WLKATA Studio software, enter the "Settings" interface, and click "Update Firmware".

Step 4: Click "Upload" in the pop-up window to update the firmware.

Step 5: When the information in the red box appears, the firmware upload is complete, close this window;

Step 6: Click the "OK" button in the Settings window to finish


XLoader Firmware Update Tutorial
If the robotic arm firmware is damaged or the software cannot identify the robotic arm, use XLoader to update the firmware directly.
Step 1: Turn on the power of the robotic arm and connect the computer with USB cable (turn off WlkataStudio in advance, otherwise it will fail)
Step 2: Open the download program XLoader, as shown in Figure 1
Step 3: In Hex file, select the Hex file to download
Step 4: Select Mega(ATMEGA2560) in Device
Step 5: Select the corresponding port number in COM Port (usually only one option)
Step 6: Click Upload and start updating firmware. After successful download, there is a prompt in the lower left corner, as shown in Figure 2




                                                                        Official Account











Sliding Rail Kit
User Manual
(Technical Development Document)





Document Version£ºV1.001
Release Date£º2021/06/30
Copyright  Beijing Tsinew Technologies Co., Ltd. 2021. All rights reserved.
Without the written permission of the company, any unit or individual shall not excerpt, copy part or all of the content of this document without authorization, and shall not disseminate it in any form.

Disclaimer
To the maximum extent permitted by law, the products described in this manual (including its hardware, software, firmware, etc.) are provided "As-is" and may have defects, errors or malfunctions. Beijing Tsinew does not provide any form of express or implied warranty, nor does it compensate for any special, incidental or indirect damages caused by the use of this manual or the use of the company's products. Before using this product, please read this manual and related technical documents published on the Internet and learn more relevant information. Make sure to use this product under the premise of fully understanding the product-related knowledge.
The user of this product is responsible for following the laws and regulations of relevant countries and ensuring that there are no major dangers in the use of Beijing Tsinew robotic arms.
Revision Notes

Beijing Tsinew Technologies Co., Ltd.
Address: Room 1603, Zhongguancun Energy & Security Science Park, Building 3, Qinghua East Road 16 , Haidian District, Beijing 
Official Website£ºwww.wlkata.com



1. Product Introduction
The sliding rail kit (hereinafter referred to as the "slide rail") is an important part of the Mirobot robotic arm. As the seventh axis of the robot arm, the slide rail can greatly expand the working space of the robot arm. The slide rail can be programmed and controlled by the host computer to work with the robot arm. You can try to use the slide rail to build a mini production line.



2. Structure and Assembly
2.1Lay out the wires
Travel switch line
Insert one end of the limit switch line XH2.54 3Pin plug into the limit switch at the bottom of the adapter board, and fix it with the cable clips in the accessories;

Stepper motor line
Pass the stepper motor wire through the drag chain, and plug one end of the 6pin socket into the stepper motor (the back of the drag chain can be opened for threading);



Robotic arm power cord (optional)
For aesthetic reasons, the power cord can also be put in the drag chain, and the back of the drag chain needs to be opened to put the power cord in;

Install the Foundation (optional)
If the slide rail needs to be fixed on other platforms, it can be installed through the foundation. The foundation is installed on the slide rail section steel and fixed by M5 screws and square nuts;

2.2Install the robotic arm
Fix the robotic arm
Place the robot arm on the slide rail plate, with the base interface facing the drag chain. And use the M4 screws in the accessory kit to connect the robot arm base and the plate.

Place the extender box
Use M3 screws to fix the extender box bracket on the board, and place the box in the bracket;

Use IDC cable to connect the robot arm. And plug in the motor cable and the limit switch cable;




Place pneumatic box
If you need to use pneumatic box, please follow the steps below:
Use M2 self-tapping screws to fix the extender box bracket on the top of the pneumatic box;

Stack the extender box on top of the pneumatic box, and place the pneumatic box and the extender box on the plate, Clamp the foot pad of the pneumatic box into the positioning hole of the plate, and connect the wire;

3. The use of sliding rail
3.1 Initial setting
Sliding rail parameter setting
After the robotic arm is connected to the upper computer, we can send "$$" in the command control interface to check the parameters of "$3" and "$23". As shown in the figure below, "$3=127", "$23=56". If it does not match the picture below, please send "$3=127" or "$23=56" to modify these two parameters;


7-axis (D-axis) mode setting
After the robotic arm is connected to the host computer, click Setting, select the sliding rail mode in the Tool, and click OK;

3.2 Command control
Return the sliding rail to zero position
Send "$H7" in the command control interface to control the robot arm and slide rail to zero position;


Position and speed control
The speed and position of the sliding rail can be set in the control area on the right side of the host computer interface;

3.2 Programming control
Teaching programming
In teaching programming, after adding teaching points, please drag the scroll bar at the bottom to the end to set the current position and speed of the slide rail;


BLOCKLY programming
In the BLOCKLY interface, the building blocks that control the slide rail can be found in the Part;

PYTHON programming
In the BLOCKLY interface, the building blocks that control the slide rail can be found in the Action;





   / WLKATA Mirobot - User Manual / 1.1 Introduction of WLKATA Mirobot
Introduction of WLKATA Mirobot
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 4 min read


Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual



Brief
WLKATA Mirobot is a six-axis mini industrial robot arm manipulator and is independently developed and launched by Beijing Tsinew Technologies Co., Ltd. The WLKATA Mirobot manipulator is primarily developed for STEAM makers, adolescent education, and higher education purpose.
It represents a new generation of lightweight six-axis desktop robot arm models, which integrates various practical functions, such as drawing, handling, stacking, painting, writing, and machine vision. Users can easily control Mirobot by remote controller, graphical programming, teaching, and play. It has a rich I / O extension interface, which

allowed it to connect to diverse end-effectors. For advanced operation, users could adopt Python, C++, and more for subsequent development.


Structure of WLKATA Mirobot
WLKATA Mirobot is mainly composed of a base, six rotating joints, a lower arm, an upper arm, an end-effector connection plate. There are a total of six robot joints in Mirobot.
The reference frame is shown in the Figure below. For more information on the structure of Mirobot, please refers to the section 3.5 Working Principle and Specification in this manual.





The Six Joint Frame Of WLKATA Mirobot The Structure of WLKATA Mirobot



Reference Frame of WLKATA Mirobot



Items in the WLKATA Mirobot standard set
The WLKATA Mirobot standard set is ready for users who want to experience the essential functions of the Mirobot.









Shipping List
A rich range of add-ons is available for the WLKATA Mirobot. Please refers to the following table to check the name and function of the add-ons.






Safety precautions

This chapter introduces the safety precautions when using this device. Please read this manual carefully before using the manipulator for the first time. This device should be used in an environment that meets the below requirements.
Please do not modify the device without authorization. Otherwise, it may cause device failure, even personal injury, electric shock, fire, etc. The installation, operation,  teaching, programming, and system development personnel of the manipulator must first read the manual carefully and use the manipulator in strict accordance with the specifications of the manual.
General Safety
DO NOT Change or Modify the Circuit or Wire
 The manipulator is electrical equipment. Nonprofessionals are not allowed to change or modify the circuit or wire. Otherwise, it is easy to cause injury to the equipment or person.

When using the manipulator, the following safety rules shall be followed:


The "DANGER," "WARNING," and "NOTICE" described in the manual are only used as supplementary instructions for all safety precautions.
Please use the manipulator within the specified environment. If the manipulator is used beyond the specification and load conditions, the device lifetime will be shortened and even cause damages to the equipment.
The personnel responsible for the installation, operation, and maintenance of the WLKATA Mirobot manipulator must firstly receive training to understand various safety precautions and master the correct operation and maintenance methods before operating and maintaining the manipulator.
It is not suggested to repair the faulty parts or dismantle the manipulator without professional training. If the devices fail, please contact the WLKATA Mirobot technical support engineer for advice.
The high corrosive cleaning is not suitable for the cleaning of the manipulator. And the anodized parts are not suitable for immersion cleaning.
If you need to discard the device, please correctly dispose of it as industrial waste in accordance with relevant laws to protect the environment.
There are small parts in the packing box. DO NOT let children play with the packing or parts in the box in order to prevent swallowing or hurts.
If the manipulator is used by children, at least one adult must be on the side to monitor the child¡¯s operation.
The equipment shall be shut down when the operation is completed.

In the process of manipulator movement, please do not extend your hand into the movement range of the manipulator to avoid bumping or pinching.
It is strictly prohibited to change or remove and modify the nameplate, description, icon, and mark of the manipulator and related equipment.
During the handling and installation, please pay attention to handle with care according to the instructions. Otherwise, it is easy to damage the manipulator.   When operating the manipulator, the local laws and regulations shall be strictly observed. The safety precautions described in the manual are only a supplement to local safety regulations.
Before operating the manipulator, please refer to this WLKATA Mirobot User Manual which is downloadable on the WLKATA official website.
Precautions

Lifting and Handling Mirobot Correctly
 Always remember to lift and handling Mirobot by holding the Lower Arm with one hand and holding the Base with the other hand. One should not lift or handle Mirobot by holding the Upper Arm, or it would cause damage to the motor gears of the major joints.





Be Careful of Your Finger and Preventing Pinching

When the manipulator is during operation, do not place your fingers in the gap between the upper and lower arms or the gap between the lower arm and base to prevent pinching.



DO NOT Twist the Joints by Hand!

DO NOT (!) twist the Joint 1 or Joint 3 by hand in any case, since this would lead to fatal damage to these joints (due to the high reduction gear ratio of these motors). It is only allowed to adjust the joints by using WLKATA studio or proper operation software.



Caution the Hot Surface of Motor & Chip

 When Mirobot is powered on, DO NOT (!) touch the surface of joint 6 motor or the chip by hand, as those parts could be very hot during working.



Press the RESET Bottom for a Hardware Emergency Stop
 In any case of illegal or abnormal operation of the Mirobot, one should press the RESET button immediately on the top of the Mirobot base for an emergency stop. Then

before any further operation, remember to execute the HOMING action.



Execute HOMING action on Each Time Powering on or re-connect the Mirobot manipulator

 Each Time the manipulator is powered on, RESET from an emergency stop, or reopen the WLKATA studio. The user must execute the HOMING action by clicking the HOMING button in WLKATA Studio to homing the joints' position. One should wait for the HOMING action to be completed before any further operation. (Please refer to 3.4.2 for detailed instruction).



Unplugging All External Components When Powered Off

 When powering off the manipulator, please disconnect and unplug all external components from the manipulator, such as Bluetooth box, extender box, color sensor, sliding rail, conveyor belt, etc. Otherwise, the manipulator and the external components may be damaged.

Avoid Using This Device for Laser Engraving
 This manipulator is not designed for executing laser engraving. For users who use this device in potentially hazardous conditions, one should wear full personnel protection equipment, including glass, gloves, and use proper protection cover unit, etc.



version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.2 Quick start guide of Mirobot
Quick start guide of Mirobot
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 7 min read



This chapter briefly introduces how to control the manipulator by using WLKATA Studio, so that users can quickly understand and use the manipulator. The overall process of operation is shown in the Figure below.



The quick start flow chart of using WLKATA Mirobot manipulator




Steps of Quick Installation



Figure 2.1



Figure 2.2



Step 1: Connect the Mirobot and the Multifunctional Extender Box with the IDC cable: A A'

Step 2: Connect the Multifunctional Extender Box and the laptop with the USB cable: B B'

Step 3: Connect the end-effector tool to the correct port on the Multifunctional Extender Box (See the port guide below).


Step 4: Connect the supplied AC power adapter to the Mirobot robot arm: C C'

Step 5: Go to www.wlkata.com, download & install the WLKATA Studio and CH340 driver.

The users can control the Mirobot by using WLKATA Studio software to realize functions such as Joint Mode control, Coordinate Mode control, Teaching & Play, Blockly control, and Drawing, etc.
System environment requirements

WLKATA Studio control software supports the following operating systems:
Windows 7 (64 bit)
Windows 8 (64 bit)
Windows 10 (64 bit)

Downloading WLKATA Studio and the driver packages

Download WLKATA Studio software package and the CH340 driver package from http://www.wlkata.com/site/download.html
Installation and verification of the drive
Installing driver
Decompress the driver package, and click SETUP.exe in the directory to install the CH340 driver. In the pop-up window, click INSTALL and the interface will pop up after successful installation. Click OK.



CH340 driver installation wizard interface



Driver installed successfully


Verifying the driver
Ensure to connect the manipulator to the computer by using the supplied USB data cable.
Open the Device Manager in your PC windows system. Ensure to tick the Show hidden devices option in the View menu. If the "USB-serial ch340 (COM4)" can be found in the port (COM and LPT), it means the driver is installed successfully. The port number following the COM may be different depends on the default driver installation of your system.





Serial port drive information of the WLKATA Mirobot manipulator

Installation and verification of WLKATA Studio
Installing WLKATA Studio
Log in to the official website: www.wlkata.com. Click "Support-Download Center".
Choose "WLKATA Studio V1.018 for WLKATA Mirobot with Multifunctional Box.zip" to download.
WLKATA Studio software package can be directly decompressed and used.




Decompress the WLKATA  Studio software package to a local root directory such as D:\   or E:\ to avoid potential foreign language characters being garbled. Double-click Wlkata Studio.exe in the directory to open the software user interface.
 Note: The parent directory file of the software can only be in English.



Verifying WLKATA Studio Software
In the decompressed package, double-click to open the Wlkata studio.exe. If the Wlkata Studio software can be opened correctly, it means that the WLKATA Studio software is running successfully.

Verifying the device connection
Open the Wlkata Studio.exe. The software should automatically search and connect  to the manipulator after a few seconds. When successfully connects to the manipulator, the upper left corner of the WLKATA Studio interface should display the CONNECTED blue icon.





If the software did not connect to the manipulator automatically, please manually connect the manipulator by click SETTING to set "Port" and "Baud Rate". Enter the
correct serial port COM_ number (as found in step (2) in the content of 1.5.3 Installation
and verification of the drive). After clicking "OK", there will be "Connected" displayed in
the upper left corner.



Step 6: Power on Mirobot by pressing the ON/OFF power button on the robot arm:

 DO NOT Twist the Joint 1 or Joint 3 by Hand No Matter the Manipulator Is Powered On or Off! Since this would lead to fatal damage to the gears of these joints. (See the
Precautions in this manual)
Power on:
Ensure to connect the manipulator with supplied power adapter. Press the ON/OFF
power button on the top of the manipulator base to power on the device. The green power indicator on the ON/OFF button will light up.



Switching on the manipulator


Power off:
Press the power button on the top of the base of the manipulator again to switch off
the power. The power indicator light on the button will be turned off.



Switching off the manipulator

Step 7: Open the WLKATA Studio and start to use the robot arm.

Step 8: Power off Mirobot and unplug the cables to finish using the robot arm.

Brief Introduction of WLKATA Studio Control Software
WLKATA Studio is a control software for Mirobot. It includes command control, JOINT/COORD control, teaching, graphical programming, python programming, writing and drawing, firmware upgrade, and other functions.
Chinese and English switch
After opening the software, click SETTING to set the language, select English or Chinese, confirm and restart. (It can also be set by clicking "EN" in the upper right corner of the interface).



Joint/Coord Mode switch
In the Command mode, select "JOINT MODE" or ¡°COORD MODE¡± at the top of the user interface, and the selected mode will be displayed as a white background status.


Introduction to SETTING interface




Serial port settings: set the serial port and baud rate (115200) of the robotic arm connected to Wlkata Studio.

Language: Set language and font (After language setting, click OK to automatically restart the software to take effect. After font setting, click OK to manually restart the software to take effect) or click the "EN" button in the upper right corner of the interface to switch between languages

Calibration: used to calibrate the robotic arm.

Reset: reset all data of the robotic arm (recalibration is required after reset.

Device: update firmware of robotic arm and install driver for Wlkata Studio

Drawing settings: set drawing speed (recommending the default value)

Tool: select the end tool mode used by the robotic arm.


Controller: update the firmware of multifunctional extender box, click "start" to start updating the multifunctional extender box




Start using the manipulator
This chapter describes the essential control operation of this manipulator by using the WLKATA Studio software.
Prerequisite
The driver and WLKATA Studio software have been installed successfully. For details, please refer to 2.1 Step 5.
The manipulator has been correctly connected to the computer, and the power supply of the manipulator has been turned on. Please refer to 2.1 Step 6.
Preparing operation steps
Connecting WLKATA studio with the manipulator
Double click the Wlkata Studio.exe in the directory, and the Mirobot Studio interface
should pop up. Then please follow the steps of 3.3.4 to verify the driver and connection. When the connection is successful, the CONNECTED blue icon should be displayed in the upper left corner of the WLKATA Studio interface.
HOMING the manipulator before any operation
Before any operation, the manipulator must be homed to the pre-designed homing
position. Click the HOMING button in the WLKATA Studio. Wait for the manipulator to be

homed. The figures below show the manipulator during the homing process and the correct position of the manipulator after a successful HOMING action.
 Note: If the HOMING action is failed or is interrupted, please reapply the power of the manipulator and repeat the HOMING action again.
The manipulator must be HOMING again each time reapplying power from a power failure or an emergency stop or re-opened the WLKATA Studio. One should wait for the HOMING action to be fully completed before any further operation.



In the progress of HOMING the manipulator



The correct manipulator position after a successful HOMING action


Software emergency stop and reset
In case of any illegal operation of the manipulator, click the STOP button immediately in the Mirobot Studio to trigger a software emergency stop operation.
After the emergency stop operation, press the RESET button on the top of the
manipulator base to recover the device from the emergency status.
After press the RESET button, please HOMING the manipulator in the software again before continuing using the robotic.





 After a software emergency stop, press RESET on top of the base, and do the HOMING again before continuing using the r.


Pressing RESET button on the base of the manipulator after a software emergency stop


Using the ROBOT JOINT MODE control function

STEP(1) Click the COMMAND tab in the software interface.



STEP(2) Switch to the ROBOT JOINT MODE in the upper control modes selection panel.



STEP (3) Click each of the J+ J- control buttons on the right panel to control the motion of each of the six joints of the rseparately. The speed can be adjusted by input Speed value, and the step can be adjusted by input Step value.



Using the COORDINATE MODE control function
STEP(1) Click the COMMAND tab.

STEP(2) Switch to COORDINATE MODE in the control modes selection panel.



STEP (3) Click each of the control buttons on the right panel of the WLKATA Studio to control the spatial position and attitude (XYZ coordinate and RX RY RZ angle) of the End-effector of the manipulator. The speed can be adjusted by input Speed value, and the step can be adjusted by input Step value.





Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io

Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.3 Using the TEACHING function
Using the TEACHING function
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 2 min read


Introduction of TEACHING function
Step 1. Click "TEACHING" to enter the interface

Step 2. Choose control mode
In the Angle Mode, the position parameters of each axis are recorded; in the Coordinate Mode, the position and posture parameters of the robot arm end are recorded. Choose the ¡°Coord Mode¡± here.



 DO NOT Change the control mode during the same TEACHING & PLAY file/task, or the point data after switching the mode would be discordant and cause illegal motions.
Step 3. Add teaching point
Click the - + control buttons on the right panel of WLKATA Studio to move the joints (under the ROBOT JOINT MODE) / or the position and attitude of the End-effector   (under the COORDINATE MODE) to the wanted position. When adjusted to a satisfactory position point, click the Add Point button to add a teaching point.



After adding the first teaching point, one could continue to adjust the position and posture of the manipulator, and then click the Add Point button to add the second and the third teaching point... until all teaching points are added.
Step 4. Edit the property of teaching points

Editing the teaching point in-line: double left-click on the top of the cell you want to edit --> input the desired value --> single left-click in blank area / or press Enter to confirm your edit.



Update coordinate of teaching point to the current position of robotic arm. Make sure the movement mode is correct. (Joint Mode vs Coord Mode)


Step 5. Using the basic functions
New: clear the current task and start again.

Open: lookup and open a Teaching & Play file created by WLKATA Studio earlier.
Save: save the task in the chosen directory. SaveAs: save as other task in the chosen directory. Delete: delete a teaching point line.
Export: export as GCODE file
Download: download to multifunctional extender box as GCODE file
Down and Up: change the order of a teaching point line.
Undo and Redo: undo or redo the previous operation.
Copy and Paste: copy the line and paste to the selected teaching point.

Step 6. Run and step run of the record
Click the Run button in the panel to realize the whole recurrence of the recorded teaching points in the list. Click the Step button in the panel to realize the single-step movement of the recorded teaching point one by one in the list. teaching point line.





Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io

Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.4 Using the BLOCKLY function
Using the BLOCKLY function
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 4 min read


Blockly Introduction
Blockly is an open-source graphical programming platform created by Google, which is easy to be learned and applied by starters.
Step 1. Introduction of Blockly panel
Click the BLOCKLY tab in the software interface to switch to the Blockly panel.

Drag and drop the Blockly module from the Selection Panel 1 to the Programming Panel  2 to program. Code Panel 3 would show the python codes of the Blockly module on the Programming Panel. Drag the dividing axis to adjust the size of the work area or hide the code area.


Step 2. Basic functions

New: Create a new folder
Open: Open a local file
Save: Save the file, which is saved to the ¡°data¡± directory by default
Save As: Save the modified file
Export: export Gcode to a local folder
Download: download Gcode to the robotic arm sub-control board
Run: run the code in the work area
Step: choose a code block in the work area, and run the code in separate steps


Step 3. Blockly programming module
The commonly used programming code blocks are described below:





Reset:

The reset command module controls the mechanical arm to return to the initial state after various calibrations.

Zero position:
the Mirobot quickly moves from the current position to the full zero position under the angle mode.

Speed of movement ():

set the movement speed of the robot arm, slide rail, and conveyor belt.

Delay time () seconds:
set the action delay time, execute the next instruction after the specified time.

(Linear Motion / Fast Movement / Door Track Movement) Move to (abosolute_location / relative_location): X () Y () Z () orientation: A () B () C ():

move to the corresponding coordinate in the coordinate mode. X, Y, Z represent the space coordinate, A, B, C represent the attitude of the end clamp
 absolute position is when the movement is defined relative to the global (initial) position.

 relative position as known as incremental position is when the movement is defined relative to the body (current) position.
When choosing ¡°MOVL¡±, Linear Motion, the robotic arm adopts an interpolation algorithm, and the end effector moves to reach the target point in a straight trajectory, which is the shortest path.



When choosing ¡°MOVJ¡±, Fast Movement, each joint moves from the joint angle corresponding to the starting position A to the joint angle of the ending position B. During the movement, the running time of each axis is required to be the same, so they reach the endpoint at the same time.



When choosing ¡°JUMP¡±, Door Track Movement, the robotic arm will first lift up to a certain height, then move to the top of the target point in a linear motion, and finally, descend to the target point. The linear trajectory between the two points C and D are horizontal.




With Linear Motion option, make sure to set the speed of movement prior shown as below



(Y+ / Y- / Z+ / Z- / X+ / X-) move ():

move specific coordinate with a specific amount of movement.

Rotation Angle (abosolute_location / relative_location) base () shoulder () elbow () roll () pitch () yaw ():

the Mirobot robot arm moves from the current position to the specified position in the angle mode. The corresponding axis is shown below.



 absolute position is when the movement is defined relative to the global (initial) position.

 relative position as known as incremental position is when the movement is defined relative to the body (current) position.

SuctionCup (on / off):
control the suction cup to suck/release objects.

Gripper (open/close):

control the servo gripper to clamp/release objects.

Slider moves to: D () F ():
control the slide rail to move to the specified direction with a specific speed.

Conveyor move: (relative /absolute) location D () F ():
control the conveyor belt to move to the specified position at a specific speed.

Turn (joint X) (counter/clockwise) to ():
let the Mirobot specified joint move clockwise or counterclockwise to the designated coordinates with a specific amount of movement.

Arc trajectory movement: (abosolute_location / relative_location) (counter/clockwise) X () Y () Z () R ():

draw the arc according to the requirements of arc trajectory movement.

 absolute position is when the movement is defined relative to the global (initial) position.

 relative position as known as incremental position is when the movement is defined relative to the body (current) position.
Step 4. A sample of Blocly programming: making the robotic arm move

Blockly  Explanation:
Homing the robotic arm

The following actions cycle 10 times

The robotic arm moves from the "zero position" to point A in fast movement. The coordinate is "X202Y0Z60", and the end posture remains unchanged.
The robotic arm moves from point A to point B in fast movement. The coordinate is "X202Y0Z200", and the end posture remains unchanged.
The robotic arm returns to the zero position from point B The first axis rotates to the absolute position + 20¡ã
The first axis rotates to the absolute position - 20¡ã

The robotic arm returns to zero position.


Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.5 Using the Python programming
Using the Python programming
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 1 min read


Please be aware that WLKATA Studio supports Python 3.8 and below.
 Please DO NOT change or delete the first 8 lines of code in the python window, or the manipulator may run discordant and cause illegal motions.
Step 1. Preparation

Step 2. Quick command library in the Python programming
The whole options area is divided into 3 categories (Action, Robot joint mode,  Coordinate mode), a total of 21 functional modules, double-click to directly add and use.
Action options





























h
















d














Robot Joint Mode




6





6




















Coordinate mode



t





































n

RevolveDirection.cw, 0, 0, 0,
60)
MoveMode relative(1) / absolut
RevolveDirection
- cw (1) - Clockwise
- cww (2) - Counterclockwise
x(float) - TX positi
y(float) - TY positi
z (float) - TZ posit
r (float) - radius



Step 3. An example of Python programming

Example	python
#version python 3.8
#coding=utf-8
from mirobot import *
from time import sleep
api=Mirobot()
#Please do not delete the above code
api.home_simultaneous()	#Home Mirobot
sleep(15)	#Delay 15s
api.set_speed(1500)	#Speed of movement as 1500¡ã/min
for i in range(10):	#Repeat the following actions 10 times
#The first axis rotates from the zero position to the absolute position + 30 a
12	api.go_to_axis(30,0,0,0,0,0)
13	#The first axis rotates from the zero position to the absolute position -30 at
14	api.go_to_axis(-30,0,0,0,0,0)
15	api.go_to_zero()	#Back to zero



This code will first reset the robot arm, wait for 15 seconds, set the movement speed of the robot arm, then set the first axis to rotate 30 degrees left and 30 degrees right in the loop function, and finally return to the zero position.



Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.6 Mirobot Error and Warning Code Troubleshooting

Mirobot Error and Warning Code Troubleshooting
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 2 min read



While running code in Blockly or Python, it is recommended to detect any error or warning COMMAND interface. The explanation of the common Mirobot error and warning codes are shown below.


Error code
E100


Example:
"$h" is incorrectly sent as "£¤h";



E101



Example:
"M20 G90 G00 X180 Y50 Z150" sent as

"M20 G90 G00 X Y50 Z150", missing parameters after X;



E102


Example:
"$35=0" (interpolation off) sent as "$35", parameter is not defined;



E103


Example:

"$36=10" (set the number of interpolation points to 10) sent as "$36=-10";



E104


Example:
After "$22=0" (homing operation is turned off (the mirobot is in the unlocked state when it is powered on)),
"$h", "$h1" and other homing operation instructions cannot be executed



E105


Example:
The value set by the parameter $0 is less than 3;



E106


E107


Example:
Send the "$h" to the robotic arm when it is executing other command;



E108


Example:
Mirobot in locked state after an emergency halt, it cannot accept new motion commands;



E109


Example:
"$22=0" (homing operation disabled), the soft limit function cannot be used. "$20=1" (enable software limit) command cannot run;


E110


Example:


E111


Example:
There are conflicting commands in one command, for example, G91 and G90 appear in the same command at the same time;



E112


Example:



E113


Example:
After sending the "$h" homing operation command, the speed is undefined;

When sending "$h" in WlkataStudio, the software will automatically define the speed "F2000" ;



E114



Example:


E115


Example:


E116


Example:
The distance (80) from the relative moving position to the starting point is greater than 2 times the set arc radius value (60)



E117


E118


Example:
The given "X400 Y0 Z200 A0 B0 C0" position exceeds the working area;



E000




Warning Code
A100


Example:
Setting ¡°$44=1¡±, discard one other command



A101


Example:
Axis-2 hard limit alarm1, 2, 3, 7 axes have turned on the hard limit protection, send "$21
= 0" to turn off the hard limit protection;



A102



Example:
Axis-2 rotation angle beyond the soft limit



Troubleshooting:


A103



Example:
A "%" emergency stop command is sent during Mirobot homing operation



A105


Example:
Homing operation timeout



A106


Example:



Common Error with MOVL (Linear Motion)
For linear motion, when using it, please note that the working space of the robotic arm is circular. When the trajectory exceeds the working space, the robotic arm cannot execute the instruction normally, even if the starting point A and target point B are both in the working space. (As shown in the figure below), in this case, please use G00 to move quickly.



Allowed



Not Allowed



Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual


version V1.4.0 ¡¤ published: Mon Aug 09 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.7 Using the DRAWING function
Using the DRAWING function
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 1 min read


The overall process:


Step 1. Installing the pen
Install the pen-holder module and the pen.


Fix the pen holder to the end of the robotic arm.
Tighten the jackscrew with an M1.5 hex key, and fix the pen holder on the end motor shaft of the robotic arm.
Insert the pen into the holder from the top. Tighten the nut of the holder.



Installing the pen-holder module and the pen


Drawing on a smooth Whiteboard to minimize the surface force of friction, or prepare a thin soft cushion and place it under the paper to provide additional buffering during

drawing.



Recommending to draw on smooth White board or placing a thin soft cushion under the paper to provide buffering

Step 2. Set the pen height

We need to set the height of the pen first before drawing. Please follow the below instruction:
Connect the power supply and USB cable of Mirobot and press the switch on the button on the base.
Open the Mirobot Studio software. Confirm there is "CONNECTED" in the upper left corner, switch to the DRAWING panel, then click "HOMING" to reset the robotic arm. After the manipulator back to the homing position, click the Z- button to adjust the height of the pen tip until it just touches the paper.
When the pen is closer to the paper, you can set the Step to "1".
The value of the Z-axis shall between around -10 and 35. Be careful not to over- adjust the Z-axis position lower than it need to be, or the pen tip would hit the desktop too hard, interrupt the pen from moving, and even cause damages to the joints.
When the pen tip is just touching the paper, click the Set Pen Height button to set this pen height for the DRAWING function.





Setting the pen height before drawing


Step 3. Letting the manipulator draw
After setting the pen height, the right panel will be automatically switched from ¡°Pen Set¡± to the ¡°Pattern Selection" panel sector.

To add a graph from existing files, you can either choose an example from the Examples in the upper right ¡°Pattern Selection" panel sector or insert a graph by clicking the Insert button. The graph you have chosen should be shown in the center canvas.



To add a text graph, typing in the lower right panel and click Add button, and the text you have typed should be placed in the center canvas.



To add a mouse drawing graph, click the Edit | Draw button to switch from the Edit mode to the Draw mode. And then you can use your mouse as a pen to draw on the center canvas.



To adjust the size and position of the graph, ensure the Edit | Draw button is in the Edit mode
Click the graph in the canvas and a resize frame would appear around the graph. Adjust the corners to resize the graph and drag the inner frame to change the position of the graph
To delete the unwanted graph on the canvas, ensure the Edit | Draw button is in the Edit mode
Choose the unwanted graph on the canvas Click the Delete button.
To start over from a blank canvas, click the New button to clear the canvas.  To start the drawing, click the Run button, and the manipulator will draw the graph(s) on the canvas.



Drawing by WLKATA Mirobot



Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.8 G code Instruction Set
G code Instruction Set
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 4 min read


Introduction
Mirobot uses a USB serial port for communication. The baud rate is 115200, the data bit is 8, and the stop bit is 1. It adopts instruction control based on G code.
The letters in the instruction are not case-sensitive.

Mirobot can output two sets of PWM signals to control the gripper or suction cup.

The user can send instructions to the robotic arm through WlkataStudio or serial port tools, and each instruction ends with a newline character'\n'.





baud rate 115200, the data bit 8, the stop bit 1



G code instruction set: Movement instruction


Mirobot joint coordinate system (the positive direction of each axis is shown by the arrow)



Mirobot Cartesian coordinate system


Homing


Return to zero (nominal zero position of each axis)


Movement speed



Cartesian mode


Angle mode


Motion mode


Fast motion





Linear interpolation motion



 When using it, please note that the working space of the robotic arm is circular. When the trajectory exceeds the working space, the robotic arm cannot execute the instruction normally, even if the starting point A and target point B are both in the working space. (As shown in the figure below), in this case, please use G00 to move quickly




Circular interpolation movement





Timed pause


Door-shaped trajectory movement





G code instruction set: Auxiliary instruction
Unlock each axis



Air pump/gripper control


Status query




M

















m







u




Robotic arm parameter setting
The hardware parameter setting instruction of the Mirobot robotic arm is composed of "$" + "number", and the setting method is the same as the previous section; before setting, send "$$" to the robotic arm to get the current parameter information, as shown in the figure below. Send "$+number=number" when modifying the value, for example, turn off linear interpolation: "$35=0". It will take effect immediately after the

modification, and it will be saved after the power-off. The following will explain each parameter separately according to the function.



Related to homing



DH parameters


 Note: The length of each connecting rod in the figure is for reference only, and does not represent the actual value




Origin offset of the base coordinate
The original coordinate origin of the robotic arm is in the center of the circular base, which cannot be reached by the robotic arm. In software such as laser engraving, the issued coordinates are relative to this origin, so it is very inconvenient to use. The following three offsets are used to adjust the offset of the origin in the direction of the XYZ coordinate axis, so as to move the position of the origin of the robotic arm.



Interpolation motion-related


Tool coordinate system related



The tool coordinate origin is the center point of the flange bottom at the end of the sixth joint by default. If you install other tools, you can select a point on the tool as a reference point and set its XYZ offset relative to the center of the flange. Then the end pose of the robotic arm in Cartesian coordinate mode is the pose of this point.




Stepper motor pulse equivalent setting
This group of parameters is related to the reduction ratio of each axis. Please do not modify it if not necessary;



Stepper motor speed and acceleration settings



Workspace related
After the movement of the robotic arm triggers the soft limit, the robotic arm stops moving. The restriction can be lifted by moving in the opposite direction;
After the robotic arm triggers the hard limit, the robotic arm is locked and needs to be restarted;






Calibration position parameters
After homing, the robotic arm moves to the initial posture (the big arm is upright, the forearm is horizontal), and the position of each axis in the current posture is specified as the 0-degree position. The angle that each axis moves from the position where the travel switch is triggered to the current position is the calibration position parameter.
When adjusting the calibration position parameters, you can observe whether the calibration marks of each axis are aligned. There is no travel switch on the 6th axis, so calibration is not required for it. The position when the 6-axis is powered on defaults as its 0-degree position. If you need to adjust it, you can rotate it through the software or manually adjust it.





Backlash compensation parameters
Mechanical structures such as the reducer of each axis of the mechanical arm have repetitive errors during the movement, which can be compensated by setting;





Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Aug 04 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.9 Using the gripper module
Using the gripper module
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 2 min read


Gripper Module Introduction
The gripper module is an end-effector designed for WLKATA Mirobot. Please follow the instruction below to install and use the gripper correctly.
Power off the manipulator before installing the gripper module, or it could cause damage to the circuits of the gripper or Multifunctional Extender Box.
Step 1. Installation of the gripper module
Power off the manipulator.
Install the gripper module by screwing it on the end-effector with supplied hex screwdriver.



Installing the gripper module by a hex screwdriver


Before plug the gripper wire connector into the Multifunctional Extender Box unit, trim off the fixed protrusions on the wire connector to allow re-plug-in. Otherwise, the wire connector will be hardly unplugged from the socket.



Trimming off the fix protrusions on the wire connector to allow re-plug-in


Plug the gripper wire connector into the upper-second socket position (GRIPPER) on the Extender Box unit. Link the Multifunctional Extender Box with the Mirobot by using the supplied IDC cable.



The method of connecting the gripper with the manipulator

Step 2. Control the gripper status (open and close)
The gripper can be controlled under the COMMAND, TEACHING, and BLOCKLY functions in the WLKATA Studio:
On the COMMAND page, control the gripper by selecting under Tool and use ON/OFF buttons to control



In the TEACHING page, control the gripper by editing the Trigger cell and Value cell of the teaching point line.



In the BLOCKLY page, control the gripper by drag and edit the Gripper module which can be found in the Motion panel.


Step 3. Finishing using of gripper module
When finish using the gripper, power off the manipulator, and unplug the IDC cable from the back of the manipulator.


Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.10 Using the Pneumatic Set
Using the Pneumatic Set
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 2 min read


Pneumatic Set Introduction
The pneumatic set includes a Pneumatic Unit, three pneumatic tools (a Suction Cup, a 2- Finger Gripper, and a Universal Ball Gripper), and the wire connector. Please follow the instruction below to install and use the Pneumatic Unit correctly.
 Power off the manipulator before installing the Pneumatic Set, or it could cause damage to the circuits of the Pneumatic Unit or Extender Box.
Power off the manipulator.

Install the wanted pneumatic tool by screwing it on the tip of the end-effector with supplied hex screwdriver.

Before plugging the gripper wire connector into the Extender Box unit, trim off the fix protrusions on the wire connector to allow re-plug-in. Otherwise, the wire connector will be hardly unplugged from the socket.

Plug one end of the wire connector into the lower-second socket position (PUMP) on the Multifunctional Extender Box unit.

Plug the other end of the wire connector into the Pneumatic Unit.

Link the air pipe on the Pneumatic Unit with the metal-air outlet on the pneumatic tool.

Link the Extender Box with the Mirobot by using the supplied IDC cable.







The method of connecting the Pneumatic Set with the manipulator


Control the pneumatic tool status (suction cup on and off): The pneumatic tool can be controlled under the COMMAND, TEACHING, and BLOCKLY functions in the WLKATA Studio:

On the COMMAND page, control the pneumatic tool by clicking the End-effect on and End-effector off buttons on the right panel.
On the TEACHING page, control the pneumatic tool by editing the Trigger cell and Value cell of the teaching point line.



On the BLOCKLY page, control the pneumatic too module which can be found in the parts panel.





When finish using the gripper, Power OFF the manipulator, and unplug the IDC cable from the back of the manipulator.


Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.11 Using the teach pendant (Bluetooth controller)

Using the teach pendant (Bluetooth controller)
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 4 min read


Step 1. Product description
Mirobot Bluetooth teach pendant is a Bluetooth controller for wirelessly controlling the Mirobot desktop robotic arm. It supports each axis control mode, Cartesian control mode, and teaching record mode.
After the Mirobot robotic arm is connected to the Bluetooth teach pendant, you can use this teach pendant to control the movement of the Mirobot robotic arm, which is convenient for users to understand and use the Mirobot robotic arm.



Step 2. Product function and parameter description
Bluetooth teach pendant appearance and parameters
The shape design of the Bluetooth teach pendant combined with ergonomics allows users to easily control and operate with both hands.





Appearance of Mirobot teach pendant


Teach pendant control page composition and main function description
The Mirobot teach pendant is mainly composed of angle mode, coord mode, record, and setting function pages.
Angle Mode page
The angle mode page is mainly responsible for the motion control of each axis of the manipulator.



Function description of angle mode page and button


Coord Mode page
Coord mode page is mainly responsible for the movement control of the manipulator in Cartesian mode.



Coord mode page and button function description


Record page
The record page is mainly responsible for the teaching and recurrence of the manipulator.



Record page and button function description


Setting page
The setting page is mainly responsible for the speed control of the manipulator and Bluetooth connection.



Setting page and button function description


Step 3. Operation Guide
Power ON/OFF
Press and hold the power button on the Bluetooth teach pendant for three seconds to open the teach pendant. Press the same button for three seconds to shut down.



Bluetooth teach pendant on and off button


The connection process of the Bluetooth teach pendant and Multifunctional Extender Box
Keep connecting the Mirobot and the Multifunctional Extender Box with the IDC cable as shown below:



Press the "Down" button on the Multifunctional Extender Box and choose to enter the communication menu.



Choose "BT" Bluetooth mode and confirm. The Multifunctional Extender Box will restart.



The Multifunctional Extender Box shows as below if restarts successfully, and the Bluetooth icon (flashing state) and pairing password (default PIN: 7676) appear on the main interface. The Bluetooth icon on the upper right corner of the screen flashes, indicating that it is waiting for pairing.



The Bluetooth icons of the Multifunctional Extender Box and the teaching controller change from flashing to steady-on, indicating that the Bluetooth connection is successful. At this time, the teaching controller can be used to control the action of the robotic arm.





Step 4. Example of using the teach pendant single-axis angle mode to control the robotic arm
Switch the Bluetooth teach pendant interface to the angle mode interface.



Angle mode interface of Bluetooth handle


First of all, it is necessary to reset the manipulator. Press and hold the red button on the top right of the teach pendant for 3 seconds, and the robotic arm will start to reset. Wait for the successful reset of the robotic arm, and then continue to operate.



Reset button


Press the 6 groups of buttons on the right side of the Bluetooth teaching pendant to control the 6 corresponding rotating axes of the manipulator to move in the positive and negative directions.



The 6 sets of buttons to control the rotation of each axis



Step 5. Example of cartesian mode control using teach pendant
Switch the teach pendant interface to the COORD.Mode interface (also can go to the Angle Mode interface).



COORD.Mode interface of Bluetooth teach pendant


The robotic arm needs to be reset once. Press and hold the red button on the upper right of the teach pendant for 3 seconds. The robotic arm will start to reset. Wait for the robotic arm to reset successfully before continuing the operation. The reset button is shown in the Figure below.



The reset button


Press the six groups of buttons on the right side of the teach pendant to control the coordinates (x, y, z) and attitude (a, b, c) of the robot arm end respectively.



The 6 groups of buttons converted to control the end position and orientation


Step 6. Teaching record and reproduction process
After the Mirobot teaches pendant is connected to the robot arm, select the Cartesian mode (or angle mode). Then press and hold the REC key until the outer circle of the recording point in the upper left corner of the screen lights up to enter the teaching mode.



State 1: The outer ring is off and the teaching mode is not entered.



State 2: The outer ring lights up and enters the teaching mode


When the Mirobot is controlled to move to a certain position (or change the end fixture enable status) through the teach pendant, click the REC button to record the current position (or the current end fixture enable status). Then move to the next position, click the REC button to record the current position (or the current end fixture enable state).
After the recording is completed, press and hold the REC button and wait until the recording point in the upper left corner of the screen goes out to complete the teaching recording (the outer circle of the recording point goes out).
Enter the Record page and click Playback to play the first teaching file in the Record page by default. To play other files, enter the Record page and select the corresponding file. Click the OK button or touch the Play icon for 3 seconds.



The record page


Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.12 Using the Sliding Rail and Conveyor Belt / Conveyor Belt Product Introduction
1.12 Using the Sliding Rail and Conveyor Belt
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 7 min read


Sliding Rail Product Introduction
The sliding rail kit (hereinafter referred to as the "slide rail") is an important part of the Mirobot robotic arm. As the seventh axis of the robot arm, the slide rail can greatly expand the working space of the robot arm. The slide rail can be programmed and controlled by the host computer to work with the robot arm. You can try to use the slide rail to build a mini production line.



Sliding Rail



Sliding Rail Connected to Mirobot


Sliding Rail Structure and Assembly
Layout the cables
Travel switch cable
Insert one end of the limit switch line XH2.54 3Pin plug into the limit switch at the bottom of the adapter board, and fix it with the cable clips in the accessories.



Stepper motor cable
Pass the stepper motor cable through the drag chain, and plug one end of the 6pin socket into the stepper motor (the back of the drag chain can be opened for threading).





Robotic-arm power cord (optional)
For aesthetic reasons, the power cord can also be put in the drag chain, and the back of the drag chain needs to be opened to put the power cord in.



Install the foundation (optional)
If the slide rail needs to be fixed on other platforms, it can be installed through the foundation. The foundation is installed on the slide rail section steel and fixed by M5 screws and square nuts.



Install the robotic arm
Fix the fobotic arm
Place the robot arm on the slide rail plate, with the base interface facing the drag chain. And use the M4 screws in the accessory kit to connect the robot arm base and the plate.



Place the extender box
Use M3 screws to fix the extender box bracket on the board, and place the box in the bracket.



Use IDC cable to connect the robot arm. And plug-in the motor cable and the limit switch cable





Place pneumatic box
If you need to use the pneumatic box, please follow the steps below:

Use M2 self-tapping screws to fix the extender box bracket on the top of the pneumatic box.



Stack the extender box on top of the pneumatic box, and place the pneumatic box and the extender box on the plate, Clamp the footpad of the pneumatic box into the positioning hole of the plate and connect the wire.





Sliding Rail Usage
Initial setting
Sliding rail parameter setting

After the robotic arm is connected to the upper computer, we can send "$$" in the command control interface to check the parameters of "$3" and "$23". As shown in the figure below, "$3=127", "$23=56". If it does not match the picture below, please send "$3=127" or "$23=56" to modify these two parameters



7-axis (D-axis) mode setting
After the robotic arm is connected to the host computer, on the right panel, select the sliding rail mode in the Type



Command control
Return the sliding rail to zero position
Send "$H7" in the command control interface to control the robot arm and slide rail to zero position.



Sliding rail can also be homed with HOMING button. With "Slider" selected, only sliding rail will home. With "all" selected, both robotic arm and sliding rail will home.



Position and speed control
The speed and position of the sliding rail can be set in the control area on the right side of the host computer interface.



Programming control
Teaching programming
In teaching programming, after adding teaching points, please drag the scroll bar at the bottom to the end to set the current position and speed of the slide rail.



BLOCKLY programming
In the BLOCKLY interface, the building blocks that control the slide rail can be found in the Part.



PYTHON programming
In the Python interface, the command that controls the slide rail can be found in the Action.





Conveyor Belt Product Introduction
Conveyor belt kit (hereinafter referred to as "conveyor belt") is an important part of the Mirobot robot arm. The conveyor belt can be used as the 7th axis of the mechanical arm to complete the transfer of objects with the mechanical arm. The conveyor belt can be programmed and controlled by the host computer to work with the mechanical arm. You can try to build a miniature production line using the conveyor belt.



Conveyor belt body

Photoelectric switch

Adjustable baffle


Conveyor Belt Structure and Assembly
2.1 Guide Blade Installation (Optional based on task requirements)
Fix guide blade
Symmetrically install two guide blades on one side of the bracket;



Fix guide blade bracket
Fix bracket to the bearing at one end of the conveyor belt with M3 hand screw, the position and the opening degree of the guide blade are used according to the size of the object;


Cable Connection
Connect the robotic arm to the multifunctional extender box;

The conveyor belt stepper motor cable is plugged into the extender box D axis interface;



Initial Setting
Conveyor Belt Parameter Setting
As the seventh axis of the mechanical arm, the conveyor belt cannot be controlled independently from the robotic arm. If the conveyor belt needs to operate continuously in a single direction, please modify the soft limit of axis D of $133 and $143(default 1000) to increase the travel.



Position and speed control
The speed and position of the slide can be set in the control area on the right side of the Wlkata Studio (host computer) interface



Programming control
Teaching programming
In teaching programming, after adding teaching points, please drag the scroll bar at the bottom to the end to set the current position and speed of the conveyor belt.



Blockly programming
In the BLOCKLY interface, the building blocks that control the conveyor belt can be found in the Part.



Python programing
In the Python interface, the command that controls the conveyor belt can be found in the Action.




Conveyor Belt Accessories
2.1 Photoelectric Switch Module
Module Introduction




In this kit, the photoelectric switch module can be used to detect the presence of objects on the conveyor belt. By setting the multi-functional controller, the sensor triggers the robotic arm to execute the specified Gcode program file.
Installation
Fix the photoelectric switch on the bracket with the nut. The mounting direction is shown in the figure below. The mounting height of the sensor can be adjusted up and down.



The bracket is fixed to the side of the conveyor belt using the M5 cup head screw and T type nut;



Cable Connection
The Dupont 3Pin Connector of the photoelectric switch is connected to the red box position of the controller (D0, D1);



Set Controller Sensor Trigger
To use this function please update the controller program to below "202108" demo connect the photoelectric switch module to the multi-function controller D0 pin and set it to trigger the execution of the test.gcode file.
Set extended I/O pin mode

In the command control interface of the Wlkata Studio (host computer), send "o130,0,0,0,0", set the four pins as a digital input mode, and send "o130? The query;



Read D0 pin return value

On the command control interface of the host computer, send "O131? , the return value is "0" when there is obstruction, and "1" when there is no obstruction; Use a tool to adjust the photoelectric sensor tail knob, can adjust the sensor trigger distance;



Set D0 pin to open trigger file function

In the command control interface of the upper computer, send "o132,0,0,1,0", set the D0 pin to open the triggering file function, and send "o132? The query;



Set D0 pin trigger condition

In the command control interface of the upper computer, send "o133,1,1,0,1", set the controller D0 pin to low power level, trigger the manipulator execution file;



Set the D0 pin trigger file

In the command control interface of the upper computer, send "O133,,,test," from the dialog box to set the test. When the controller D0 pin is triggered, Gcode test.gcode stored in the controller multifunctional extender box is executed. (Please refer to the Multifunction Extender Box User Manual for the method of downloading files)








e



T
s




e t



Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual


version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.13 Using AI Vision Set
Using AI Vision Set
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 9 min read


Product Introduction
AI vision set(hereinafter referred to as "vision set") is an important accessory of the Mirobot robotic arm. It can work well with the robotic arm to complete color recognition and sorting, image recognition processing, and other tasks. With its help, the robotic arm can become more "smart" and easier to handle complex tasks.



Figure 1: AI Vision Set


Light

Monitor screen

Support beam

Light bracket

Support rod

Support rod connector

Calibration board

Baseplate

Extender box bracket

Rubber stand


Introduction to AI Vision Set Components
AI Vision Module


Function: Obtain image information, realize the functions of color patches searching,
face detection, eye tracking, edge detection, sign tracking, etc., which can be used to
realize detecting illegal intrusion, screening of defective products, tracking fixed markers, etc. Users only need to write some simple Python codes to easily complete various machine vision-related tasks.
Interface: serial port (XH2.54-4), LCD interface, MicroUSB interface


Accessories: TF card; No distortion lens

Monitor screen


Screen type: 1.8¡± TFT LCD
Horizontal resolution: 128 pixels (28.03mm) 0.18mm pixel pitch Vertical resolution: 160 pixels (35.04mm) 0.18mm pixel pitch Display color: 64K 16-bit RGB565


Quick Start of AI Vision Set
Structure assembly
Install support rod
Install the rubber stand
Take out the baseplate, remove the protecting film on the baseplate surface, and use M4-18 round head inner hexagon bolts and nuts to fix the rubber stands on the four corners of the baseplate;



Install support pod connector (flange)
Use M4-18 round head inner hexagon bolts and nuts to fix the support rod connector (flange) at the position shown in the figure (note: the threaded hole of the fastening screw on the side of the flange faces the side of the baseplate).



Install support pod
Insert the support rod vertically into the connector and use M5-12 nylon buffer screws to tighten it. (note: the side with the hole on should face down, the support rod is a hollow round tube, this hole is used for the serial port line to pass through)



Install AI vision module, screen, and light
Fixed the AI vision module

Place the bracket in the direction shown in the figure. Insert the AI vision module into the notch of the bracket. Pay attention to the direction. The side of the cable socket faces the round hole of the bracket. After confirming the position, fix it with M5-10 hand screws.



Fix monitor screen
The screen is installed to the position shown in the figure and fixed with M5-10 hand screws.



Install brackets
The round hole of the bracket should be matched with the support rod and fixed with M5-12 nylon buffer screws.



Assemble the light bracket
Connect the light to the bracket.



Fixed light (optional)
Install the light close to the beam of the bracket and fix it with quick-release screws.





The basic structure of the vision set has been assembled, and the rest of the accessories can be selected and installed according to needs.
Install OpenMV IDE

Software download
https://openmv.io/pages/download
Software installation
Follow the prompts to install;
Device connection
Connect the AI vision module to the computer via the Micro-USB data cable;

Open the device manager to check whether the vision module is recognized;



Double-click the OpenMV IDE icon to open the software;



Click the "Connect" button to connect the device;



Select "Cancel" in the pop-up firmware upgrade request dialog box ( the device is unavailable after the firmware upgrade );



Click the "Start" button in the lower right corner to run the current "helloworld_1.py";



After it starting to run, you can see the image in the frame buffer at the top right of the interface.
If you need it to run offline, you can save the program to the vision module;



OpenMV IDE information can refer to related documents.





Example 1
This example explains the use of the buttons of the vision module, the on-board light, and the monitoring screen;
Structural assembly
The vision module and the onboard light need to be powered through the serial port. So in this case, the extender box will be used for the power supply.
Fix robotic arm



Place the robotic arm extender box
Fix the extender box bracket to the baseplate with M4-18 round head inner hexagon bolts and nuts, and place the extender box on it;



Hardware connection



Note: The robotic arm expansion board is different from the extender box's serial port interface. The expansion board is PH2.0-4P, and the multifunctional extender box is XH2.54-4P. Please choosethe device according to the connector shape of the serial cable.

Code analysis (file: Example_1.py)
The LCD screen displays the image of the vision module. Press the button on the module to control the onboard light to turn on or off.

Example_1.py	python
import sensor, image, time, pyb, lcd
# Introduce the modules that this routine depends on ¡£ Sensor is a module related

from pyb import Pin, Timer


Led = tim.channel(3, Timer.PWM, pin=Pin("P9"), pulse_width_percent=0) #Configure the percentage of the initial pulse width value of Pin9 to 0

clock = time.clock()	# Create a clock object

23
i = 1	# Assign values to variables
while(True):	# python while loop, do not forget to add
img = sensor.snapshot()	# Take a picture and return the image.



When the onboard light is turned on for a long time, it will generate heat. When used for a long time, the duty cycle is recommended not to be greater than 60.


Color Sorting Example
This example will use the AI vision module to identify colored blocks, extract their color and location information, and convert the information into G codes. Control the robotic arm to realize the color sorting of the wooden blocks.
Structural assembly
To start, set up the AI vision kit and connect all the wires correctly as shown below:
Fix robotic arm
Use M4-18 round head inner hexagon bolts and nuts at the position shown in the figure to fix the robot arm to the baseplate;



Place the robotic arm extender box
Fix the extender box bracket to the baseplate with M4-18 round head inner hexagon bolts and nuts, and place the extender box on it;



Install pneumatic tools
Place the pneumatic box on the side of the robotic arm, and replace the end tool of the arm with a suction cup;
Note: Please refer to "WLKATA Pneumatic Kit Installation and Use Guide" for the installation and connection of pneumatic tools, 1.10 Using the Pneumatic Set



Fix calibration plate
The calibration plate needs to be fixed to the baseplate with M4-18 round head inner hexagon bolts and nuts;



Multifunctional Extender Box Setting
Set the multifunctional extender box to UART and wait for it to restart.



Hardware connection

Connect the AI vision module to the computer using the Micro-USB data cable Connect the LCD monitor and the camera using a serial cable
Connect the camera to the multifunctional extender box using a serial cable


Calibration Preparation
After finishing the structural setup, open the pre-downloaded OpenMV IDE and have the correct code for this example.
Please download the python file here. The full code is also displayed at the end of this example. After downloading, open the code in the IDE.



Then, click the "Connect" button on the left bottom corner of the OpenMV to connect the device as shown below.




If the connection is not done automatically, open the device manager to check whether the vision module is recognized as shown in the video.


If it is still not connecting, check if the port is occupied by other software or change to another port. For example, if you have WLKATA studio open, there is a chance that they will cause a port occupation conflict with OpenMV. Please make sure WLKATA studio is closed before trying to connect.


After the software setup above, we can now start the next section which is the calibration for this color sorting example.
Position Calibration
Calibration includes three parts:

 The relative position between the robotic arm and the AI vision module;
 The distance between the suction cup and the block;
 The shooting angle and scope of the AI vision module


Enter calibration mode
While clicking the green triangle start icon to run the program,
 press the little button on the side of the camera.
Release the button when the robot arm begins to move for the homing process.





AI Vision module calibration

After the success of the homing process, the robotic arm will move to the side and leave the sight area for the AI vision camera. The camera will automatically perform the light intensity calibration. After a few seconds, the monitor will display the captured image in real-time from the camera.

Next, you need to manually adjust the height of the bracket and the position of the camera. You will notice the camera is at the correct position when the edges and the cross of the white calibration board are parallel to the pattern on the monitor screen
as shown below.



Figure: LCD monitor screen image


After the camera is adjusted to the correct position,
 short press the side button on the camera to complete the calibration of the camera angle and range. After pressing, the robotic arm will move to the center and wait for the
calibration of the height of the suction cup.

Calibration of the suction cup height

To adjust the height of the suction cup, we first place the red block in the center of the cross on the white calibration board. If the suction cup is not pointing to the center of the block, adjust the block by little.
We can lower the height of the end-suction cup by  short pressing the button on the side of the camera. Make sure to press multiple times so the height is low enough to
suck up the block.

When you are satisfied with the height,
 press and hold the side button for 3 seconds and release. This action will tell the robotic arm the calibration is done.

Calibration Complete
After this whole process, the calibration is completed, and the identification and sorting work is ready to start.
Run offline
Make sure the calibration is complete before running offline

Download the code to the vision module


Start running
Disconnect both the camera and the multifunctional extender box with the computer as shown below. Every time when the robot arm is turned on, the vision module will start coloring sorting.



Code analysis (File: Color_sorting_mirobot.py)
This example will use the AI vision module to identify colored blocks, extract their color and location information, and convert the information into G codes. Control the robotic arm to realize the color sorting of the wooden blocks.

Color sorting example	python
import sensor, image, time, math, lcd, os, pyb from pyb import UART, Pin, Timer


value = './dfg.txt' # Calibration information storage location

high_z = 50		# the default height of the end of the robotic arm when picking up b bx = 140	# Default coordinates for block calibration
by = 120		# Default coordinates for block calibration cy = 0	# Coordinate offset
cx = 0	# Coordinate offset # Set color threshold




# Set up the sorting area
color_roi = (bx-75, by-75, 150, 150) # set monitor screen sight area lcd_roi = (bx-65, by-82, 128, 160)

# Wait for the robot arm movement to complete def mirobot_wait_finish():
inByte = ''
print('wait')
while inByte.find('>'): while uart.any() > 0:
inByte = uart.readline().decode() #lcd.display(sensor.snapshot())
#print(inByte)	# Print the return data of the robotic arm for debugging and d print('finish')

# Screen initialization lcd.init()
print('LCD INIT')
pyb.delay(1000)	# Delay 1s # Set the serial port
uart = UART(3, 115200)

# Set button pin
Key = Pin('P6', Pin.IN, Pin.PULL_UP)


# Set the brightness of the onboard light
tim = Timer(4, freq=1000)	# Create a timer object using timer 4-trigger Led =  tim.channel(3, Timer.PWM, pin=Pin("P9"), pulse_width_percent=50)	# Configur

# Onboard signal light
Led_R = pyb.LED(1) # Red LED = 1 Led_G = pyb.LED(2) # Green LED = 2 Led_B = pyb.LED(3) # Blue LED = 3

Led_R.on()	# Red light on
keyvalue = Key.value()	# Read button state pyb.delay(1000)

# Robotic arm initialization
uart.write("$40 = 1\n")	# Let the arm open the return message uart.write("$H\n")	# reset the arm
mirobot_wait_finish()	# Wait for completion pyb.delay(2000)
uart.write("M20 G90 G00 F2000\n")	# Set the coord mode of the robotic arm uart.write("M3S0\n")	# Turn off the air pump
uart.write("X150 Y-150\n")	# Remove the robotic arm to prevent it blockin mirobot_wait_finish()	# Wait for the action to complete

# Camera initialization
sensor.reset()	# Initialize the camera sensor.set_pixformat(sensor.RGB565)	# Set the image color format to RGB565 co sensor.set_framesize(sensor.QVGA)	# Set the image size to QVGA (320x240) sensor.skip_frames(time = 2000)	# Wait for the setting to take effect sensor.set_auto_gain(False)	# If color recognition is used, it must b sensor.set_auto_whitebal(False)	# If color recognition is used, it must b

Led_R.off()	# Red light off

# If the button is pressed when power on, the coord mode if keyvalue==0:
Led_B.on()	# Blue light on
# Calibrate the image position and wait until the button is pressed while Key.value():
img = sensor.snapshot()
img.draw_cross(bx, by, color = (0, 0, 0), size = 10, thickness = 1)
img.draw_rectangle(bx-50, by-50, 100,100, color = (0, 0, 0), thickness = 1 lcd.display(img,roi = lcd_roi)
uart.write('X210Y0'+'z'+str(high_z)+'\n')	# The end of the robotic arm m

keytime = 0	# Place the red disc in the center of the # Calibrate the height of the suction cup, and wait for the button to be long while(True):
img = sensor.snapshot()
lcd.display(img,roi = lcd_roi) while Key.value()==0:
keytime+=1 pyb.delay(1)
if keytime in range(20,500):	# Short press the button, the end of the high_z-=1
uart.write('z'+str(high_z)+'\n') # Print height if high_z < -10:
print('error\n') break
elif keytime > 2000:	# Long press to confirm the height and ex
uart.write("X150Y-150Z120\n")# Remove the robotic arm to prevent block print("X150Y-150Z120")
mirobot_wait_finish()	# Wait for the action to complete # Automatic calibration
while(True):
find = 0
img = sensor.snapshot()
for blob in img.find_blobs(thresholds, x_stride=5, y_stride=5,pixe

if blob.code() == 1: # After the red block is recognized, set img.draw_string(blob.x(), blob.y() + 10, 'R') img.draw_cross(blob.cx(), blob.cy()) img.draw_rectangle(blob.rect())
bx=blob.cx() by=blob.cy()
print('colour£º',blob.cx(), blob.cy())
find = 1 break
if find == 1: break
lcd.display(img,roi = lcd_roi) # lcd pyb.delay(1000)
# Record calibration information f = open(value,'w') f.write(str(high_z)+'\n') f.write(str(bx)+'\n')
f.write(str(by)+'\n') print('Variable writing...')
print('Initial height£º',high_z)
print('x Relative coordinates£º',bx) print('y Relative coordinates£º',by)
f.close() break
keytime = 0
Led_B.off()	# Blue light off

# Read calibration information try:
f = open(value,'r')
high_z = int(f.readline()) bx = int(f.readline())
by = int(f.readline()) print('Variable writing...')
print('Initial height£º',high_z)
print('x Relative coordinates£º',bx) print('y Relative coordinates£º',by)
# Otherwise write default parameters except:
f = open(value,'w') f.write(str(high_z)+'\n') f.write(str(bx)+'\n')
f.write(str(by)+'\n') print('Variable writing...')
print('Initial height£º',high_z)
print('x Relative coordinates£º',bx) print('y Relative coordinates£º',by)
f.close() else:
f.close()

Led_G.on()	# Green light on # Sorting blocks while(True):
img = sensor.snapshot()	# Get image img.draw_cross(bx, by, color = (0, 0, 0), size = 10, thickness = 1)
img.draw_rectangle(bx-50, by-50, 100,100, color = (0, 0, 0), thickness = 1, fi  # Find the color block in the color_roi range

for blob in img.find_blobs(thresholds, roi = color_roi, x_stride=15, y_stride=
color = ''


188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
img.draw_cross(blob.cx(), blob.cy()) # Draw cross img.draw_rectangle(blob.rect())	# Draw a box lcd.display(img,roi = lcd_roi)	# lcd display
print('Center coordinates£º',bx, by)
print('Color coordinates£º',blob.cx(), blob.cy())

# Color coordinate conversion (the upper left corner of the image is the o  y = 0+(blob.cy()-by+cy)
x = 210+(bx-blob.cx()+cx) print('Relative coordinates£º',x, y)

# Send instructions to the robotic arm output_str="x%d y%d \n" % (x, y)
print('Output coordinates£º'+output_str)
uart.write(output_str)	# Move the suction cup directly  abov
mirobot_wait_finish()	# Wait for the movement to complete uart.write('Z'+str(high_z)+'\n')	# Decrease the height of the  suction





The color threshold modification method can refer to the following materials:
https://docs.arduino.cc/tutorials/nicla-vision/blob-detection



Quick link of this manual

Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Fri Sep 10 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 1.14 Interface Description
Interface Description
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 2 min read


Interface board of the manipulator
The interface is located at the back of the base of the WLKATA Mirobot, and the schematic diagram of the base interface is shown in the Figure below.
The PIN of the extended communication interface and the definition of each pin are shown in the Figure below.
Ex0 represents the output of pwm1, and EX1 represents the output of pwm2. 1b, 2b, 1a, and 2A refer to the four interfaces of the external sliding rail stepping motor.



PIN and Pin definition of back extension communication interface of substructure




Interface board of the Multifunctional Extender Box
The WLKATA Mirobot external communication interface needs to be connected with the external expansion interface board (the Multifunctional Extender Box) by using an IDC cable. The common external interface board of WLKATA Mirobot and the Pin definition are shown in Figure below.



The front of controller


Status indicator
OLED screen
Navigation keys



Figure£ºThe left side of controller

The 7th axis stepper motor interface
Function: This interface is used to connect sliding rails or conveyor belts, and control a two-phase four-wire stepper motor.
Model£ºPH2.0-4P Interface definition:


Note: The default drive current is 0.8A, and the maximum support is 2A (you need to
manually adjust the stepper motor drive and install a heat sink).
The 7th axis reset switch interface
Function: This interface is connected to the limit switch of the sliding rail for the seventh axis reset.
Model: PH2.0-3P
Interface definition:


Power output interface
Function: Used for power supply of external equipment. Output voltage 12V. Maximum current 1A.
Model: XH2.54-2P
Interface definition:


Serial communication interface
Function: Used for serial communication with other devices.
Model: XH2.54-4P£»
Interface  definition:


RS458 communication interface
Function: Used for multi-machine communication with other equipment, supporting up to 99 robot arm linkage control.
Model: KF2EDG3.81-2P£»
Interface definition:



Serial communication interface
Function: Used to communicate with computers.
Model: USB Type-B£¨Square head£©£»
Interface definition£º



Figure: The front end of controller

PWM signal output interface
Function: Used to control accessories such as pneumatic set, micro servo gripper, laser head, etc. The interface voltage is 5V, and the maximum output current is 1A.
Model: PH2.0-3P£»
Interface definition£º



I/O interface
Function: Used for digital signal input and output, analog signal input, and PWM output.
Model: XH2.54-3P ¡Á 6£»
Interface definition:


Extended communication interface
Function: Communication interface between the controller and robotic arm.
Model: JTAG2.54-16P£»
Interface definition:




Figure£ºThe right side of controller

TF card slot
Function: Used to install a TF card. Insert the card with the printed pattern side facing up. Press to eject the card after use.


Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 2 Multifunctional Extender Box
2 Multifunctional Extender Box
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 5 min read


Please Note:

For more detailed information of the multifunctional extender box, please refer to the separate book "Multifunctional Extender Box User Manual".



Function Introduction
The multifunctional extender box (hereinafter referred to as the "controller") is an important accessory of the Mirobot robotic arm. The built-in Bluetooth and Wifi modules provide a perfect wireless connection, and the TF card slot provides more file storage space. The controller contains many interfaces, which can control accessories such as a pneumatic set, micro servo gripper, sliding rail, conveyor belt, etc. The controller   supports RS485, serial port, and other communication methods at the same time.
Multiple IO interfaces provide users with richer choices of peripherals.
Its main functions are:
Running pneumatic module, gripper, slide rail, conveyor belt, and other external
equipment
Running off-line manipulator¡¯s actions
Extend communication interface, supporting WIFI, BT Bluetooth, RS485 communication protocols
Displaying manipulator status



Interface and Appearance




Status Indicator



OLED Screen
A 1.3-inch OLED screen with a resolution of 128¡Á64 is used to display the status information of the robotic arm. For a detailed explanation of the display information, please refer to the next section Controller Quick Start.
Navigation Keyboard
Navigation keys are used to select controller files, switch modes, and perform other operations.






Quick Start
1.Cable Connection



1.Use the IDC cable to connect the controller and the robotic arm 2.Use Type-B data cable to connect the controller and the computer
3.Connect the power supply of the robotic arm and turn it on. And the controller will automatically turn on.
Using the end-effector tools
For details, please refer to "Using the Pneumatic Set / Using the gripper module"
Using the mobile phone APP (Only supporting Android system)
For details, please refer to "WLKATA Mirobot APP Manual"

Using the teach pendant
Step 1: Switch on the power of the teach pendant and wait until a blue Bluetooth flag appears on the upper right corner of the screen, which indicates that the Bluetooth connection is successful.
Step 2: Before starting any operation through the teach pendant, homing the robot arm by either long-pressing the Stop button on the pendant, or long-pressing the middle navigation key on the multifunctional extension module for two seconds.
After a successful homing, you can now start an operation. For details, please refer to "Using the teach pendant"
Multifunctional Extender Box Interface Menu
Main Interface



First Level Menu








Offline operation

Offline File Download

The program written in the host computer can be run online or downloaded to the controller to run offline. The upper computer TEACHING mode, BLOCKLY mode, and PYTHON mode can all perform the operation of downloading the program. Their operation methods are the same. The following takes the file download in the teaching mode as an example to introduce.
¢Ù First, program the action track in the teaching mode of the Wlkata studio.



¢Ú Then click the "save" button in the menu bar to save the file.£¨The controller currently does not support displaying Chinese in file name. Please do not use Chinese when saving the file name.£©



¢ÛAfter saving, click the "download" button in the menu bar, and the host computer will export the file as a gcode file and store it in the controller.
¢Ü After the download is successful, you can view it in the controller file menu. Files are sorted by modification time. You can also send the command "o110" to the controller on the command control interface of the host computer to print the file directory.



¢Ý If you need to back up the gcode file to the local, click the "export" button which next to the "download" to save it to the local.



Execute Offline Files

Execute¡°test.gcode¡±
In addition to using the host computer for control, the robotic arm can also perform actions by loading program files in the controller. These files are stored in the TF card of the controller, and the user can use the navigation keys to enter the "file menu" to select a file to execute.
The test file "test.gcode" is stored by default in the controller. This file controls the individual actions of each axis. The following will take the execution of this file as an example to introduce how to use the controller to execute an offline file.
¢Ù After the controller is turned on, click the navigation key "¡ú" or "¡ý" in the main interface to enter the first level menu.



¢Ú The first option of the first level menu is the "file" option. Press the navigation key "¡ú" or "Confirm" to enter the second level menu.



¢Û Under the second level menu, select the file to be executed. If there are many files, you can use the navigation key "¡ü¡ý" to move the arrow cursor to select. Now you can click "Confirm" to run the file, or click the navigation key "¡ú" to enter the third level menu and choose Execute.



¢Ü Under the three-level menu, you can choose to execute the current file immediately, or you can set the file to run in a loop. After choosing Execute, enter the execution interface



Suspend Operation
When the robotic arm is moving, click the "Confirm" button to pause the action. At this time, the "!" symbol appears in the upper right corner of the interface. Click "Confirm" again to continue executing the remaining instructions.



Stop Operation
If you need to stop the current file operation, click the navigation key "¡û", and the robotic arm will stop running and exit this interface after executing the received instructions.





Quick link of this manual
Quick start guide of Mirobot

Using TEACHING, BLOCKLY, Python, and DRAWING function

Mirobot Error and Warning Code Troubleshooting

G Code Instruction

Sliding Rail

Conveyor Belt

AI Vision Set

Multifunctional Extender Box User Manual


version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 3.1 Appendix I WLKATA Mirobot Calibration Operation

Appendix I WLKATA Mirobot Calibration Operation
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 1 min read


Calibration Operation Procedure:
The Mirobot is calibrated before leaving the factory. In each time the manipulator finishes the HOMING action, joint 1, joint 2, joint 3, joint 4, and joint 5 should be homed to the pre-designed homing position.
After the HOMING action, if one or more of the joints is/are not in the pre-designed homing position, one needs to re-calibrate the manipulator. The Calibration procedure is explained as below:



Step 1: Turn on the power of the robotic arm. Open the "COMMAND" interface of Mirobot Studio software, enter "M50" and click "Send" to unlock each axis.



Step 2: Enter the "SETTING" interface, click "Calibration-Start". And then close the "SETTING" window for now, in order to do the next step.


Step 3: In the JOINT MODE, control each axis to the corresponding position by adjusting the "J1~J6" on the right side of the interface.

Pre-designed homing position of the Joint 1 to Joint 5


Joint 1 homing position reference



Joint 2 homing position reference



Joint 3 homing position reference



Joint 4 homing position reference



Joint 5 homing position reference


Step 4: After each axis rotates to the corresponding position, enter the "SETTING" interface again and click "Finish".




Step 5: After completing the calibration, click HOMING. The posture of the robot arm after homing is shown in the figure below.


The correct manipulator position after a successful HOMING action




version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 3.2 Appendix II Mirobot Firmware Update Tutorial

Appendix II Mirobot Firmware Update Tutorial
V1.4.0 last updated: Fri Jul 21 2023 ¡¤ 3 min read


Update Robot Arm Firmware
 Users who have Blue Box or Extender Box can not update robot arm firmware.  Users who purchased after January 1, 2021, with a Multifunctional Extender Box can update Robot Arm Firmware.
Stage 1 Update:
Step 1: Turn off the robot arm, unplug the USB cable from the Multifunctional Extender Box, and directly plug into the robot arm as shown below.



Step 2: Close the WLKATA studio, but keep the robot arm connected to the PC

Step 3: Open the Updatehex folder under the Wlkata Studio file and run the Xloader.exe. If unable to find Xloader.exe, please download it from https://dl.dropboxusercontent.com/s/6vzbqaasik6bimp/XLoader.rar?dl=0

Step 4: Run and load the hex file for update preparation. Load by locating the correct file path. Please download the update file from https://dl.dropboxusercontent.com/s/lldug47v3amx9xs/v20210516_2.hex?dl=0
Make sure to choose the correct COM port for the robot arm. Successful upload is shown below with "	bytes uploaded".



Stage 2 Calibration
Step 5: Keep the USB cable plug directly on the robot arm and run the calibration by following the instruction in Calibration Operation
Step 6: After the completion of calibration, turn off the robot arm. Plug the USB into the multifunctional box, turn on the robot arm, and start homing. Check if the robot arm moves properly


Update Robot Arm Firmware in Wlkata Studio
 Note: Only WLKATA Studio v1.014 and above supports firmware upgrades in the WLKATA Studio.
The process of firmware upgrade:



Step 1: Use the USB cable to connect the robotic arm and computer. Turn on the power.



Step 2: Open the WLKATA Studio software, enter the "Settings" interface, and click "Update Firmware".



Step 3: Click "Upload" in the pop-up window to update the firmware.



Wait for the prompt of Wlkata studio firmware refresh success.
Note: After the firmware upgrade is completed, the Wlkata studio software will automatically send the initial data of each axis before the firmware upgrade, which can directly home the robotic arm. If Wlkata studio does not send the initial data, it is

necessary to manually calibrate and home the robotic arm. (refer to "Mirobot Calibration Tutorial" for manual calibration).


Update Multifunctional Extender Box Firmware with Flash Tool


 In this situation, the firmware is too old to be recognized by the Mirobot Studio software, it is necessary to upgrade the firmware with the flash tool to ensure the stable and correct function of Mirobot.

Step 1: Connect the WLKATA Mirobot and the Multifunctional Extender Box, the way to connect is the same as shows in the Quick start guide (also shown in the picture below):



Step 2: Download the required flash tool Download Link
Step 3: Open flash download tool



Step 4: Wait a few seconds for the download tool and choose Factory Mode



Step 5: Choose ESP32 Download Tool from the options.


Step 6: Power On the Mirobot, and then use the Download Panel 1 to upgrade. Choose the correct COM for Mirobot. Click start, and wait until it finishes.





Step 7: Restart (Power off and On again) the Mirobot and Multifunctional Extender Box  to successfully finish and utilize the upgrade. To check the current version of firmware, choose the setting option in the Multifunctional Extender Box and direct to info for more information of the firmware and controller.





version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 3.3 Appendix III Troubleshooting list
Appendix III Troubleshooting list
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 1 min read


Upgrading to a newer version WLKATA Studio
You could find and download the newest version of WLKATA Studio on www.wlkata.com. Before installing a new version of WLKATA Studio, remember to clear the local record of Wlkata Studio in the AppData directory:
Go to the directory of C:\User(User Name)\AppData\Local\, delete the whole folder of Wlkata Studio in this file path.
Find the old version of the Wlkata Studio.exe directory, and delete the whole folder.

Decompress the new version of the WLKATA Studio software package to a local root directory such as D:\ or E:\ to avoid potential foreign language character disturb.
Double-click Wlkata Studio.exe in the directory and start to use the WLKATA Mirobot.

If you want to put the Mirobot back into the box, please adjust the Mirobot to the position shown below.



version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 3.4 WLKATA Mirobot APP Manual
WLKATA Mirobot APP Manual
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ less than a min read


APP Download
Download link£ºhttps://www.wlkata.com/support/download-center



¢Ù Turn on the controller and switch to Bluetooth mode. The Bluetooth icon on the upper right corner of the screen flashes, indicating that it is waiting for pairing.


¢Ú Open the Bluetooth of mobile phone, search "mirobot" and pair. The default pairing password is 7676.
¢Û Open the WLKATA Mirobot APP, and click "Select Device" to select the "mirobot" device.
¢Ü After connecting the device, swipe down the APP interface to find the "Homing" button. Long press to reset the robotic arm, and then it can control the robotic arm.


version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io



   / WLKATA Mirobot - User Manual / 3.5 Working Principle and Specification
Working Principle and Specification
V1.4.0 last updated: Wed Sep 06 2023 ¡¤ 1 min read



This chapter describes the working space, working principle, size, and key technical specifications of WLKATA Mirobot.



Workspace
The workspace of WLKATA Mirobot.





Coordinate System
WLKATA Mirbot has a six-joint coordinate system and a Cartesian space coordinate system.



Six-joint coordinate system Of WLKATA Mirobot



Reference frame (Cartesian space coordinate system) of WLKATA Mirobot


Joint coordinate system: the coordinate system determined by reference to each moving joint.

This manipulator has six joints: J1 J2 J3 J4 J5 J6, all of which are rotary joints. The positive rotation direction of each joint follows the right-hand rule and the thumb points to the opposite direction of the output shaft of each shaft motor

Cartesian coordinate system: The coordinate system is determined by reference to the base of the manipulator.

The origin of the coordinate system is the center of the base platform. The x-axis direction is perpendicular to the fixed base forward.
The y-axis direction is perpendicular to the fixed base to the left.


Movement Mode
The motion modes of the Mirobot manipulator include Joint motion mode and Coordinate mode.
Joint motion mode:
the Joint motion mode means that each joint of the manipulator is controlled separately. You can click the joint motion button to move a single joint.

Click "J1 +" and "J1 -" to control the positive and negative rotation of the base motor. Click "J2 +" and "J2 -" to control the positive and negative rotation of the boom motor.
Click "J3 +" and "J3 -" to control the positive and negative movement of the jib motor.
Click "J4 +" and "J4 -" to control the positive and negative rotation of the fourth axis at the end.
Click "J5 +" and "J5 -" to control the positive and negative rotation of the fifth axis at the end.
Click "J6 +" and "J6 -" to control the positive and negative rotation of the sixth axis at the end.

Cartesian motion mode:
The Cartesian motion mode of the manipulator controls the position and attitude of the en-effector. You can click the coordinate and RPY angle motion buttons to change the position and attitude of the end actuator.

Click "X +" and "X -" to control the manipulator to move along the positive and negative directions of the X-axis.
Click "Y +" and "Y -" to control the manipulator to move along the positive and negative directions of the Y-axis.
Click "Z +" and "Z -" to control the manipulator to move along the positive and negative directions of the Z-axis.
Click "PX +" and "PX -" and the end posture of the manipulator rotates along the X- axis.
Click "PY +" and "PY -" to rotate the end posture of the manipulator along the Y- axis.
Click "PZ +" and "PZ -" and the end posture of the manipulator rotates along the Z- axis.

The Cartesian motion mode supports point-to-point motion mode and linear interpolation motion mode. Please refer to the WLKATA Mirobot communication instructions for specific modes information.


Technical Specifications
Robotic Arm


Axis Motion Parameters (Load 160g)


Control and Software


Multifunctional Extender Box


End-effectors (Pen Holder)



End-effectors (Servo Gripper)


Pnumatic Set (Air Pump)


Pnumatic Set (Single head pnuematic suction cup)


Pnumatic Set (Double head pnuematic suction cup)


Pnumatic Set (Three finger soft gripper)


Pnumatic Set (Spare suction cup)


Bluetooth Controller (Available in Mirobot Professional Kit)



Size Parameters
The size parameters of WLKATA Mirobot are shown in the Figure below.



The installation hole size of its end flange is shown in the Figure below.





version V1.4.0 ¡¤ published: Wed Jun 30 2021

Made with Docsie.io






Content copyright WLKATA  Robotics
Powered by Docsie.io

